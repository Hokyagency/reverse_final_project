
STM32_Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7ac  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800a974  0800a974  0000b974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa9c  0800aa9c  0000c3cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800aa9c  0800aa9c  0000ba9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aaa4  0800aaa4  0000c3cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aaa4  0800aaa4  0000baa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aaa8  0800aaa8  0000baa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003cc  20000000  0800aaac  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cf0  200003cc  0800ae78  0000c3cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020bc  0800ae78  0000d0bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c3cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c0de  00000000  00000000  0000c3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004445  00000000  00000000  000284da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  0002c920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b7  00000000  00000000  0002e038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a431  00000000  00000000  0002f1ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e898  00000000  00000000  00059620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f77bf  00000000  00000000  00077eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016f677  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062b4  00000000  00000000  0016f6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00175970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200003cc 	.word	0x200003cc
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800a95c 	.word	0x0800a95c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200003d0 	.word	0x200003d0
 8000204:	0800a95c 	.word	0x0800a95c

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	4b1e      	ldr	r3, [pc, #120]	@ (80005d4 <MX_GPIO_Init+0x90>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	4a1d      	ldr	r2, [pc, #116]	@ (80005d4 <MX_GPIO_Init+0x90>)
 8000560:	f043 0302 	orr.w	r3, r3, #2
 8000564:	6313      	str	r3, [r2, #48]	@ 0x30
 8000566:	4b1b      	ldr	r3, [pc, #108]	@ (80005d4 <MX_GPIO_Init+0x90>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000572:	4b18      	ldr	r3, [pc, #96]	@ (80005d4 <MX_GPIO_Init+0x90>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	4a17      	ldr	r2, [pc, #92]	@ (80005d4 <MX_GPIO_Init+0x90>)
 8000578:	f043 0308 	orr.w	r3, r3, #8
 800057c:	6313      	str	r3, [r2, #48]	@ 0x30
 800057e:	4b15      	ldr	r3, [pc, #84]	@ (80005d4 <MX_GPIO_Init+0x90>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	f003 0308 	and.w	r3, r3, #8
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	4b12      	ldr	r3, [pc, #72]	@ (80005d4 <MX_GPIO_Init+0x90>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	4a11      	ldr	r2, [pc, #68]	@ (80005d4 <MX_GPIO_Init+0x90>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6313      	str	r3, [r2, #48]	@ 0x30
 8000596:	4b0f      	ldr	r3, [pc, #60]	@ (80005d4 <MX_GPIO_Init+0x90>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led1_Pin|led3_Pin|led2_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80005a8:	480b      	ldr	r0, [pc, #44]	@ (80005d8 <MX_GPIO_Init+0x94>)
 80005aa:	f001 feed 	bl	8002388 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led1_Pin led3_Pin led2_Pin */
  GPIO_InitStruct.Pin = led1_Pin|led3_Pin|led2_Pin;
 80005ae:	f244 0381 	movw	r3, #16513	@ 0x4081
 80005b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	4619      	mov	r1, r3
 80005c6:	4804      	ldr	r0, [pc, #16]	@ (80005d8 <MX_GPIO_Init+0x94>)
 80005c8:	f001 fd32 	bl	8002030 <HAL_GPIO_Init>

}
 80005cc:	bf00      	nop
 80005ce:	3720      	adds	r7, #32
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020400 	.word	0x40020400

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005e2:	f000 fd63 	bl	80010ac <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f001 f928 	bl	800183a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f869 	bl	80006c0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f7ff ffa9 	bl	8000544 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f2:	f001 f861 	bl	80016b8 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80005f6:	f000 feaf 	bl	8001358 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005fa:	f000 ff17 	bl	800142c <MX_TIM2_Init>
  MX_TIM3_Init();
 80005fe:	f000 ff7d 	bl	80014fc <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000602:	f009 faed 	bl	8009be0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  linear_buf_reset(&linear_buf);
 8000606:	4829      	ldr	r0, [pc, #164]	@ (80006ac <main+0xd0>)
 8000608:	f000 f8c0 	bl	800078c <linear_buf_reset>
  HAL_UART_Transmit(&huart3, msg, strlen((char*)msg), HAL_MAX_DELAY);
 800060c:	4828      	ldr	r0, [pc, #160]	@ (80006b0 <main+0xd4>)
 800060e:	f7ff fdfb 	bl	8000208 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	4925      	ldr	r1, [pc, #148]	@ (80006b0 <main+0xd4>)
 800061c:	4825      	ldr	r0, [pc, #148]	@ (80006b4 <main+0xd8>)
 800061e:	f004 ff21 	bl	8005464 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t rx_char;
  while (1)
  {
    if (HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY) {
 8000622:	4824      	ldr	r0, [pc, #144]	@ (80006b4 <main+0xd8>)
 8000624:	f005 fb62 	bl	8005cec <HAL_UART_GetState>
 8000628:	4603      	mov	r3, r0
 800062a:	2b20      	cmp	r3, #32
 800062c:	d1f9      	bne.n	8000622 <main+0x46>
      if (HAL_UART_Receive(&huart3, &rx_char, 1, 0) == HAL_OK) {
 800062e:	1df9      	adds	r1, r7, #7
 8000630:	2300      	movs	r3, #0
 8000632:	2201      	movs	r2, #1
 8000634:	481f      	ldr	r0, [pc, #124]	@ (80006b4 <main+0xd8>)
 8000636:	f004 ff9e 	bl	8005576 <HAL_UART_Receive>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1f0      	bne.n	8000622 <main+0x46>
        if (rx_char == '\r' || rx_char == '\n') {
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	2b0d      	cmp	r3, #13
 8000644:	d002      	beq.n	800064c <main+0x70>
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2b0a      	cmp	r3, #10
 800064a:	d111      	bne.n	8000670 <main+0x94>
          process_command((char*)linear_buf.buffer);
 800064c:	481a      	ldr	r0, [pc, #104]	@ (80006b8 <main+0xdc>)
 800064e:	f000 fb3d 	bl	8000ccc <process_command>
          linear_buf_reset(&linear_buf);
 8000652:	4816      	ldr	r0, [pc, #88]	@ (80006ac <main+0xd0>)
 8000654:	f000 f89a 	bl	800078c <linear_buf_reset>
          HAL_UART_Transmit(&huart3, msg, strlen((char*)msg), HAL_MAX_DELAY);
 8000658:	4815      	ldr	r0, [pc, #84]	@ (80006b0 <main+0xd4>)
 800065a:	f7ff fdd5 	bl	8000208 <strlen>
 800065e:	4603      	mov	r3, r0
 8000660:	b29a      	uxth	r2, r3
 8000662:	f04f 33ff 	mov.w	r3, #4294967295
 8000666:	4912      	ldr	r1, [pc, #72]	@ (80006b0 <main+0xd4>)
 8000668:	4812      	ldr	r0, [pc, #72]	@ (80006b4 <main+0xd8>)
 800066a:	f004 fefb 	bl	8005464 <HAL_UART_Transmit>
 800066e:	e01c      	b.n	80006aa <main+0xce>
        } else {
          if (linear_buf_insert_char(&linear_buf, rx_char) != 0) {
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	4619      	mov	r1, r3
 8000674:	480d      	ldr	r0, [pc, #52]	@ (80006ac <main+0xd0>)
 8000676:	f000 f89b 	bl	80007b0 <linear_buf_insert_char>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d0d0      	beq.n	8000622 <main+0x46>
            HAL_UART_Transmit(&huart3, (uint8_t*)"Buffer overflow!\r\n", strlen("Buffer overflow!\r\n"), HAL_MAX_DELAY);
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	2212      	movs	r2, #18
 8000686:	490d      	ldr	r1, [pc, #52]	@ (80006bc <main+0xe0>)
 8000688:	480a      	ldr	r0, [pc, #40]	@ (80006b4 <main+0xd8>)
 800068a:	f004 feeb 	bl	8005464 <HAL_UART_Transmit>
            linear_buf_reset(&linear_buf);
 800068e:	4807      	ldr	r0, [pc, #28]	@ (80006ac <main+0xd0>)
 8000690:	f000 f87c 	bl	800078c <linear_buf_reset>
            HAL_UART_Transmit(&huart3, msg, strlen((char*)msg), HAL_MAX_DELAY);
 8000694:	4806      	ldr	r0, [pc, #24]	@ (80006b0 <main+0xd4>)
 8000696:	f7ff fdb7 	bl	8000208 <strlen>
 800069a:	4603      	mov	r3, r0
 800069c:	b29a      	uxth	r2, r3
 800069e:	f04f 33ff 	mov.w	r3, #4294967295
 80006a2:	4903      	ldr	r1, [pc, #12]	@ (80006b0 <main+0xd4>)
 80006a4:	4803      	ldr	r0, [pc, #12]	@ (80006b4 <main+0xd8>)
 80006a6:	f004 fedd 	bl	8005464 <HAL_UART_Transmit>
    if (HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY) {
 80006aa:	e7ba      	b.n	8000622 <main+0x46>
 80006ac:	200003e8 	.word	0x200003e8
 80006b0:	20000000 	.word	0x20000000
 80006b4:	2000050c 	.word	0x2000050c
 80006b8:	200003e9 	.word	0x200003e9
 80006bc:	0800aa28 	.word	0x0800aa28

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	@ 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	@ 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f00a f8a4 	bl	800a81c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	4b27      	ldr	r3, [pc, #156]	@ (8000784 <SystemClock_Config+0xc4>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e8:	4a26      	ldr	r2, [pc, #152]	@ (8000784 <SystemClock_Config+0xc4>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f0:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <SystemClock_Config+0xc4>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006fc:	4b22      	ldr	r3, [pc, #136]	@ (8000788 <SystemClock_Config+0xc8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000704:	4a20      	ldr	r2, [pc, #128]	@ (8000788 <SystemClock_Config+0xc8>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b1e      	ldr	r3, [pc, #120]	@ (8000788 <SystemClock_Config+0xc8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800072c:	2310      	movs	r3, #16
 800072e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000730:	23c0      	movs	r3, #192	@ 0xc0
 8000732:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000738:	2303      	movs	r3, #3
 800073a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4618      	mov	r0, r3
 8000742:	f003 f8dd 	bl	8003900 <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800074c:	f000 fcda 	bl	8001104 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	230f      	movs	r3, #15
 8000752:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f003 fb6c 	bl	8003e48 <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000776:	f000 fcc5 	bl	8001104 <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3750      	adds	r7, #80	@ 0x50
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40007000 	.word	0x40007000

0800078c <linear_buf_reset>:
/* USER CODE BEGIN 4 */
volatile uint8_t chenillard1_step = 0;
volatile GPIO_PinState chenillard2_state = GPIO_PIN_SET;
volatile GPIO_PinState chenillard3_state = GPIO_PIN_SET;

void linear_buf_reset(struct linear_buf_t *lb) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  lb->current_index = 0;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2200      	movs	r2, #0
 8000798:	701a      	strb	r2, [r3, #0]
  memset(lb->buffer, 0, sizeof(lb->buffer));
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	3301      	adds	r3, #1
 800079e:	2228      	movs	r2, #40	@ 0x28
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f00a f83a 	bl	800a81c <memset>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <linear_buf_insert_char>:

int linear_buf_insert_char(struct linear_buf_t *lb, uint8_t c) {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
  if (lb->current_index >= MAX_BUFFER_SIZE - 1) {
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b26      	cmp	r3, #38	@ 0x26
 80007c2:	d902      	bls.n	80007ca <linear_buf_insert_char+0x1a>
    return -1;
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	e012      	b.n	80007f0 <linear_buf_insert_char+0x40>
  }
  lb->buffer[lb->current_index++] = c;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	1c5a      	adds	r2, r3, #1
 80007d0:	b2d1      	uxtb	r1, r2
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	7011      	strb	r1, [r2, #0]
 80007d6:	461a      	mov	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4413      	add	r3, r2
 80007dc:	78fa      	ldrb	r2, [r7, #3]
 80007de:	705a      	strb	r2, [r3, #1]
  lb->buffer[lb->current_index] = '\0';
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4413      	add	r3, r2
 80007ea:	2200      	movs	r2, #0
 80007ec:	705a      	strb	r2, [r3, #1]
  return 0;
 80007ee:	2300      	movs	r3, #0
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <stop_chenillard>:

void stop_chenillard(void) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  chenillard_running = 0;
 8000800:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <stop_chenillard+0x5c>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
  current_chenillard = 0;
 8000806:	4b15      	ldr	r3, [pc, #84]	@ (800085c <stop_chenillard+0x60>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
  stop_timer(&htim1);
 800080c:	4814      	ldr	r0, [pc, #80]	@ (8000860 <stop_chenillard+0x64>)
 800080e:	f000 f872 	bl	80008f6 <stop_timer>
  stop_timer(&htim2);
 8000812:	4814      	ldr	r0, [pc, #80]	@ (8000864 <stop_chenillard+0x68>)
 8000814:	f000 f86f 	bl	80008f6 <stop_timer>
  stop_timer(&htim3);
 8000818:	4813      	ldr	r0, [pc, #76]	@ (8000868 <stop_chenillard+0x6c>)
 800081a:	f000 f86c 	bl	80008f6 <stop_timer>
  tim1_active = 0;
 800081e:	4b13      	ldr	r3, [pc, #76]	@ (800086c <stop_chenillard+0x70>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
  tim2_active = 0;
 8000824:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <stop_chenillard+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
  tim3_active = 0;
 800082a:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <stop_chenillard+0x78>)
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOB, led1_Pin | led2_Pin | led3_Pin, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000836:	4810      	ldr	r0, [pc, #64]	@ (8000878 <stop_chenillard+0x7c>)
 8000838:	f001 fda6 	bl	8002388 <HAL_GPIO_WritePin>
  HAL_UART_Transmit(&huart3, msg_chenillard_off, strlen((char*)msg_chenillard_off), HAL_MAX_DELAY);
 800083c:	480f      	ldr	r0, [pc, #60]	@ (800087c <stop_chenillard+0x80>)
 800083e:	f7ff fce3 	bl	8000208 <strlen>
 8000842:	4603      	mov	r3, r0
 8000844:	b29a      	uxth	r2, r3
 8000846:	f04f 33ff 	mov.w	r3, #4294967295
 800084a:	490c      	ldr	r1, [pc, #48]	@ (800087c <stop_chenillard+0x80>)
 800084c:	480c      	ldr	r0, [pc, #48]	@ (8000880 <stop_chenillard+0x84>)
 800084e:	f004 fe09 	bl	8005464 <HAL_UART_Transmit>
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000411 	.word	0x20000411
 800085c:	20000412 	.word	0x20000412
 8000860:	20000428 	.word	0x20000428
 8000864:	20000474 	.word	0x20000474
 8000868:	200004c0 	.word	0x200004c0
 800086c:	20000420 	.word	0x20000420
 8000870:	20000421 	.word	0x20000421
 8000874:	20000422 	.word	0x20000422
 8000878:	40020400 	.word	0x40020400
 800087c:	20000084 	.word	0x20000084
 8000880:	2000050c 	.word	0x2000050c

08000884 <start_chenillard>:

void start_chenillard(uint8_t chenillard_id) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  stop_chenillard(); // Stop any running chenillard
 800088e:	f7ff ffb5 	bl	80007fc <stop_chenillard>
  current_chenillard = chenillard_id;
 8000892:	4a0a      	ldr	r2, [pc, #40]	@ (80008bc <start_chenillard+0x38>)
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	7013      	strb	r3, [r2, #0]
  chenillard_running = 1;
 8000898:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <start_chenillard+0x3c>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart3, msg_chenillard_on, strlen((char*)msg_chenillard_on), HAL_MAX_DELAY);
 800089e:	4809      	ldr	r0, [pc, #36]	@ (80008c4 <start_chenillard+0x40>)
 80008a0:	f7ff fcb2 	bl	8000208 <strlen>
 80008a4:	4603      	mov	r3, r0
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ac:	4905      	ldr	r1, [pc, #20]	@ (80008c4 <start_chenillard+0x40>)
 80008ae:	4806      	ldr	r0, [pc, #24]	@ (80008c8 <start_chenillard+0x44>)
 80008b0:	f004 fdd8 	bl	8005464 <HAL_UART_Transmit>
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000412 	.word	0x20000412
 80008c0:	20000411 	.word	0x20000411
 80008c4:	2000006c 	.word	0x2000006c
 80008c8:	2000050c 	.word	0x2000050c

080008cc <start_timer>:

void start_timer(TIM_HandleTypeDef *htim, uint32_t period) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  __HAL_TIM_SET_AUTORELOAD(htim, period - 1);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	683a      	ldr	r2, [r7, #0]
 80008dc:	3a01      	subs	r2, #1
 80008de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	1e5a      	subs	r2, r3, #1
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(htim);
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f004 f8db 	bl	8004aa4 <HAL_TIM_Base_Start_IT>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <stop_timer>:

void stop_timer(TIM_HandleTypeDef *htim) {
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
  HAL_TIM_Base_Stop_IT(htim);
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f004 f948 	bl	8004b94 <HAL_TIM_Base_Stop_IT>
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <set_chenillard_speed>:

void set_chenillard_speed(uint8_t chenillard_id, uint8_t frequency) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	460a      	mov	r2, r1
 8000916:	71fb      	strb	r3, [r7, #7]
 8000918:	4613      	mov	r3, r2
 800091a:	71bb      	strb	r3, [r7, #6]
  uint32_t period = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  if (frequency == 1) {
 8000920:	79bb      	ldrb	r3, [r7, #6]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d10e      	bne.n	8000944 <set_chenillard_speed+0x38>
    period = 500; // Vitesse de base (ajuster)
 8000926:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800092a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart3, msg_freq_set_base, strlen((char*)msg_freq_set_base), HAL_MAX_DELAY);
 800092c:	4845      	ldr	r0, [pc, #276]	@ (8000a44 <set_chenillard_speed+0x138>)
 800092e:	f7ff fc6b 	bl	8000208 <strlen>
 8000932:	4603      	mov	r3, r0
 8000934:	b29a      	uxth	r2, r3
 8000936:	f04f 33ff 	mov.w	r3, #4294967295
 800093a:	4942      	ldr	r1, [pc, #264]	@ (8000a44 <set_chenillard_speed+0x138>)
 800093c:	4842      	ldr	r0, [pc, #264]	@ (8000a48 <set_chenillard_speed+0x13c>)
 800093e:	f004 fd91 	bl	8005464 <HAL_UART_Transmit>
 8000942:	e02f      	b.n	80009a4 <set_chenillard_speed+0x98>
  } else if (frequency == 2) {
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	2b02      	cmp	r3, #2
 8000948:	d10e      	bne.n	8000968 <set_chenillard_speed+0x5c>
    period = 1000; // Vitesse plus lente (ajuster)
 800094a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800094e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart3, msg_freq_set_slower, strlen((char*)msg_freq_set_slower), HAL_MAX_DELAY);
 8000950:	483e      	ldr	r0, [pc, #248]	@ (8000a4c <set_chenillard_speed+0x140>)
 8000952:	f7ff fc59 	bl	8000208 <strlen>
 8000956:	4603      	mov	r3, r0
 8000958:	b29a      	uxth	r2, r3
 800095a:	f04f 33ff 	mov.w	r3, #4294967295
 800095e:	493b      	ldr	r1, [pc, #236]	@ (8000a4c <set_chenillard_speed+0x140>)
 8000960:	4839      	ldr	r0, [pc, #228]	@ (8000a48 <set_chenillard_speed+0x13c>)
 8000962:	f004 fd7f 	bl	8005464 <HAL_UART_Transmit>
 8000966:	e01d      	b.n	80009a4 <set_chenillard_speed+0x98>
  } else if (frequency == 3) {
 8000968:	79bb      	ldrb	r3, [r7, #6]
 800096a:	2b03      	cmp	r3, #3
 800096c:	d10e      	bne.n	800098c <set_chenillard_speed+0x80>
    period = 3000; // Vitesse plus rapide (ajuster)
 800096e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000972:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart3, msg_freq_set_faster, strlen((char*)msg_freq_set_faster), HAL_MAX_DELAY);
 8000974:	4836      	ldr	r0, [pc, #216]	@ (8000a50 <set_chenillard_speed+0x144>)
 8000976:	f7ff fc47 	bl	8000208 <strlen>
 800097a:	4603      	mov	r3, r0
 800097c:	b29a      	uxth	r2, r3
 800097e:	f04f 33ff 	mov.w	r3, #4294967295
 8000982:	4933      	ldr	r1, [pc, #204]	@ (8000a50 <set_chenillard_speed+0x144>)
 8000984:	4830      	ldr	r0, [pc, #192]	@ (8000a48 <set_chenillard_speed+0x13c>)
 8000986:	f004 fd6d 	bl	8005464 <HAL_UART_Transmit>
 800098a:	e00b      	b.n	80009a4 <set_chenillard_speed+0x98>
  } else {
    HAL_UART_Transmit(&huart3, msg_freq_invalid, strlen((char*)msg_freq_invalid), HAL_MAX_DELAY);
 800098c:	4831      	ldr	r0, [pc, #196]	@ (8000a54 <set_chenillard_speed+0x148>)
 800098e:	f7ff fc3b 	bl	8000208 <strlen>
 8000992:	4603      	mov	r3, r0
 8000994:	b29a      	uxth	r2, r3
 8000996:	f04f 33ff 	mov.w	r3, #4294967295
 800099a:	492e      	ldr	r1, [pc, #184]	@ (8000a54 <set_chenillard_speed+0x148>)
 800099c:	482a      	ldr	r0, [pc, #168]	@ (8000a48 <set_chenillard_speed+0x13c>)
 800099e:	f004 fd61 	bl	8005464 <HAL_UART_Transmit>
    return;
 80009a2:	e04c      	b.n	8000a3e <set_chenillard_speed+0x132>
  }

  if (chenillard_id == 1) {
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d116      	bne.n	80009d8 <set_chenillard_speed+0xcc>
    chenillard1_speed = period;
 80009aa:	4a2b      	ldr	r2, [pc, #172]	@ (8000a58 <set_chenillard_speed+0x14c>)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	6013      	str	r3, [r2, #0]
    if (chenillard_running && current_chenillard == 1) {
 80009b0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a5c <set_chenillard_speed+0x150>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d041      	beq.n	8000a3e <set_chenillard_speed+0x132>
 80009ba:	4b29      	ldr	r3, [pc, #164]	@ (8000a60 <set_chenillard_speed+0x154>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d13c      	bne.n	8000a3e <set_chenillard_speed+0x132>
      start_timer(&htim1, chenillard1_speed);
 80009c4:	4b24      	ldr	r3, [pc, #144]	@ (8000a58 <set_chenillard_speed+0x14c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4619      	mov	r1, r3
 80009ca:	4826      	ldr	r0, [pc, #152]	@ (8000a64 <set_chenillard_speed+0x158>)
 80009cc:	f7ff ff7e 	bl	80008cc <start_timer>
      tim1_active = 1;
 80009d0:	4b25      	ldr	r3, [pc, #148]	@ (8000a68 <set_chenillard_speed+0x15c>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	701a      	strb	r2, [r3, #0]
 80009d6:	e032      	b.n	8000a3e <set_chenillard_speed+0x132>
    }
  } else if (chenillard_id == 2) {
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	2b02      	cmp	r3, #2
 80009dc:	d116      	bne.n	8000a0c <set_chenillard_speed+0x100>
    chenillard2_speed = period;
 80009de:	4a23      	ldr	r2, [pc, #140]	@ (8000a6c <set_chenillard_speed+0x160>)
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	6013      	str	r3, [r2, #0]
    if (chenillard_running && current_chenillard == 2) {
 80009e4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a5c <set_chenillard_speed+0x150>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d027      	beq.n	8000a3e <set_chenillard_speed+0x132>
 80009ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000a60 <set_chenillard_speed+0x154>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d122      	bne.n	8000a3e <set_chenillard_speed+0x132>
      start_timer(&htim2, chenillard2_speed);
 80009f8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a6c <set_chenillard_speed+0x160>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4619      	mov	r1, r3
 80009fe:	481c      	ldr	r0, [pc, #112]	@ (8000a70 <set_chenillard_speed+0x164>)
 8000a00:	f7ff ff64 	bl	80008cc <start_timer>
      tim2_active = 1;
 8000a04:	4b1b      	ldr	r3, [pc, #108]	@ (8000a74 <set_chenillard_speed+0x168>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
 8000a0a:	e018      	b.n	8000a3e <set_chenillard_speed+0x132>
    }
  } else if (chenillard_id == 3) {
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	d115      	bne.n	8000a3e <set_chenillard_speed+0x132>
    chenillard3_speed = period;
 8000a12:	4a19      	ldr	r2, [pc, #100]	@ (8000a78 <set_chenillard_speed+0x16c>)
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	6013      	str	r3, [r2, #0]
    if (chenillard_running && current_chenillard == 3) {
 8000a18:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <set_chenillard_speed+0x150>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d00d      	beq.n	8000a3e <set_chenillard_speed+0x132>
 8000a22:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <set_chenillard_speed+0x154>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	2b03      	cmp	r3, #3
 8000a2a:	d108      	bne.n	8000a3e <set_chenillard_speed+0x132>
      start_timer(&htim3, chenillard3_speed);
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <set_chenillard_speed+0x16c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4619      	mov	r1, r3
 8000a32:	4812      	ldr	r0, [pc, #72]	@ (8000a7c <set_chenillard_speed+0x170>)
 8000a34:	f7ff ff4a 	bl	80008cc <start_timer>
      tim3_active = 1;
 8000a38:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <set_chenillard_speed+0x174>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000104 	.word	0x20000104
 8000a48:	2000050c 	.word	0x2000050c
 8000a4c:	2000013c 	.word	0x2000013c
 8000a50:	20000178 	.word	0x20000178
 8000a54:	200001b4 	.word	0x200001b4
 8000a58:	20000414 	.word	0x20000414
 8000a5c:	20000411 	.word	0x20000411
 8000a60:	20000412 	.word	0x20000412
 8000a64:	20000428 	.word	0x20000428
 8000a68:	20000420 	.word	0x20000420
 8000a6c:	20000418 	.word	0x20000418
 8000a70:	20000474 	.word	0x20000474
 8000a74:	20000421 	.word	0x20000421
 8000a78:	2000041c 	.word	0x2000041c
 8000a7c:	200004c0 	.word	0x200004c0
 8000a80:	20000422 	.word	0x20000422

08000a84 <chenillard1>:

void chenillard1(TIM_HandleTypeDef *htim) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a33      	ldr	r2, [pc, #204]	@ (8000b60 <chenillard1+0xdc>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d15f      	bne.n	8000b56 <chenillard1+0xd2>
    switch (chenillard1_step) {
 8000a96:	4b33      	ldr	r3, [pc, #204]	@ (8000b64 <chenillard1+0xe0>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	2b04      	cmp	r3, #4
 8000a9e:	d849      	bhi.n	8000b34 <chenillard1+0xb0>
 8000aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8000aa8 <chenillard1+0x24>)
 8000aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa6:	bf00      	nop
 8000aa8:	08000abd 	.word	0x08000abd
 8000aac:	08000ad5 	.word	0x08000ad5
 8000ab0:	08000aed 	.word	0x08000aed
 8000ab4:	08000b05 	.word	0x08000b05
 8000ab8:	08000b1d 	.word	0x08000b1d
      case 0:
        HAL_GPIO_WritePin(GPIOB, led1_Pin, GPIO_PIN_SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	2101      	movs	r1, #1
 8000ac0:	4829      	ldr	r0, [pc, #164]	@ (8000b68 <chenillard1+0xe4>)
 8000ac2:	f001 fc61 	bl	8002388 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, led2_Pin | led3_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000acc:	4826      	ldr	r0, [pc, #152]	@ (8000b68 <chenillard1+0xe4>)
 8000ace:	f001 fc5b 	bl	8002388 <HAL_GPIO_WritePin>
        break;
 8000ad2:	e02f      	b.n	8000b34 <chenillard1+0xb0>
      case 1:
        HAL_GPIO_WritePin(GPIOB, led2_Pin, GPIO_PIN_SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2180      	movs	r1, #128	@ 0x80
 8000ad8:	4823      	ldr	r0, [pc, #140]	@ (8000b68 <chenillard1+0xe4>)
 8000ada:	f001 fc55 	bl	8002388 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, led1_Pin | led3_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000ae4:	4820      	ldr	r0, [pc, #128]	@ (8000b68 <chenillard1+0xe4>)
 8000ae6:	f001 fc4f 	bl	8002388 <HAL_GPIO_WritePin>
        break;
 8000aea:	e023      	b.n	8000b34 <chenillard1+0xb0>
      case 2:
        HAL_GPIO_WritePin(GPIOB, led3_Pin, GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000af2:	481d      	ldr	r0, [pc, #116]	@ (8000b68 <chenillard1+0xe4>)
 8000af4:	f001 fc48 	bl	8002388 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, led1_Pin | led2_Pin, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2181      	movs	r1, #129	@ 0x81
 8000afc:	481a      	ldr	r0, [pc, #104]	@ (8000b68 <chenillard1+0xe4>)
 8000afe:	f001 fc43 	bl	8002388 <HAL_GPIO_WritePin>
        break;
 8000b02:	e017      	b.n	8000b34 <chenillard1+0xb0>
      case 3:
        HAL_GPIO_WritePin(GPIOB, led2_Pin, GPIO_PIN_SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	2180      	movs	r1, #128	@ 0x80
 8000b08:	4817      	ldr	r0, [pc, #92]	@ (8000b68 <chenillard1+0xe4>)
 8000b0a:	f001 fc3d 	bl	8002388 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, led1_Pin | led3_Pin, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b14:	4814      	ldr	r0, [pc, #80]	@ (8000b68 <chenillard1+0xe4>)
 8000b16:	f001 fc37 	bl	8002388 <HAL_GPIO_WritePin>
        break;
 8000b1a:	e00b      	b.n	8000b34 <chenillard1+0xb0>
      case 4:
        HAL_GPIO_WritePin(GPIOB, led1_Pin, GPIO_PIN_SET);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	2101      	movs	r1, #1
 8000b20:	4811      	ldr	r0, [pc, #68]	@ (8000b68 <chenillard1+0xe4>)
 8000b22:	f001 fc31 	bl	8002388 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, led2_Pin | led3_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000b2c:	480e      	ldr	r0, [pc, #56]	@ (8000b68 <chenillard1+0xe4>)
 8000b2e:	f001 fc2b 	bl	8002388 <HAL_GPIO_WritePin>
        break;
 8000b32:	bf00      	nop
    }
    chenillard1_step = ((chenillard1_step + 1) % 5);
 8000b34:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <chenillard1+0xe0>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <chenillard1+0xe8>)
 8000b3e:	fb83 1302 	smull	r1, r3, r3, r2
 8000b42:	1059      	asrs	r1, r3, #1
 8000b44:	17d3      	asrs	r3, r2, #31
 8000b46:	1ac9      	subs	r1, r1, r3
 8000b48:	460b      	mov	r3, r1
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	1ad1      	subs	r1, r2, r3
 8000b50:	b2ca      	uxtb	r2, r1
 8000b52:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <chenillard1+0xe0>)
 8000b54:	701a      	strb	r2, [r3, #0]
  }
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40010000 	.word	0x40010000
 8000b64:	20000423 	.word	0x20000423
 8000b68:	40020400 	.word	0x40020400
 8000b6c:	66666667 	.word	0x66666667

08000b70 <chenillard2>:

void chenillard2(TIM_HandleTypeDef *htim) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b80:	d120      	bne.n	8000bc4 <chenillard2+0x54>
    HAL_GPIO_WritePin(GPIOB, led1_Pin | led3_Pin, chenillard2_state);
 8000b82:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <chenillard2+0x5c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	461a      	mov	r2, r3
 8000b8a:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b8e:	4810      	ldr	r0, [pc, #64]	@ (8000bd0 <chenillard2+0x60>)
 8000b90:	f001 fbfa 	bl	8002388 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, led2_Pin, !chenillard2_state);
 8000b94:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <chenillard2+0x5c>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	bf0c      	ite	eq
 8000b9e:	2301      	moveq	r3, #1
 8000ba0:	2300      	movne	r3, #0
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	2180      	movs	r1, #128	@ 0x80
 8000ba8:	4809      	ldr	r0, [pc, #36]	@ (8000bd0 <chenillard2+0x60>)
 8000baa:	f001 fbed 	bl	8002388 <HAL_GPIO_WritePin>
    chenillard2_state = !chenillard2_state;
 8000bae:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <chenillard2+0x5c>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	bf0c      	ite	eq
 8000bb8:	2301      	moveq	r3, #1
 8000bba:	2300      	movne	r3, #0
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b02      	ldr	r3, [pc, #8]	@ (8000bcc <chenillard2+0x5c>)
 8000bc2:	701a      	strb	r2, [r3, #0]
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	2000026c 	.word	0x2000026c
 8000bd0:	40020400 	.word	0x40020400

08000bd4 <chenillard3>:

void chenillard3(TIM_HandleTypeDef *htim) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) {
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c18 <chenillard3+0x44>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d113      	bne.n	8000c0e <chenillard3+0x3a>
    HAL_GPIO_WritePin(GPIOB, led1_Pin | led2_Pin | led3_Pin, chenillard3_state);
 8000be6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <chenillard3+0x48>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	461a      	mov	r2, r3
 8000bee:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000bf2:	480b      	ldr	r0, [pc, #44]	@ (8000c20 <chenillard3+0x4c>)
 8000bf4:	f001 fbc8 	bl	8002388 <HAL_GPIO_WritePin>
    chenillard3_state = !chenillard3_state;
 8000bf8:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <chenillard3+0x48>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	bf0c      	ite	eq
 8000c02:	2301      	moveq	r3, #1
 8000c04:	2300      	movne	r3, #0
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <chenillard3+0x48>)
 8000c0c:	701a      	strb	r2, [r3, #0]
  }
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40000400 	.word	0x40000400
 8000c1c:	2000026d 	.word	0x2000026d
 8000c20:	40020400 	.word	0x40020400

08000c24 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if (chenillard_running) {
 8000c2c:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d038      	beq.n	8000ca8 <HAL_TIM_PeriodElapsedCallback+0x84>
    if (htim->Instance == TIM1 && current_chenillard == 1 && tim1_active) {
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d10d      	bne.n	8000c5c <HAL_TIM_PeriodElapsedCallback+0x38>
 8000c40:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d108      	bne.n	8000c5c <HAL_TIM_PeriodElapsedCallback+0x38>
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <HAL_TIM_PeriodElapsedCallback+0x38>
      chenillard1(htim);
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ff15 	bl	8000a84 <chenillard1>
 8000c5a:	e025      	b.n	8000ca8 <HAL_TIM_PeriodElapsedCallback+0x84>
    } else if (htim->Instance == TIM2 && current_chenillard == 2 && tim2_active) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c64:	d10d      	bne.n	8000c82 <HAL_TIM_PeriodElapsedCallback+0x5e>
 8000c66:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d108      	bne.n	8000c82 <HAL_TIM_PeriodElapsedCallback+0x5e>
 8000c70:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d003      	beq.n	8000c82 <HAL_TIM_PeriodElapsedCallback+0x5e>
      chenillard2(htim);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff ff78 	bl	8000b70 <chenillard2>
 8000c80:	e012      	b.n	8000ca8 <HAL_TIM_PeriodElapsedCallback+0x84>
    } else if (htim->Instance == TIM3 && current_chenillard == 3 && tim3_active) {
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d10d      	bne.n	8000ca8 <HAL_TIM_PeriodElapsedCallback+0x84>
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b03      	cmp	r3, #3
 8000c94:	d108      	bne.n	8000ca8 <HAL_TIM_PeriodElapsedCallback+0x84>
 8000c96:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d003      	beq.n	8000ca8 <HAL_TIM_PeriodElapsedCallback+0x84>
      chenillard3(htim);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff97 	bl	8000bd4 <chenillard3>
    }
  }
}
 8000ca6:	e7ff      	b.n	8000ca8 <HAL_TIM_PeriodElapsedCallback+0x84>
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000411 	.word	0x20000411
 8000cb4:	40010000 	.word	0x40010000
 8000cb8:	20000412 	.word	0x20000412
 8000cbc:	20000420 	.word	0x20000420
 8000cc0:	20000421 	.word	0x20000421
 8000cc4:	40000400 	.word	0x40000400
 8000cc8:	20000422 	.word	0x20000422

08000ccc <process_command>:

void process_command(char *command) {
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  // 1. Handle LED ON/OFF commands (assumed to be working)
  if (strncmp(command, LED_ON_1, strlen(LED_ON_1)) == 0) {
 8000cd4:	4ba4      	ldr	r3, [pc, #656]	@ (8000f68 <process_command+0x29c>)
 8000cd6:	681c      	ldr	r4, [r3, #0]
 8000cd8:	4ba3      	ldr	r3, [pc, #652]	@ (8000f68 <process_command+0x29c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fa93 	bl	8000208 <strlen>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4621      	mov	r1, r4
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f009 fd9f 	bl	800a82c <strncmp>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d110      	bne.n	8000d16 <process_command+0x4a>
    HAL_GPIO_WritePin(GPIOB, led1_Pin, GPIO_PIN_SET);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	489c      	ldr	r0, [pc, #624]	@ (8000f6c <process_command+0x2a0>)
 8000cfa:	f001 fb45 	bl	8002388 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart3, msg_led_on, strlen((char*)msg_led_on), HAL_MAX_DELAY);
 8000cfe:	489c      	ldr	r0, [pc, #624]	@ (8000f70 <process_command+0x2a4>)
 8000d00:	f7ff fa82 	bl	8000208 <strlen>
 8000d04:	4603      	mov	r3, r0
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0c:	4998      	ldr	r1, [pc, #608]	@ (8000f70 <process_command+0x2a4>)
 8000d0e:	4899      	ldr	r0, [pc, #612]	@ (8000f74 <process_command+0x2a8>)
 8000d10:	f004 fba8 	bl	8005464 <HAL_UART_Transmit>
    return;
 8000d14:	e1b6      	b.n	8001084 <process_command+0x3b8>
  } else if (strncmp(command, LED_OFF_1, strlen(LED_OFF_1)) == 0) {
 8000d16:	4b98      	ldr	r3, [pc, #608]	@ (8000f78 <process_command+0x2ac>)
 8000d18:	681c      	ldr	r4, [r3, #0]
 8000d1a:	4b97      	ldr	r3, [pc, #604]	@ (8000f78 <process_command+0x2ac>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fa72 	bl	8000208 <strlen>
 8000d24:	4603      	mov	r3, r0
 8000d26:	461a      	mov	r2, r3
 8000d28:	4621      	mov	r1, r4
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f009 fd7e 	bl	800a82c <strncmp>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d110      	bne.n	8000d58 <process_command+0x8c>
    HAL_GPIO_WritePin(GPIOB, led1_Pin, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2101      	movs	r1, #1
 8000d3a:	488c      	ldr	r0, [pc, #560]	@ (8000f6c <process_command+0x2a0>)
 8000d3c:	f001 fb24 	bl	8002388 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart3, msg_led_off, strlen((char*)msg_led_off), HAL_MAX_DELAY);
 8000d40:	488e      	ldr	r0, [pc, #568]	@ (8000f7c <process_command+0x2b0>)
 8000d42:	f7ff fa61 	bl	8000208 <strlen>
 8000d46:	4603      	mov	r3, r0
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	498b      	ldr	r1, [pc, #556]	@ (8000f7c <process_command+0x2b0>)
 8000d50:	4888      	ldr	r0, [pc, #544]	@ (8000f74 <process_command+0x2a8>)
 8000d52:	f004 fb87 	bl	8005464 <HAL_UART_Transmit>
    return;
 8000d56:	e195      	b.n	8001084 <process_command+0x3b8>
  } else if (strncmp(command, LED_ON_2, strlen(LED_ON_2)) == 0) {
 8000d58:	4b89      	ldr	r3, [pc, #548]	@ (8000f80 <process_command+0x2b4>)
 8000d5a:	681c      	ldr	r4, [r3, #0]
 8000d5c:	4b88      	ldr	r3, [pc, #544]	@ (8000f80 <process_command+0x2b4>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fa51 	bl	8000208 <strlen>
 8000d66:	4603      	mov	r3, r0
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4621      	mov	r1, r4
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f009 fd5d 	bl	800a82c <strncmp>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d110      	bne.n	8000d9a <process_command+0xce>
    HAL_GPIO_WritePin(GPIOB, led2_Pin, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2180      	movs	r1, #128	@ 0x80
 8000d7c:	487b      	ldr	r0, [pc, #492]	@ (8000f6c <process_command+0x2a0>)
 8000d7e:	f001 fb03 	bl	8002388 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart3, msg_led_on, strlen((char*)msg_led_on), HAL_MAX_DELAY);
 8000d82:	487b      	ldr	r0, [pc, #492]	@ (8000f70 <process_command+0x2a4>)
 8000d84:	f7ff fa40 	bl	8000208 <strlen>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d90:	4977      	ldr	r1, [pc, #476]	@ (8000f70 <process_command+0x2a4>)
 8000d92:	4878      	ldr	r0, [pc, #480]	@ (8000f74 <process_command+0x2a8>)
 8000d94:	f004 fb66 	bl	8005464 <HAL_UART_Transmit>
    return;
 8000d98:	e174      	b.n	8001084 <process_command+0x3b8>
  } else if (strncmp(command, LED_OFF_2, strlen(LED_OFF_2)) == 0) {
 8000d9a:	4b7a      	ldr	r3, [pc, #488]	@ (8000f84 <process_command+0x2b8>)
 8000d9c:	681c      	ldr	r4, [r3, #0]
 8000d9e:	4b79      	ldr	r3, [pc, #484]	@ (8000f84 <process_command+0x2b8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fa30 	bl	8000208 <strlen>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	4621      	mov	r1, r4
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f009 fd3c 	bl	800a82c <strncmp>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d110      	bne.n	8000ddc <process_command+0x110>
    HAL_GPIO_WritePin(GPIOB, led2_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2180      	movs	r1, #128	@ 0x80
 8000dbe:	486b      	ldr	r0, [pc, #428]	@ (8000f6c <process_command+0x2a0>)
 8000dc0:	f001 fae2 	bl	8002388 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart3, msg_led_off, strlen((char*)msg_led_off), HAL_MAX_DELAY);
 8000dc4:	486d      	ldr	r0, [pc, #436]	@ (8000f7c <process_command+0x2b0>)
 8000dc6:	f7ff fa1f 	bl	8000208 <strlen>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	496a      	ldr	r1, [pc, #424]	@ (8000f7c <process_command+0x2b0>)
 8000dd4:	4867      	ldr	r0, [pc, #412]	@ (8000f74 <process_command+0x2a8>)
 8000dd6:	f004 fb45 	bl	8005464 <HAL_UART_Transmit>
    return;
 8000dda:	e153      	b.n	8001084 <process_command+0x3b8>
  } else if (strncmp(command, LED_ON_3, strlen(LED_ON_3)) == 0) {
 8000ddc:	4b6a      	ldr	r3, [pc, #424]	@ (8000f88 <process_command+0x2bc>)
 8000dde:	681c      	ldr	r4, [r3, #0]
 8000de0:	4b69      	ldr	r3, [pc, #420]	@ (8000f88 <process_command+0x2bc>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fa0f 	bl	8000208 <strlen>
 8000dea:	4603      	mov	r3, r0
 8000dec:	461a      	mov	r2, r3
 8000dee:	4621      	mov	r1, r4
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f009 fd1b 	bl	800a82c <strncmp>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d111      	bne.n	8000e20 <process_command+0x154>
    HAL_GPIO_WritePin(GPIOB, led3_Pin, GPIO_PIN_SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e02:	485a      	ldr	r0, [pc, #360]	@ (8000f6c <process_command+0x2a0>)
 8000e04:	f001 fac0 	bl	8002388 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart3, msg_led_on, strlen((char*)msg_led_on), HAL_MAX_DELAY);
 8000e08:	4859      	ldr	r0, [pc, #356]	@ (8000f70 <process_command+0x2a4>)
 8000e0a:	f7ff f9fd 	bl	8000208 <strlen>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
 8000e16:	4956      	ldr	r1, [pc, #344]	@ (8000f70 <process_command+0x2a4>)
 8000e18:	4856      	ldr	r0, [pc, #344]	@ (8000f74 <process_command+0x2a8>)
 8000e1a:	f004 fb23 	bl	8005464 <HAL_UART_Transmit>
    return;
 8000e1e:	e131      	b.n	8001084 <process_command+0x3b8>
  } else if (strncmp(command, LED_OFF_3, strlen(LED_OFF_3)) == 0) {
 8000e20:	4b5a      	ldr	r3, [pc, #360]	@ (8000f8c <process_command+0x2c0>)
 8000e22:	681c      	ldr	r4, [r3, #0]
 8000e24:	4b59      	ldr	r3, [pc, #356]	@ (8000f8c <process_command+0x2c0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff f9ed 	bl	8000208 <strlen>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	461a      	mov	r2, r3
 8000e32:	4621      	mov	r1, r4
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f009 fcf9 	bl	800a82c <strncmp>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d111      	bne.n	8000e64 <process_command+0x198>
    HAL_GPIO_WritePin(GPIOB, led3_Pin, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e46:	4849      	ldr	r0, [pc, #292]	@ (8000f6c <process_command+0x2a0>)
 8000e48:	f001 fa9e 	bl	8002388 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart3, msg_led_off, strlen((char*)msg_led_off), HAL_MAX_DELAY);
 8000e4c:	484b      	ldr	r0, [pc, #300]	@ (8000f7c <process_command+0x2b0>)
 8000e4e:	f7ff f9db 	bl	8000208 <strlen>
 8000e52:	4603      	mov	r3, r0
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5a:	4948      	ldr	r1, [pc, #288]	@ (8000f7c <process_command+0x2b0>)
 8000e5c:	4845      	ldr	r0, [pc, #276]	@ (8000f74 <process_command+0x2a8>)
 8000e5e:	f004 fb01 	bl	8005464 <HAL_UART_Transmit>
    return;
 8000e62:	e10f      	b.n	8001084 <process_command+0x3b8>
  }

  // 2. Handle CHENILLARD ON/OFF commands
  else if (strncmp(command, CHENILLARD_ON_1, strlen(CHENILLARD_ON_1)) == 0) {
 8000e64:	4b4a      	ldr	r3, [pc, #296]	@ (8000f90 <process_command+0x2c4>)
 8000e66:	681c      	ldr	r4, [r3, #0]
 8000e68:	4b49      	ldr	r3, [pc, #292]	@ (8000f90 <process_command+0x2c4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff f9cb 	bl	8000208 <strlen>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	4621      	mov	r1, r4
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f009 fcd7 	bl	800a82c <strncmp>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d107      	bne.n	8000e94 <process_command+0x1c8>
    start_chenillard(1);
 8000e84:	2001      	movs	r0, #1
 8000e86:	f7ff fcfd 	bl	8000884 <start_chenillard>
    set_chenillard_speed(1, 1); // Démarrer à la vitesse de base
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f7ff fd3d 	bl	800090c <set_chenillard_speed>
    return;
 8000e92:	e0f7      	b.n	8001084 <process_command+0x3b8>
  } else if (strncmp(command, CHENILLARD_OFF_1, strlen(CHENILLARD_OFF_1)) == 0) {
 8000e94:	4b3f      	ldr	r3, [pc, #252]	@ (8000f94 <process_command+0x2c8>)
 8000e96:	681c      	ldr	r4, [r3, #0]
 8000e98:	4b3e      	ldr	r3, [pc, #248]	@ (8000f94 <process_command+0x2c8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff f9b3 	bl	8000208 <strlen>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4621      	mov	r1, r4
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f009 fcbf 	bl	800a82c <strncmp>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <process_command+0x1ee>
    stop_chenillard();
 8000eb4:	f7ff fca2 	bl	80007fc <stop_chenillard>
    return;
 8000eb8:	e0e4      	b.n	8001084 <process_command+0x3b8>
  } else if (strncmp(command, CHENILLARD_ON_2, strlen(CHENILLARD_ON_2)) == 0) {
 8000eba:	4b37      	ldr	r3, [pc, #220]	@ (8000f98 <process_command+0x2cc>)
 8000ebc:	681c      	ldr	r4, [r3, #0]
 8000ebe:	4b36      	ldr	r3, [pc, #216]	@ (8000f98 <process_command+0x2cc>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff f9a0 	bl	8000208 <strlen>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4621      	mov	r1, r4
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f009 fcac 	bl	800a82c <strncmp>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d107      	bne.n	8000eea <process_command+0x21e>
    start_chenillard(2);
 8000eda:	2002      	movs	r0, #2
 8000edc:	f7ff fcd2 	bl	8000884 <start_chenillard>
    set_chenillard_speed(2, 1); // Démarrer à la vitesse de base
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	f7ff fd12 	bl	800090c <set_chenillard_speed>
    return;
 8000ee8:	e0cc      	b.n	8001084 <process_command+0x3b8>
  } else if (strncmp(command, CHENILLARD_OFF_2, strlen(CHENILLARD_OFF_2)) == 0) {
 8000eea:	4b2c      	ldr	r3, [pc, #176]	@ (8000f9c <process_command+0x2d0>)
 8000eec:	681c      	ldr	r4, [r3, #0]
 8000eee:	4b2b      	ldr	r3, [pc, #172]	@ (8000f9c <process_command+0x2d0>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff f988 	bl	8000208 <strlen>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	461a      	mov	r2, r3
 8000efc:	4621      	mov	r1, r4
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f009 fc94 	bl	800a82c <strncmp>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d102      	bne.n	8000f10 <process_command+0x244>
    stop_chenillard();
 8000f0a:	f7ff fc77 	bl	80007fc <stop_chenillard>
    return;
 8000f0e:	e0b9      	b.n	8001084 <process_command+0x3b8>
  } else if (strncmp(command, CHENILLARD_ON_3, strlen(CHENILLARD_ON_3)) == 0) {
 8000f10:	4b23      	ldr	r3, [pc, #140]	@ (8000fa0 <process_command+0x2d4>)
 8000f12:	681c      	ldr	r4, [r3, #0]
 8000f14:	4b22      	ldr	r3, [pc, #136]	@ (8000fa0 <process_command+0x2d4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff f975 	bl	8000208 <strlen>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	461a      	mov	r2, r3
 8000f22:	4621      	mov	r1, r4
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f009 fc81 	bl	800a82c <strncmp>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d107      	bne.n	8000f40 <process_command+0x274>
    start_chenillard(3);
 8000f30:	2003      	movs	r0, #3
 8000f32:	f7ff fca7 	bl	8000884 <start_chenillard>
    set_chenillard_speed(3, 1); // Démarrer à la vitesse de base
 8000f36:	2101      	movs	r1, #1
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f7ff fce7 	bl	800090c <set_chenillard_speed>
    return;
 8000f3e:	e0a1      	b.n	8001084 <process_command+0x3b8>
  } else if (strncmp(command, CHENILLARD_OFF_3, strlen(CHENILLARD_OFF_3)) == 0) {
 8000f40:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <process_command+0x2d8>)
 8000f42:	681c      	ldr	r4, [r3, #0]
 8000f44:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <process_command+0x2d8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff f95d 	bl	8000208 <strlen>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	461a      	mov	r2, r3
 8000f52:	4621      	mov	r1, r4
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f009 fc69 	bl	800a82c <strncmp>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d123      	bne.n	8000fa8 <process_command+0x2dc>
    stop_chenillard();
 8000f60:	f7ff fc4c 	bl	80007fc <stop_chenillard>
    return;
 8000f64:	e08e      	b.n	8001084 <process_command+0x3b8>
 8000f66:	bf00      	nop
 8000f68:	20000238 	.word	0x20000238
 8000f6c:	40020400 	.word	0x40020400
 8000f70:	2000009c 	.word	0x2000009c
 8000f74:	2000050c 	.word	0x2000050c
 8000f78:	2000023c 	.word	0x2000023c
 8000f7c:	200000ac 	.word	0x200000ac
 8000f80:	20000240 	.word	0x20000240
 8000f84:	20000244 	.word	0x20000244
 8000f88:	20000248 	.word	0x20000248
 8000f8c:	2000024c 	.word	0x2000024c
 8000f90:	20000250 	.word	0x20000250
 8000f94:	20000254 	.word	0x20000254
 8000f98:	20000258 	.word	0x20000258
 8000f9c:	2000025c 	.word	0x2000025c
 8000fa0:	20000260 	.word	0x20000260
 8000fa4:	20000264 	.word	0x20000264
  }

  else if (strncmp(command, CHENILLARD_FREQ, strlen(CHENILLARD_FREQ)) == 0) {
 8000fa8:	4b38      	ldr	r3, [pc, #224]	@ (800108c <process_command+0x3c0>)
 8000faa:	681c      	ldr	r4, [r3, #0]
 8000fac:	4b37      	ldr	r3, [pc, #220]	@ (800108c <process_command+0x3c0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff f929 	bl	8000208 <strlen>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4621      	mov	r1, r4
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f009 fc35 	bl	800a82c <strncmp>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d151      	bne.n	800106c <process_command+0x3a0>
    if (strlen(command) > strlen(CHENILLARD_FREQ)) {
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff f91d 	bl	8000208 <strlen>
 8000fce:	4604      	mov	r4, r0
 8000fd0:	4b2e      	ldr	r3, [pc, #184]	@ (800108c <process_command+0x3c0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff f917 	bl	8000208 <strlen>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	429c      	cmp	r4, r3
 8000fde:	d938      	bls.n	8001052 <process_command+0x386>
      uint8_t freq_char = command[strlen(CHENILLARD_FREQ)];
 8000fe0:	4b2a      	ldr	r3, [pc, #168]	@ (800108c <process_command+0x3c0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff f90f 	bl	8000208 <strlen>
 8000fea:	4602      	mov	r2, r0
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4413      	add	r3, r2
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	73fb      	strb	r3, [r7, #15]
      uint8_t frequency = freq_char - '0'; // Convert char to integer
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	3b30      	subs	r3, #48	@ 0x30
 8000ff8:	73bb      	strb	r3, [r7, #14]

      if (frequency >= 1 && frequency <= 3) {
 8000ffa:	7bbb      	ldrb	r3, [r7, #14]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d01c      	beq.n	800103a <process_command+0x36e>
 8001000:	7bbb      	ldrb	r3, [r7, #14]
 8001002:	2b03      	cmp	r3, #3
 8001004:	d819      	bhi.n	800103a <process_command+0x36e>
        if (chenillard_running) {
 8001006:	4b22      	ldr	r3, [pc, #136]	@ (8001090 <process_command+0x3c4>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d008      	beq.n	8001022 <process_command+0x356>
          set_chenillard_speed(current_chenillard, frequency);
 8001010:	4b20      	ldr	r3, [pc, #128]	@ (8001094 <process_command+0x3c8>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	7bba      	ldrb	r2, [r7, #14]
 8001018:	4611      	mov	r1, r2
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fc76 	bl	800090c <set_chenillard_speed>
        if (chenillard_running) {
 8001020:	e023      	b.n	800106a <process_command+0x39e>
        } else {
          HAL_UART_Transmit(&huart3, msg_chenillard_running_err, strlen((char*)msg_chenillard_running_err), HAL_MAX_DELAY);
 8001022:	481d      	ldr	r0, [pc, #116]	@ (8001098 <process_command+0x3cc>)
 8001024:	f7ff f8f0 	bl	8000208 <strlen>
 8001028:	4603      	mov	r3, r0
 800102a:	b29a      	uxth	r2, r3
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
 8001030:	4919      	ldr	r1, [pc, #100]	@ (8001098 <process_command+0x3cc>)
 8001032:	481a      	ldr	r0, [pc, #104]	@ (800109c <process_command+0x3d0>)
 8001034:	f004 fa16 	bl	8005464 <HAL_UART_Transmit>
        if (chenillard_running) {
 8001038:	e017      	b.n	800106a <process_command+0x39e>
        }
      } else {
        HAL_UART_Transmit(&huart3, msg_freq_invalid, strlen((char*)msg_freq_invalid), HAL_MAX_DELAY);
 800103a:	4819      	ldr	r0, [pc, #100]	@ (80010a0 <process_command+0x3d4>)
 800103c:	f7ff f8e4 	bl	8000208 <strlen>
 8001040:	4603      	mov	r3, r0
 8001042:	b29a      	uxth	r2, r3
 8001044:	f04f 33ff 	mov.w	r3, #4294967295
 8001048:	4915      	ldr	r1, [pc, #84]	@ (80010a0 <process_command+0x3d4>)
 800104a:	4814      	ldr	r0, [pc, #80]	@ (800109c <process_command+0x3d0>)
 800104c:	f004 fa0a 	bl	8005464 <HAL_UART_Transmit>
      }
    } else {
      HAL_UART_Transmit(&huart3, msg_freq_syntax_err, strlen((char*)msg_freq_syntax_err), HAL_MAX_DELAY);
    }
    return;
 8001050:	e018      	b.n	8001084 <process_command+0x3b8>
      HAL_UART_Transmit(&huart3, msg_freq_syntax_err, strlen((char*)msg_freq_syntax_err), HAL_MAX_DELAY);
 8001052:	4814      	ldr	r0, [pc, #80]	@ (80010a4 <process_command+0x3d8>)
 8001054:	f7ff f8d8 	bl	8000208 <strlen>
 8001058:	4603      	mov	r3, r0
 800105a:	b29a      	uxth	r2, r3
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
 8001060:	4910      	ldr	r1, [pc, #64]	@ (80010a4 <process_command+0x3d8>)
 8001062:	480e      	ldr	r0, [pc, #56]	@ (800109c <process_command+0x3d0>)
 8001064:	f004 f9fe 	bl	8005464 <HAL_UART_Transmit>
    return;
 8001068:	e00c      	b.n	8001084 <process_command+0x3b8>
 800106a:	e00b      	b.n	8001084 <process_command+0x3b8>
  }

  // 4. Handle invalid commands
  else {
    HAL_UART_Transmit(&huart3, msg2, strlen((char*)msg2), HAL_MAX_DELAY);
 800106c:	480e      	ldr	r0, [pc, #56]	@ (80010a8 <process_command+0x3dc>)
 800106e:	f7ff f8cb 	bl	8000208 <strlen>
 8001072:	4603      	mov	r3, r0
 8001074:	b29a      	uxth	r2, r3
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	490b      	ldr	r1, [pc, #44]	@ (80010a8 <process_command+0x3dc>)
 800107c:	4807      	ldr	r0, [pc, #28]	@ (800109c <process_command+0x3d0>)
 800107e:	f004 f9f1 	bl	8005464 <HAL_UART_Transmit>
    return;
 8001082:	bf00      	nop
  }
}
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	bd90      	pop	{r4, r7, pc}
 800108a:	bf00      	nop
 800108c:	20000268 	.word	0x20000268
 8001090:	20000411 	.word	0x20000411
 8001094:	20000412 	.word	0x20000412
 8001098:	200000bc 	.word	0x200000bc
 800109c:	2000050c 	.word	0x2000050c
 80010a0:	200001b4 	.word	0x200001b4
 80010a4:	200001ec 	.word	0x200001ec
 80010a8:	2000004c 	.word	0x2000004c

080010ac <MPU_Config>:

/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80010b2:	463b      	mov	r3, r7
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80010be:	f000 fd4f 	bl	8001b60 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010c2:	2301      	movs	r3, #1
 80010c4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80010ce:	231f      	movs	r3, #31
 80010d0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80010d2:	2387      	movs	r3, #135	@ 0x87
 80010d4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80010da:	2300      	movs	r3, #0
 80010dc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80010de:	2301      	movs	r3, #1
 80010e0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80010e2:	2301      	movs	r3, #1
 80010e4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80010ee:	463b      	mov	r3, r7
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 fd6d 	bl	8001bd0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80010f6:	2004      	movs	r0, #4
 80010f8:	f000 fd4a 	bl	8001b90 <HAL_MPU_Enable>
}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001108:	b672      	cpsid	i
}
 800110a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <Error_Handler+0x8>

08001110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <HAL_MspInit+0x80>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	4a1d      	ldr	r2, [pc, #116]	@ (8001190 <HAL_MspInit+0x80>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001120:	6413      	str	r3, [r2, #64]	@ 0x40
 8001122:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <HAL_MspInit+0x80>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <HAL_MspInit+0x80>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001132:	4a17      	ldr	r2, [pc, #92]	@ (8001190 <HAL_MspInit+0x80>)
 8001134:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001138:	6453      	str	r3, [r2, #68]	@ 0x44
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <HAL_MspInit+0x80>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	2001      	movs	r0, #1
 800114c:	f000 fcd1 	bl	8001af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001150:	2001      	movs	r0, #1
 8001152:	f000 fcea 	bl	8001b2a <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	2004      	movs	r0, #4
 800115c:	f000 fcc9 	bl	8001af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001160:	2004      	movs	r0, #4
 8001162:	f000 fce2 	bl	8001b2a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	2005      	movs	r0, #5
 800116c:	f000 fcc1 	bl	8001af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001170:	2005      	movs	r0, #5
 8001172:	f000 fcda 	bl	8001b2a <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	2051      	movs	r0, #81	@ 0x51
 800117c:	f000 fcb9 	bl	8001af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8001180:	2051      	movs	r0, #81	@ 0x51
 8001182:	f000 fcd2 	bl	8001b2a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800

08001194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <NMI_Handler+0x4>

0800119c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <HardFault_Handler+0x4>

080011a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <MemManage_Handler+0x4>

080011ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <BusFault_Handler+0x4>

080011b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <UsageFault_Handler+0x4>

080011bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ea:	f000 fb63 	bl	80018b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80011f6:	f002 fb69 	bl	80038cc <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}

080011fe <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001202:	f000 fdb7 	bl	8001d74 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}

0800120a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800121c:	4802      	ldr	r0, [pc, #8]	@ (8001228 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800121e:	f003 fce8 	bl	8004bf2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000428 	.word	0x20000428

0800122c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001230:	4802      	ldr	r0, [pc, #8]	@ (800123c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001232:	f003 fcde 	bl	8004bf2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000428 	.word	0x20000428

08001240 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001244:	4802      	ldr	r0, [pc, #8]	@ (8001250 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001246:	f003 fcd4 	bl	8004bf2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000428 	.word	0x20000428

08001254 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001258:	4802      	ldr	r0, [pc, #8]	@ (8001264 <TIM1_CC_IRQHandler+0x10>)
 800125a:	f003 fcca 	bl	8004bf2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000428 	.word	0x20000428

08001268 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800126c:	4802      	ldr	r0, [pc, #8]	@ (8001278 <TIM2_IRQHandler+0x10>)
 800126e:	f003 fcc0 	bl	8004bf2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000474 	.word	0x20000474

0800127c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001280:	4802      	ldr	r0, [pc, #8]	@ (800128c <TIM3_IRQHandler+0x10>)
 8001282:	f003 fcb6 	bl	8004bf2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200004c0 	.word	0x200004c0

08001290 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001294:	4802      	ldr	r0, [pc, #8]	@ (80012a0 <USART3_IRQHandler+0x10>)
 8001296:	f004 fa37 	bl	8005708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	2000050c 	.word	0x2000050c

080012a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012a8:	4802      	ldr	r0, [pc, #8]	@ (80012b4 <OTG_FS_IRQHandler+0x10>)
 80012aa:	f001 f9be 	bl	800262a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20001a94 	.word	0x20001a94

080012b8 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d0:	4a14      	ldr	r2, [pc, #80]	@ (8001324 <_sbrk+0x5c>)
 80012d2:	4b15      	ldr	r3, [pc, #84]	@ (8001328 <_sbrk+0x60>)
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012dc:	4b13      	ldr	r3, [pc, #76]	@ (800132c <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e4:	4b11      	ldr	r3, [pc, #68]	@ (800132c <_sbrk+0x64>)
 80012e6:	4a12      	ldr	r2, [pc, #72]	@ (8001330 <_sbrk+0x68>)
 80012e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ea:	4b10      	ldr	r3, [pc, #64]	@ (800132c <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d207      	bcs.n	8001308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f8:	f009 faba 	bl	800a870 <__errno>
 80012fc:	4603      	mov	r3, r0
 80012fe:	220c      	movs	r2, #12
 8001300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	e009      	b.n	800131c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001308:	4b08      	ldr	r3, [pc, #32]	@ (800132c <_sbrk+0x64>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800130e:	4b07      	ldr	r3, [pc, #28]	@ (800132c <_sbrk+0x64>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	4a05      	ldr	r2, [pc, #20]	@ (800132c <_sbrk+0x64>)
 8001318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800131a:	68fb      	ldr	r3, [r7, #12]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20050000 	.word	0x20050000
 8001328:	00000400 	.word	0x00000400
 800132c:	20000424 	.word	0x20000424
 8001330:	200020c0 	.word	0x200020c0

08001334 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <SystemInit+0x20>)
 800133a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800133e:	4a05      	ldr	r2, [pc, #20]	@ (8001354 <SystemInit+0x20>)
 8001340:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001344:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
/* TIM1 init function */
void MX_TIM1_Init(void) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b08c      	sub	sp, #48	@ 0x30
 800135c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136c:	463b      	mov	r3, r7
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 8001376:	4b29      	ldr	r3, [pc, #164]	@ (800141c <MX_TIM1_Init+0xc4>)
 8001378:	4a29      	ldr	r2, [pc, #164]	@ (8001420 <MX_TIM1_Init+0xc8>)
 800137a:	601a      	str	r2, [r3, #0]
  uint32_t f_timer_source = 16000000; // 16 MHz
 800137c:	4b29      	ldr	r3, [pc, #164]	@ (8001424 <MX_TIM1_Init+0xcc>)
 800137e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t desired_period_ms = 1000;   // 1s (ancienne période de TIM2)
 8001380:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001384:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t prescaler_value = 7999;     // To get a 2kHz timer frequency
 8001386:	f641 733f 	movw	r3, #7999	@ 0x1f3f
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t timer_frequency = f_timer_source / (prescaler_value + 1); // 2000 Hz
 800138c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138e:	3301      	adds	r3, #1
 8001390:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	623b      	str	r3, [r7, #32]
  uint32_t period_value = (timer_frequency * desired_period_ms) / 1000 - 1;
 8001398:	6a3b      	ldr	r3, [r7, #32]
 800139a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800139c:	fb02 f303 	mul.w	r3, r2, r3
 80013a0:	4a21      	ldr	r2, [pc, #132]	@ (8001428 <MX_TIM1_Init+0xd0>)
 80013a2:	fba2 2303 	umull	r2, r3, r2, r3
 80013a6:	099b      	lsrs	r3, r3, #6
 80013a8:	3b01      	subs	r3, #1
 80013aa:	61fb      	str	r3, [r7, #28]

  htim1.Init.Prescaler = prescaler_value;
 80013ac:	4a1b      	ldr	r2, [pc, #108]	@ (800141c <MX_TIM1_Init+0xc4>)
 80013ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b0:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <MX_TIM1_Init+0xc4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = period_value;
 80013b8:	4a18      	ldr	r2, [pc, #96]	@ (800141c <MX_TIM1_Init+0xc4>)
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013be:	4b17      	ldr	r3, [pc, #92]	@ (800141c <MX_TIM1_Init+0xc4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c4:	4b15      	ldr	r3, [pc, #84]	@ (800141c <MX_TIM1_Init+0xc4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80013ca:	4814      	ldr	r0, [pc, #80]	@ (800141c <MX_TIM1_Init+0xc4>)
 80013cc:	f003 fb12 	bl	80049f4 <HAL_TIM_Base_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM1_Init+0x82>
    Error_Handler();
 80013d6:	f7ff fe95 	bl	8001104 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	4619      	mov	r1, r3
 80013e6:	480d      	ldr	r0, [pc, #52]	@ (800141c <MX_TIM1_Init+0xc4>)
 80013e8:	f003 fd0a 	bl	8004e00 <HAL_TIM_ConfigClockSource>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM1_Init+0x9e>
    Error_Handler();
 80013f2:	f7ff fe87 	bl	8001104 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 80013fe:	463b      	mov	r3, r7
 8001400:	4619      	mov	r1, r3
 8001402:	4806      	ldr	r0, [pc, #24]	@ (800141c <MX_TIM1_Init+0xc4>)
 8001404:	f003 ff34 	bl	8005270 <HAL_TIMEx_MasterConfigSynchronization>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM1_Init+0xba>
    Error_Handler();
 800140e:	f7ff fe79 	bl	8001104 <Error_Handler>
  }
}
 8001412:	bf00      	nop
 8001414:	3730      	adds	r7, #48	@ 0x30
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000428 	.word	0x20000428
 8001420:	40010000 	.word	0x40010000
 8001424:	00f42400 	.word	0x00f42400
 8001428:	10624dd3 	.word	0x10624dd3

0800142c <MX_TIM2_Init>:

/* TIM2 init function */
void MX_TIM2_Init(void) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b08c      	sub	sp, #48	@ 0x30
 8001430:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001440:	463b      	mov	r3, r7
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800144a:	4b29      	ldr	r3, [pc, #164]	@ (80014f0 <MX_TIM2_Init+0xc4>)
 800144c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001450:	601a      	str	r2, [r3, #0]
  uint32_t f_timer_source = 16000000; // 16 MHz
 8001452:	4b28      	ldr	r3, [pc, #160]	@ (80014f4 <MX_TIM2_Init+0xc8>)
 8001454:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t desired_period_ms = 500;   // 0.5s (ancienne période de TIM1)
 8001456:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800145a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t prescaler_value = 7999;     // To get a 2kHz timer frequency
 800145c:	f641 733f 	movw	r3, #7999	@ 0x1f3f
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t timer_frequency = f_timer_source / (prescaler_value + 1); // 2000 Hz
 8001462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001464:	3301      	adds	r3, #1
 8001466:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001468:	fbb2 f3f3 	udiv	r3, r2, r3
 800146c:	623b      	str	r3, [r7, #32]
  uint32_t period_value = (timer_frequency * desired_period_ms) / 1000 - 1;
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001472:	fb02 f303 	mul.w	r3, r2, r3
 8001476:	4a20      	ldr	r2, [pc, #128]	@ (80014f8 <MX_TIM2_Init+0xcc>)
 8001478:	fba2 2303 	umull	r2, r3, r2, r3
 800147c:	099b      	lsrs	r3, r3, #6
 800147e:	3b01      	subs	r3, #1
 8001480:	61fb      	str	r3, [r7, #28]

  htim2.Init.Prescaler = prescaler_value;
 8001482:	4a1b      	ldr	r2, [pc, #108]	@ (80014f0 <MX_TIM2_Init+0xc4>)
 8001484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001486:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001488:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <MX_TIM2_Init+0xc4>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = period_value;
 800148e:	4a18      	ldr	r2, [pc, #96]	@ (80014f0 <MX_TIM2_Init+0xc4>)
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001494:	4b16      	ldr	r3, [pc, #88]	@ (80014f0 <MX_TIM2_Init+0xc4>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149a:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <MX_TIM2_Init+0xc4>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80014a0:	4813      	ldr	r0, [pc, #76]	@ (80014f0 <MX_TIM2_Init+0xc4>)
 80014a2:	f003 faa7 	bl	80049f4 <HAL_TIM_Base_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM2_Init+0x84>
    Error_Handler();
 80014ac:	f7ff fe2a 	bl	8001104 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	4619      	mov	r1, r3
 80014bc:	480c      	ldr	r0, [pc, #48]	@ (80014f0 <MX_TIM2_Init+0xc4>)
 80014be:	f003 fc9f 	bl	8004e00 <HAL_TIM_ConfigClockSource>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM2_Init+0xa0>
    Error_Handler();
 80014c8:	f7ff fe1c 	bl	8001104 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014cc:	2300      	movs	r3, #0
 80014ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 80014d4:	463b      	mov	r3, r7
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	@ (80014f0 <MX_TIM2_Init+0xc4>)
 80014da:	f003 fec9 	bl	8005270 <HAL_TIMEx_MasterConfigSynchronization>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM2_Init+0xbc>
    Error_Handler();
 80014e4:	f7ff fe0e 	bl	8001104 <Error_Handler>
  }
}
 80014e8:	bf00      	nop
 80014ea:	3730      	adds	r7, #48	@ 0x30
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000474 	.word	0x20000474
 80014f4:	00f42400 	.word	0x00f42400
 80014f8:	10624dd3 	.word	0x10624dd3

080014fc <MX_TIM3_Init>:

/* TIM3 init function */
void MX_TIM3_Init(void) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08c      	sub	sp, #48	@ 0x30
 8001500:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001510:	463b      	mov	r3, r7
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 800151a:	4b29      	ldr	r3, [pc, #164]	@ (80015c0 <MX_TIM3_Init+0xc4>)
 800151c:	4a29      	ldr	r2, [pc, #164]	@ (80015c4 <MX_TIM3_Init+0xc8>)
 800151e:	601a      	str	r2, [r3, #0]
  uint32_t f_timer_source = 16000000; // 16 MHz
 8001520:	4b29      	ldr	r3, [pc, #164]	@ (80015c8 <MX_TIM3_Init+0xcc>)
 8001522:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t desired_period_ms = 3000;  // 3s (inchangé)
 8001524:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001528:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t prescaler_value = 7999;     // To get a 2kHz timer frequency
 800152a:	f641 733f 	movw	r3, #7999	@ 0x1f3f
 800152e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t timer_frequency = f_timer_source / (prescaler_value + 1); // 2000 Hz
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	3301      	adds	r3, #1
 8001534:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001536:	fbb2 f3f3 	udiv	r3, r2, r3
 800153a:	623b      	str	r3, [r7, #32]
  uint32_t period_value = (timer_frequency * desired_period_ms) / 1000 - 1;
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001540:	fb02 f303 	mul.w	r3, r2, r3
 8001544:	4a21      	ldr	r2, [pc, #132]	@ (80015cc <MX_TIM3_Init+0xd0>)
 8001546:	fba2 2303 	umull	r2, r3, r2, r3
 800154a:	099b      	lsrs	r3, r3, #6
 800154c:	3b01      	subs	r3, #1
 800154e:	61fb      	str	r3, [r7, #28]

  htim3.Init.Prescaler = prescaler_value;
 8001550:	4a1b      	ldr	r2, [pc, #108]	@ (80015c0 <MX_TIM3_Init+0xc4>)
 8001552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001554:	6053      	str	r3, [r2, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001556:	4b1a      	ldr	r3, [pc, #104]	@ (80015c0 <MX_TIM3_Init+0xc4>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = period_value;
 800155c:	4a18      	ldr	r2, [pc, #96]	@ (80015c0 <MX_TIM3_Init+0xc4>)
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	60d3      	str	r3, [r2, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001562:	4b17      	ldr	r3, [pc, #92]	@ (80015c0 <MX_TIM3_Init+0xc4>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001568:	4b15      	ldr	r3, [pc, #84]	@ (80015c0 <MX_TIM3_Init+0xc4>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800156e:	4814      	ldr	r0, [pc, #80]	@ (80015c0 <MX_TIM3_Init+0xc4>)
 8001570:	f003 fa40 	bl	80049f4 <HAL_TIM_Base_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM3_Init+0x82>
    Error_Handler();
 800157a:	f7ff fdc3 	bl	8001104 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001582:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	4619      	mov	r1, r3
 800158a:	480d      	ldr	r0, [pc, #52]	@ (80015c0 <MX_TIM3_Init+0xc4>)
 800158c:	f003 fc38 	bl	8004e00 <HAL_TIM_ConfigClockSource>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM3_Init+0x9e>
    Error_Handler();
 8001596:	f7ff fdb5 	bl	8001104 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 80015a2:	463b      	mov	r3, r7
 80015a4:	4619      	mov	r1, r3
 80015a6:	4806      	ldr	r0, [pc, #24]	@ (80015c0 <MX_TIM3_Init+0xc4>)
 80015a8:	f003 fe62 	bl	8005270 <HAL_TIMEx_MasterConfigSynchronization>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM3_Init+0xba>
    Error_Handler();
 80015b2:	f7ff fda7 	bl	8001104 <Error_Handler>
  }
}
 80015b6:	bf00      	nop
 80015b8:	3730      	adds	r7, #48	@ 0x30
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200004c0 	.word	0x200004c0
 80015c4:	40000400 	.word	0x40000400
 80015c8:	00f42400 	.word	0x00f42400
 80015cc:	10624dd3 	.word	0x10624dd3

080015d0 <HAL_TIM_Base_MspInit>:

  /* USER CODE END TIM3_Init 2 */


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a33      	ldr	r2, [pc, #204]	@ (80016ac <HAL_TIM_Base_MspInit+0xdc>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d12c      	bne.n	800163c <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015e2:	4b33      	ldr	r3, [pc, #204]	@ (80016b0 <HAL_TIM_Base_MspInit+0xe0>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e6:	4a32      	ldr	r2, [pc, #200]	@ (80016b0 <HAL_TIM_Base_MspInit+0xe0>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ee:	4b30      	ldr	r3, [pc, #192]	@ (80016b0 <HAL_TIM_Base_MspInit+0xe0>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	2018      	movs	r0, #24
 8001600:	f000 fa77 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001604:	2018      	movs	r0, #24
 8001606:	f000 fa90 	bl	8001b2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	2019      	movs	r0, #25
 8001610:	f000 fa6f 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001614:	2019      	movs	r0, #25
 8001616:	f000 fa88 	bl	8001b2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	201a      	movs	r0, #26
 8001620:	f000 fa67 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001624:	201a      	movs	r0, #26
 8001626:	f000 fa80 	bl	8001b2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	201b      	movs	r0, #27
 8001630:	f000 fa5f 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001634:	201b      	movs	r0, #27
 8001636:	f000 fa78 	bl	8001b2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800163a:	e032      	b.n	80016a2 <HAL_TIM_Base_MspInit+0xd2>
  else if(tim_baseHandle->Instance==TIM2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001644:	d114      	bne.n	8001670 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001646:	4b1a      	ldr	r3, [pc, #104]	@ (80016b0 <HAL_TIM_Base_MspInit+0xe0>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	4a19      	ldr	r2, [pc, #100]	@ (80016b0 <HAL_TIM_Base_MspInit+0xe0>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6413      	str	r3, [r2, #64]	@ 0x40
 8001652:	4b17      	ldr	r3, [pc, #92]	@ (80016b0 <HAL_TIM_Base_MspInit+0xe0>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2100      	movs	r1, #0
 8001662:	201c      	movs	r0, #28
 8001664:	f000 fa45 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001668:	201c      	movs	r0, #28
 800166a:	f000 fa5e 	bl	8001b2a <HAL_NVIC_EnableIRQ>
}
 800166e:	e018      	b.n	80016a2 <HAL_TIM_Base_MspInit+0xd2>
  else if(tim_baseHandle->Instance==TIM3)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0f      	ldr	r2, [pc, #60]	@ (80016b4 <HAL_TIM_Base_MspInit+0xe4>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d113      	bne.n	80016a2 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800167a:	4b0d      	ldr	r3, [pc, #52]	@ (80016b0 <HAL_TIM_Base_MspInit+0xe0>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	4a0c      	ldr	r2, [pc, #48]	@ (80016b0 <HAL_TIM_Base_MspInit+0xe0>)
 8001680:	f043 0302 	orr.w	r3, r3, #2
 8001684:	6413      	str	r3, [r2, #64]	@ 0x40
 8001686:	4b0a      	ldr	r3, [pc, #40]	@ (80016b0 <HAL_TIM_Base_MspInit+0xe0>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	2100      	movs	r1, #0
 8001696:	201d      	movs	r0, #29
 8001698:	f000 fa2b 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800169c:	201d      	movs	r0, #29
 800169e:	f000 fa44 	bl	8001b2a <HAL_NVIC_EnableIRQ>
}
 80016a2:	bf00      	nop
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40010000 	.word	0x40010000
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40000400 	.word	0x40000400

080016b8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016bc:	4b14      	ldr	r3, [pc, #80]	@ (8001710 <MX_USART3_UART_Init+0x58>)
 80016be:	4a15      	ldr	r2, [pc, #84]	@ (8001714 <MX_USART3_UART_Init+0x5c>)
 80016c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016c2:	4b13      	ldr	r3, [pc, #76]	@ (8001710 <MX_USART3_UART_Init+0x58>)
 80016c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016ca:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <MX_USART3_UART_Init+0x58>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <MX_USART3_UART_Init+0x58>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001710 <MX_USART3_UART_Init+0x58>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <MX_USART3_UART_Init+0x58>)
 80016de:	220c      	movs	r2, #12
 80016e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001710 <MX_USART3_UART_Init+0x58>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e8:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <MX_USART3_UART_Init+0x58>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <MX_USART3_UART_Init+0x58>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f4:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <MX_USART3_UART_Init+0x58>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	@ (8001710 <MX_USART3_UART_Init+0x58>)
 80016fc:	f003 fe64 	bl	80053c8 <HAL_UART_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001706:	f7ff fcfd 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2000050c 	.word	0x2000050c
 8001714:	40004800 	.word	0x40004800

08001718 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b0aa      	sub	sp, #168	@ 0xa8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	2284      	movs	r2, #132	@ 0x84
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f009 f86f 	bl	800a81c <memset>
  if(uartHandle->Instance==USART3)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a26      	ldr	r2, [pc, #152]	@ (80017dc <HAL_UART_MspInit+0xc4>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d144      	bne.n	80017d2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001748:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800174c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800174e:	2300      	movs	r3, #0
 8001750:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001752:	f107 0310 	add.w	r3, r7, #16
 8001756:	4618      	mov	r0, r3
 8001758:	f002 fd5c 	bl	8004214 <HAL_RCCEx_PeriphCLKConfig>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001762:	f7ff fccf 	bl	8001104 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001766:	4b1e      	ldr	r3, [pc, #120]	@ (80017e0 <HAL_UART_MspInit+0xc8>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	4a1d      	ldr	r2, [pc, #116]	@ (80017e0 <HAL_UART_MspInit+0xc8>)
 800176c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001770:	6413      	str	r3, [r2, #64]	@ 0x40
 8001772:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <HAL_UART_MspInit+0xc8>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800177e:	4b18      	ldr	r3, [pc, #96]	@ (80017e0 <HAL_UART_MspInit+0xc8>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a17      	ldr	r2, [pc, #92]	@ (80017e0 <HAL_UART_MspInit+0xc8>)
 8001784:	f043 0308 	orr.w	r3, r3, #8
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <HAL_UART_MspInit+0xc8>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001796:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800179a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017aa:	2303      	movs	r3, #3
 80017ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017b0:	2307      	movs	r3, #7
 80017b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80017ba:	4619      	mov	r1, r3
 80017bc:	4809      	ldr	r0, [pc, #36]	@ (80017e4 <HAL_UART_MspInit+0xcc>)
 80017be:	f000 fc37 	bl	8002030 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	2027      	movs	r0, #39	@ 0x27
 80017c8:	f000 f993 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017cc:	2027      	movs	r0, #39	@ 0x27
 80017ce:	f000 f9ac 	bl	8001b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80017d2:	bf00      	nop
 80017d4:	37a8      	adds	r7, #168	@ 0xa8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40004800 	.word	0x40004800
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020c00 	.word	0x40020c00

080017e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001820 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ec:	f7ff fda2 	bl	8001334 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f0:	480c      	ldr	r0, [pc, #48]	@ (8001824 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017f2:	490d      	ldr	r1, [pc, #52]	@ (8001828 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017f4:	4a0d      	ldr	r2, [pc, #52]	@ (800182c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f8:	e002      	b.n	8001800 <LoopCopyDataInit>

080017fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fe:	3304      	adds	r3, #4

08001800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001804:	d3f9      	bcc.n	80017fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001806:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001808:	4c0a      	ldr	r4, [pc, #40]	@ (8001834 <LoopFillZerobss+0x22>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800180c:	e001      	b.n	8001812 <LoopFillZerobss>

0800180e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001810:	3204      	adds	r2, #4

08001812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001814:	d3fb      	bcc.n	800180e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001816:	f009 f831 	bl	800a87c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800181a:	f7fe fedf 	bl	80005dc <main>
  bx  lr    
 800181e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001820:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	200003cc 	.word	0x200003cc
  ldr r2, =_sidata
 800182c:	0800aaac 	.word	0x0800aaac
  ldr r2, =_sbss
 8001830:	200003cc 	.word	0x200003cc
  ldr r4, =_ebss
 8001834:	200020bc 	.word	0x200020bc

08001838 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC_IRQHandler>

0800183a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183e:	2003      	movs	r0, #3
 8001840:	f000 f94c 	bl	8001adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001844:	200f      	movs	r0, #15
 8001846:	f000 f805 	bl	8001854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800184a:	f7ff fc61 	bl	8001110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800185c:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <HAL_InitTick+0x54>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <HAL_InitTick+0x58>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800186a:	fbb3 f3f1 	udiv	r3, r3, r1
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f967 	bl	8001b46 <HAL_SYSTICK_Config>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e00e      	b.n	80018a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b0f      	cmp	r3, #15
 8001886:	d80a      	bhi.n	800189e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001888:	2200      	movs	r2, #0
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	f04f 30ff 	mov.w	r0, #4294967295
 8001890:	f000 f92f 	bl	8001af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001894:	4a06      	ldr	r2, [pc, #24]	@ (80018b0 <HAL_InitTick+0x5c>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	e000      	b.n	80018a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000270 	.word	0x20000270
 80018ac:	20000278 	.word	0x20000278
 80018b0:	20000274 	.word	0x20000274

080018b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b8:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_IncTick+0x20>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <HAL_IncTick+0x24>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	4a04      	ldr	r2, [pc, #16]	@ (80018d8 <HAL_IncTick+0x24>)
 80018c6:	6013      	str	r3, [r2, #0]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000278 	.word	0x20000278
 80018d8:	20000594 	.word	0x20000594

080018dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return uwTick;
 80018e0:	4b03      	ldr	r3, [pc, #12]	@ (80018f0 <HAL_GetTick+0x14>)
 80018e2:	681b      	ldr	r3, [r3, #0]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000594 	.word	0x20000594

080018f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018fc:	f7ff ffee 	bl	80018dc <HAL_GetTick>
 8001900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190c:	d005      	beq.n	800191a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800190e:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <HAL_Delay+0x44>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800191a:	bf00      	nop
 800191c:	f7ff ffde 	bl	80018dc <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	429a      	cmp	r2, r3
 800192a:	d8f7      	bhi.n	800191c <HAL_Delay+0x28>
  {
  }
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000278 	.word	0x20000278

0800193c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800194c:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <__NVIC_SetPriorityGrouping+0x40>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001958:	4013      	ands	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001964:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 8001966:	4313      	orrs	r3, r2
 8001968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196a:	4a04      	ldr	r2, [pc, #16]	@ (800197c <__NVIC_SetPriorityGrouping+0x40>)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	60d3      	str	r3, [r2, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00
 8001980:	05fa0000 	.word	0x05fa0000

08001984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001988:	4b04      	ldr	r3, [pc, #16]	@ (800199c <__NVIC_GetPriorityGrouping+0x18>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	f003 0307 	and.w	r3, r3, #7
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	db0b      	blt.n	80019ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	f003 021f 	and.w	r2, r3, #31
 80019b8:	4907      	ldr	r1, [pc, #28]	@ (80019d8 <__NVIC_EnableIRQ+0x38>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	095b      	lsrs	r3, r3, #5
 80019c0:	2001      	movs	r0, #1
 80019c2:	fa00 f202 	lsl.w	r2, r0, r2
 80019c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000e100 	.word	0xe000e100

080019dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	db0a      	blt.n	8001a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	490c      	ldr	r1, [pc, #48]	@ (8001a28 <__NVIC_SetPriority+0x4c>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	0112      	lsls	r2, r2, #4
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	440b      	add	r3, r1
 8001a00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a04:	e00a      	b.n	8001a1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4908      	ldr	r1, [pc, #32]	@ (8001a2c <__NVIC_SetPriority+0x50>)
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	3b04      	subs	r3, #4
 8001a14:	0112      	lsls	r2, r2, #4
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	440b      	add	r3, r1
 8001a1a:	761a      	strb	r2, [r3, #24]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000e100 	.word	0xe000e100
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	@ 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f1c3 0307 	rsb	r3, r3, #7
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	bf28      	it	cs
 8001a4e:	2304      	movcs	r3, #4
 8001a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3304      	adds	r3, #4
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	d902      	bls.n	8001a60 <NVIC_EncodePriority+0x30>
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3b03      	subs	r3, #3
 8001a5e:	e000      	b.n	8001a62 <NVIC_EncodePriority+0x32>
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	401a      	ands	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	43d9      	mvns	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	4313      	orrs	r3, r2
         );
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3724      	adds	r7, #36	@ 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aa8:	d301      	bcc.n	8001aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00f      	b.n	8001ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad8 <SysTick_Config+0x40>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f7ff ff8e 	bl	80019dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac0:	4b05      	ldr	r3, [pc, #20]	@ (8001ad8 <SysTick_Config+0x40>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac6:	4b04      	ldr	r3, [pc, #16]	@ (8001ad8 <SysTick_Config+0x40>)
 8001ac8:	2207      	movs	r2, #7
 8001aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	e000e010 	.word	0xe000e010

08001adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff29 	bl	800193c <__NVIC_SetPriorityGrouping>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b04:	f7ff ff3e 	bl	8001984 <__NVIC_GetPriorityGrouping>
 8001b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	6978      	ldr	r0, [r7, #20]
 8001b10:	f7ff ff8e 	bl	8001a30 <NVIC_EncodePriority>
 8001b14:	4602      	mov	r2, r0
 8001b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff5d 	bl	80019dc <__NVIC_SetPriority>
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff31 	bl	80019a0 <__NVIC_EnableIRQ>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ffa2 	bl	8001a98 <SysTick_Config>
 8001b54:	4603      	mov	r3, r0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b64:	f3bf 8f5f 	dmb	sy
}
 8001b68:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001b6a:	4b07      	ldr	r3, [pc, #28]	@ (8001b88 <HAL_MPU_Disable+0x28>)
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6e:	4a06      	ldr	r2, [pc, #24]	@ (8001b88 <HAL_MPU_Disable+0x28>)
 8001b70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b74:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001b76:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <HAL_MPU_Disable+0x2c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	605a      	str	r2, [r3, #4]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00
 8001b8c:	e000ed90 	.word	0xe000ed90

08001b90 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001b98:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc8 <HAL_MPU_Enable+0x38>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bcc <HAL_MPU_Enable+0x3c>)
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba6:	4a09      	ldr	r2, [pc, #36]	@ (8001bcc <HAL_MPU_Enable+0x3c>)
 8001ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bac:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001bae:	f3bf 8f4f 	dsb	sy
}
 8001bb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bb4:	f3bf 8f6f 	isb	sy
}
 8001bb8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed90 	.word	0xe000ed90
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	785a      	ldrb	r2, [r3, #1]
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c4c <HAL_MPU_ConfigRegion+0x7c>)
 8001bde:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001be0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c4c <HAL_MPU_ConfigRegion+0x7c>)
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	4a19      	ldr	r2, [pc, #100]	@ (8001c4c <HAL_MPU_ConfigRegion+0x7c>)
 8001be6:	f023 0301 	bic.w	r3, r3, #1
 8001bea:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001bec:	4a17      	ldr	r2, [pc, #92]	@ (8001c4c <HAL_MPU_ConfigRegion+0x7c>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	7b1b      	ldrb	r3, [r3, #12]
 8001bf8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	7adb      	ldrb	r3, [r3, #11]
 8001bfe:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	7a9b      	ldrb	r3, [r3, #10]
 8001c06:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	7b5b      	ldrb	r3, [r3, #13]
 8001c0e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	7b9b      	ldrb	r3, [r3, #14]
 8001c16:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	7bdb      	ldrb	r3, [r3, #15]
 8001c1e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	7a5b      	ldrb	r3, [r3, #9]
 8001c26:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	7a1b      	ldrb	r3, [r3, #8]
 8001c2e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c30:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	7812      	ldrb	r2, [r2, #0]
 8001c36:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c38:	4a04      	ldr	r2, [pc, #16]	@ (8001c4c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c3a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c3c:	6113      	str	r3, [r2, #16]
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000ed90 	.word	0xe000ed90

08001c50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c5e:	f7ff fe3d 	bl	80018dc <HAL_GetTick>
 8001c62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d008      	beq.n	8001c82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2280      	movs	r2, #128	@ 0x80
 8001c74:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e052      	b.n	8001d28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0216 	bic.w	r2, r2, #22
 8001c90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695a      	ldr	r2, [r3, #20]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ca0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d103      	bne.n	8001cb2 <HAL_DMA_Abort+0x62>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d007      	beq.n	8001cc2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0208 	bic.w	r2, r2, #8
 8001cc0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0201 	bic.w	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd2:	e013      	b.n	8001cfc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cd4:	f7ff fe02 	bl	80018dc <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b05      	cmp	r3, #5
 8001ce0:	d90c      	bls.n	8001cfc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2203      	movs	r2, #3
 8001cec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e015      	b.n	8001d28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1e4      	bne.n	8001cd4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d0e:	223f      	movs	r2, #63	@ 0x3f
 8001d10:	409a      	lsls	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d004      	beq.n	8001d4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2280      	movs	r2, #128	@ 0x80
 8001d48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e00c      	b.n	8001d68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2205      	movs	r2, #5
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0201 	bic.w	r2, r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
  uint32_t temp = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
  
  /* If the program operation is completed, disable the PG Bit */
  FLASH->CR &= (~FLASH_CR_PG);
 8001d7e:	4b55      	ldr	r3, [pc, #340]	@ (8001ed4 <HAL_FLASH_IRQHandler+0x160>)
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	4a54      	ldr	r2, [pc, #336]	@ (8001ed4 <HAL_FLASH_IRQHandler+0x160>)
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	6113      	str	r3, [r2, #16]

  /* If the erase operation is completed, disable the SER Bit */
  FLASH->CR &= (~FLASH_CR_SER);
 8001d8a:	4b52      	ldr	r3, [pc, #328]	@ (8001ed4 <HAL_FLASH_IRQHandler+0x160>)
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	4a51      	ldr	r2, [pc, #324]	@ (8001ed4 <HAL_FLASH_IRQHandler+0x160>)
 8001d90:	f023 0302 	bic.w	r3, r3, #2
 8001d94:	6113      	str	r3, [r2, #16]
  FLASH->CR &= SECTOR_MASK; 
 8001d96:	4b4f      	ldr	r3, [pc, #316]	@ (8001ed4 <HAL_FLASH_IRQHandler+0x160>)
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	4a4e      	ldr	r2, [pc, #312]	@ (8001ed4 <HAL_FLASH_IRQHandler+0x160>)
 8001d9c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001da0:	6113      	str	r3, [r2, #16]

  /* if the erase operation is completed, disable the MER Bit */
  FLASH->CR &= (~FLASH_MER_BIT);
 8001da2:	4b4c      	ldr	r3, [pc, #304]	@ (8001ed4 <HAL_FLASH_IRQHandler+0x160>)
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	4a4b      	ldr	r2, [pc, #300]	@ (8001ed4 <HAL_FLASH_IRQHandler+0x160>)
 8001da8:	f023 0304 	bic.w	r3, r3, #4
 8001dac:	6113      	str	r3, [r2, #16]

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001dae:	4b49      	ldr	r3, [pc, #292]	@ (8001ed4 <HAL_FLASH_IRQHandler+0x160>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d049      	beq.n	8001e4e <HAL_FLASH_IRQHandler+0xda>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001dba:	4b46      	ldr	r3, [pc, #280]	@ (8001ed4 <HAL_FLASH_IRQHandler+0x160>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	60da      	str	r2, [r3, #12]
    
    switch (pFlash.ProcedureOnGoing)
 8001dc0:	4b45      	ldr	r3, [pc, #276]	@ (8001ed8 <HAL_FLASH_IRQHandler+0x164>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d037      	beq.n	8001e3a <HAL_FLASH_IRQHandler+0xc6>
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	dc3e      	bgt.n	8001e4c <HAL_FLASH_IRQHandler+0xd8>
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d002      	beq.n	8001dd8 <HAL_FLASH_IRQHandler+0x64>
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d02a      	beq.n	8001e2c <HAL_FLASH_IRQHandler+0xb8>
        /* Programming procedure is completed */
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
        break;
      }
      default :
        break;
 8001dd6:	e039      	b.n	8001e4c <HAL_FLASH_IRQHandler+0xd8>
        pFlash.NbSectorsToErase--;
 8001dd8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ed8 <HAL_FLASH_IRQHandler+0x164>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	4a3e      	ldr	r2, [pc, #248]	@ (8001ed8 <HAL_FLASH_IRQHandler+0x164>)
 8001de0:	6053      	str	r3, [r2, #4]
        if(pFlash.NbSectorsToErase != 0)
 8001de2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed8 <HAL_FLASH_IRQHandler+0x164>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d013      	beq.n	8001e12 <HAL_FLASH_IRQHandler+0x9e>
          temp = pFlash.Sector;
 8001dea:	4b3b      	ldr	r3, [pc, #236]	@ (8001ed8 <HAL_FLASH_IRQHandler+0x164>)
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	607b      	str	r3, [r7, #4]
          HAL_FLASH_EndOfOperationCallback(temp);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f873 	bl	8001edc <HAL_FLASH_EndOfOperationCallback>
          temp = ++pFlash.Sector;
 8001df6:	4b38      	ldr	r3, [pc, #224]	@ (8001ed8 <HAL_FLASH_IRQHandler+0x164>)
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	4a36      	ldr	r2, [pc, #216]	@ (8001ed8 <HAL_FLASH_IRQHandler+0x164>)
 8001dfe:	60d3      	str	r3, [r2, #12]
 8001e00:	607b      	str	r3, [r7, #4]
          FLASH_Erase_Sector(temp, pFlash.VoltageForErase);
 8001e02:	4b35      	ldr	r3, [pc, #212]	@ (8001ed8 <HAL_FLASH_IRQHandler+0x164>)
 8001e04:	7a1b      	ldrb	r3, [r3, #8]
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	4619      	mov	r1, r3
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f8c4 	bl	8001f98 <FLASH_Erase_Sector>
        break;
 8001e10:	e01d      	b.n	8001e4e <HAL_FLASH_IRQHandler+0xda>
          pFlash.Sector = temp = 0xFFFFFFFFU;
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	4a2f      	ldr	r2, [pc, #188]	@ (8001ed8 <HAL_FLASH_IRQHandler+0x164>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	60d3      	str	r3, [r2, #12]
          HAL_FLASH_EndOfOperationCallback(temp);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f85c 	bl	8001edc <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001e24:	4b2c      	ldr	r3, [pc, #176]	@ (8001ed8 <HAL_FLASH_IRQHandler+0x164>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
        break;
 8001e2a:	e010      	b.n	8001e4e <HAL_FLASH_IRQHandler+0xda>
        HAL_FLASH_EndOfOperationCallback(0);
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f000 f855 	bl	8001edc <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001e32:	4b29      	ldr	r3, [pc, #164]	@ (8001ed8 <HAL_FLASH_IRQHandler+0x164>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
        break;
 8001e38:	e009      	b.n	8001e4e <HAL_FLASH_IRQHandler+0xda>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8001e3a:	4b27      	ldr	r3, [pc, #156]	@ (8001ed8 <HAL_FLASH_IRQHandler+0x164>)
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 f84c 	bl	8001edc <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001e44:	4b24      	ldr	r3, [pc, #144]	@ (8001ed8 <HAL_FLASH_IRQHandler+0x164>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
        break;
 8001e4a:	e000      	b.n	8001e4e <HAL_FLASH_IRQHandler+0xda>
        break;
 8001e4c:	bf00      	nop
    }
  }
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8001e4e:	4b21      	ldr	r3, [pc, #132]	@ (8001ed4 <HAL_FLASH_IRQHandler+0x160>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d023      	beq.n	8001ea2 <HAL_FLASH_IRQHandler+0x12e>
  {
    switch (pFlash.ProcedureOnGoing)
 8001e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed8 <HAL_FLASH_IRQHandler+0x164>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d011      	beq.n	8001e88 <HAL_FLASH_IRQHandler+0x114>
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	dc13      	bgt.n	8001e90 <HAL_FLASH_IRQHandler+0x11c>
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d002      	beq.n	8001e72 <HAL_FLASH_IRQHandler+0xfe>
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d008      	beq.n	8001e82 <HAL_FLASH_IRQHandler+0x10e>
        /*return the faulty address*/
        temp = pFlash.Address;
        break;
      }
    default :
      break;
 8001e70:	e00e      	b.n	8001e90 <HAL_FLASH_IRQHandler+0x11c>
        temp = pFlash.Sector;
 8001e72:	4b19      	ldr	r3, [pc, #100]	@ (8001ed8 <HAL_FLASH_IRQHandler+0x164>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	607b      	str	r3, [r7, #4]
        pFlash.Sector = 0xFFFFFFFFU;
 8001e78:	4b17      	ldr	r3, [pc, #92]	@ (8001ed8 <HAL_FLASH_IRQHandler+0x164>)
 8001e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e7e:	60da      	str	r2, [r3, #12]
        break;
 8001e80:	e007      	b.n	8001e92 <HAL_FLASH_IRQHandler+0x11e>
        temp = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
        break;
 8001e86:	e004      	b.n	8001e92 <HAL_FLASH_IRQHandler+0x11e>
        temp = pFlash.Address;
 8001e88:	4b13      	ldr	r3, [pc, #76]	@ (8001ed8 <HAL_FLASH_IRQHandler+0x164>)
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	607b      	str	r3, [r7, #4]
        break;
 8001e8e:	e000      	b.n	8001e92 <HAL_FLASH_IRQHandler+0x11e>
      break;
 8001e90:	bf00      	nop
    }
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8001e92:	f000 f837 	bl	8001f04 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f82a 	bl	8001ef0 <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed8 <HAL_FLASH_IRQHandler+0x164>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed8 <HAL_FLASH_IRQHandler+0x164>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10e      	bne.n	8001eca <HAL_FLASH_IRQHandler+0x156>
  {
    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8001eac:	4b09      	ldr	r3, [pc, #36]	@ (8001ed4 <HAL_FLASH_IRQHandler+0x160>)
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	4a08      	ldr	r2, [pc, #32]	@ (8001ed4 <HAL_FLASH_IRQHandler+0x160>)
 8001eb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001eb6:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8001eb8:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <HAL_FLASH_IRQHandler+0x160>)
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	4a05      	ldr	r2, [pc, #20]	@ (8001ed4 <HAL_FLASH_IRQHandler+0x160>)
 8001ebe:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8001ec2:	6113      	str	r3, [r2, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8001ec4:	4b04      	ldr	r3, [pc, #16]	@ (8001ed8 <HAL_FLASH_IRQHandler+0x164>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	751a      	strb	r2, [r3, #20]
  }
  
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023c00 	.word	0x40023c00
 8001ed8:	20000598 	.word	0x20000598

08001edc <HAL_FLASH_EndOfOperationCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
  */ 
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_FLASH_OperationErrorCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001f08:	4b21      	ldr	r3, [pc, #132]	@ (8001f90 <FLASH_SetErrorCode+0x8c>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001f14:	4b1f      	ldr	r3, [pc, #124]	@ (8001f94 <FLASH_SetErrorCode+0x90>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f043 0320 	orr.w	r3, r3, #32
 8001f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001f94 <FLASH_SetErrorCode+0x90>)
 8001f1e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001f20:	4b1b      	ldr	r3, [pc, #108]	@ (8001f90 <FLASH_SetErrorCode+0x8c>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0310 	and.w	r3, r3, #16
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001f2c:	4b19      	ldr	r3, [pc, #100]	@ (8001f94 <FLASH_SetErrorCode+0x90>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f043 0310 	orr.w	r3, r3, #16
 8001f34:	4a17      	ldr	r2, [pc, #92]	@ (8001f94 <FLASH_SetErrorCode+0x90>)
 8001f36:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001f38:	4b15      	ldr	r3, [pc, #84]	@ (8001f90 <FLASH_SetErrorCode+0x8c>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0320 	and.w	r3, r3, #32
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001f44:	4b13      	ldr	r3, [pc, #76]	@ (8001f94 <FLASH_SetErrorCode+0x90>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f043 0308 	orr.w	r3, r3, #8
 8001f4c:	4a11      	ldr	r2, [pc, #68]	@ (8001f94 <FLASH_SetErrorCode+0x90>)
 8001f4e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001f50:	4b0f      	ldr	r3, [pc, #60]	@ (8001f90 <FLASH_SetErrorCode+0x8c>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f94 <FLASH_SetErrorCode+0x90>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	f043 0304 	orr.w	r3, r3, #4
 8001f64:	4a0b      	ldr	r2, [pc, #44]	@ (8001f94 <FLASH_SetErrorCode+0x90>)
 8001f66:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8001f68:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <FLASH_SetErrorCode+0x8c>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8001f74:	4b07      	ldr	r3, [pc, #28]	@ (8001f94 <FLASH_SetErrorCode+0x90>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f043 0302 	orr.w	r3, r3, #2
 8001f7c:	4a05      	ldr	r2, [pc, #20]	@ (8001f94 <FLASH_SetErrorCode+0x90>)
 8001f7e:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001f80:	4b03      	ldr	r3, [pc, #12]	@ (8001f90 <FLASH_SetErrorCode+0x8c>)
 8001f82:	22f2      	movs	r2, #242	@ 0xf2
 8001f84:	60da      	str	r2, [r3, #12]
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	40023c00 	.word	0x40023c00
 8001f94:	20000598 	.word	0x20000598

08001f98 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d102      	bne.n	8001fb4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	e010      	b.n	8001fd6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d103      	bne.n	8001fc2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001fba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	e009      	b.n	8001fd6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001fc2:	78fb      	ldrb	r3, [r7, #3]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d103      	bne.n	8001fd0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001fc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	e002      	b.n	8001fd6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001fd0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fd4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8001fd6:	4b15      	ldr	r3, [pc, #84]	@ (800202c <FLASH_Erase_Sector+0x94>)
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	4a14      	ldr	r2, [pc, #80]	@ (800202c <FLASH_Erase_Sector+0x94>)
 8001fdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fe0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001fe2:	4b12      	ldr	r3, [pc, #72]	@ (800202c <FLASH_Erase_Sector+0x94>)
 8001fe4:	691a      	ldr	r2, [r3, #16]
 8001fe6:	4911      	ldr	r1, [pc, #68]	@ (800202c <FLASH_Erase_Sector+0x94>)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	610b      	str	r3, [r1, #16]
  FLASH->CR &= SECTOR_MASK;
 8001fee:	4b0f      	ldr	r3, [pc, #60]	@ (800202c <FLASH_Erase_Sector+0x94>)
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	4a0e      	ldr	r2, [pc, #56]	@ (800202c <FLASH_Erase_Sector+0x94>)
 8001ff4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001ff8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800202c <FLASH_Erase_Sector+0x94>)
 8001ffc:	691a      	ldr	r2, [r3, #16]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4313      	orrs	r3, r2
 8002004:	4a09      	ldr	r2, [pc, #36]	@ (800202c <FLASH_Erase_Sector+0x94>)
 8002006:	f043 0302 	orr.w	r3, r3, #2
 800200a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800200c:	4b07      	ldr	r3, [pc, #28]	@ (800202c <FLASH_Erase_Sector+0x94>)
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	4a06      	ldr	r2, [pc, #24]	@ (800202c <FLASH_Erase_Sector+0x94>)
 8002012:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002016:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8002018:	f3bf 8f4f 	dsb	sy
}
 800201c:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800201e:	bf00      	nop
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40023c00 	.word	0x40023c00

08002030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	@ 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	e175      	b.n	800233c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002050:	2201      	movs	r2, #1
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	429a      	cmp	r2, r3
 800206a:	f040 8164 	bne.w	8002336 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b01      	cmp	r3, #1
 8002078:	d005      	beq.n	8002086 <HAL_GPIO_Init+0x56>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d130      	bne.n	80020e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 0201 	and.w	r2, r3, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d017      	beq.n	8002124 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	2203      	movs	r2, #3
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d123      	bne.n	8002178 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	08da      	lsrs	r2, r3, #3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3208      	adds	r2, #8
 8002138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	220f      	movs	r2, #15
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	08da      	lsrs	r2, r3, #3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3208      	adds	r2, #8
 8002172:	69b9      	ldr	r1, [r7, #24]
 8002174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	2203      	movs	r2, #3
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0203 	and.w	r2, r3, #3
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 80be 	beq.w	8002336 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ba:	4b66      	ldr	r3, [pc, #408]	@ (8002354 <HAL_GPIO_Init+0x324>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021be:	4a65      	ldr	r2, [pc, #404]	@ (8002354 <HAL_GPIO_Init+0x324>)
 80021c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021c6:	4b63      	ldr	r3, [pc, #396]	@ (8002354 <HAL_GPIO_Init+0x324>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80021d2:	4a61      	ldr	r2, [pc, #388]	@ (8002358 <HAL_GPIO_Init+0x328>)
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	089b      	lsrs	r3, r3, #2
 80021d8:	3302      	adds	r3, #2
 80021da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	220f      	movs	r2, #15
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a58      	ldr	r2, [pc, #352]	@ (800235c <HAL_GPIO_Init+0x32c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d037      	beq.n	800226e <HAL_GPIO_Init+0x23e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a57      	ldr	r2, [pc, #348]	@ (8002360 <HAL_GPIO_Init+0x330>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d031      	beq.n	800226a <HAL_GPIO_Init+0x23a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a56      	ldr	r2, [pc, #344]	@ (8002364 <HAL_GPIO_Init+0x334>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d02b      	beq.n	8002266 <HAL_GPIO_Init+0x236>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a55      	ldr	r2, [pc, #340]	@ (8002368 <HAL_GPIO_Init+0x338>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d025      	beq.n	8002262 <HAL_GPIO_Init+0x232>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a54      	ldr	r2, [pc, #336]	@ (800236c <HAL_GPIO_Init+0x33c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d01f      	beq.n	800225e <HAL_GPIO_Init+0x22e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a53      	ldr	r2, [pc, #332]	@ (8002370 <HAL_GPIO_Init+0x340>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d019      	beq.n	800225a <HAL_GPIO_Init+0x22a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a52      	ldr	r2, [pc, #328]	@ (8002374 <HAL_GPIO_Init+0x344>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <HAL_GPIO_Init+0x226>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a51      	ldr	r2, [pc, #324]	@ (8002378 <HAL_GPIO_Init+0x348>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00d      	beq.n	8002252 <HAL_GPIO_Init+0x222>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a50      	ldr	r2, [pc, #320]	@ (800237c <HAL_GPIO_Init+0x34c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d007      	beq.n	800224e <HAL_GPIO_Init+0x21e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4f      	ldr	r2, [pc, #316]	@ (8002380 <HAL_GPIO_Init+0x350>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d101      	bne.n	800224a <HAL_GPIO_Init+0x21a>
 8002246:	2309      	movs	r3, #9
 8002248:	e012      	b.n	8002270 <HAL_GPIO_Init+0x240>
 800224a:	230a      	movs	r3, #10
 800224c:	e010      	b.n	8002270 <HAL_GPIO_Init+0x240>
 800224e:	2308      	movs	r3, #8
 8002250:	e00e      	b.n	8002270 <HAL_GPIO_Init+0x240>
 8002252:	2307      	movs	r3, #7
 8002254:	e00c      	b.n	8002270 <HAL_GPIO_Init+0x240>
 8002256:	2306      	movs	r3, #6
 8002258:	e00a      	b.n	8002270 <HAL_GPIO_Init+0x240>
 800225a:	2305      	movs	r3, #5
 800225c:	e008      	b.n	8002270 <HAL_GPIO_Init+0x240>
 800225e:	2304      	movs	r3, #4
 8002260:	e006      	b.n	8002270 <HAL_GPIO_Init+0x240>
 8002262:	2303      	movs	r3, #3
 8002264:	e004      	b.n	8002270 <HAL_GPIO_Init+0x240>
 8002266:	2302      	movs	r3, #2
 8002268:	e002      	b.n	8002270 <HAL_GPIO_Init+0x240>
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <HAL_GPIO_Init+0x240>
 800226e:	2300      	movs	r3, #0
 8002270:	69fa      	ldr	r2, [r7, #28]
 8002272:	f002 0203 	and.w	r2, r2, #3
 8002276:	0092      	lsls	r2, r2, #2
 8002278:	4093      	lsls	r3, r2
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002280:	4935      	ldr	r1, [pc, #212]	@ (8002358 <HAL_GPIO_Init+0x328>)
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	089b      	lsrs	r3, r3, #2
 8002286:	3302      	adds	r3, #2
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800228e:	4b3d      	ldr	r3, [pc, #244]	@ (8002384 <HAL_GPIO_Init+0x354>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022b2:	4a34      	ldr	r2, [pc, #208]	@ (8002384 <HAL_GPIO_Init+0x354>)
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022b8:	4b32      	ldr	r3, [pc, #200]	@ (8002384 <HAL_GPIO_Init+0x354>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022dc:	4a29      	ldr	r2, [pc, #164]	@ (8002384 <HAL_GPIO_Init+0x354>)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022e2:	4b28      	ldr	r3, [pc, #160]	@ (8002384 <HAL_GPIO_Init+0x354>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002306:	4a1f      	ldr	r2, [pc, #124]	@ (8002384 <HAL_GPIO_Init+0x354>)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800230c:	4b1d      	ldr	r3, [pc, #116]	@ (8002384 <HAL_GPIO_Init+0x354>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002330:	4a14      	ldr	r2, [pc, #80]	@ (8002384 <HAL_GPIO_Init+0x354>)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3301      	adds	r3, #1
 800233a:	61fb      	str	r3, [r7, #28]
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	2b0f      	cmp	r3, #15
 8002340:	f67f ae86 	bls.w	8002050 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop
 8002348:	3724      	adds	r7, #36	@ 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800
 8002358:	40013800 	.word	0x40013800
 800235c:	40020000 	.word	0x40020000
 8002360:	40020400 	.word	0x40020400
 8002364:	40020800 	.word	0x40020800
 8002368:	40020c00 	.word	0x40020c00
 800236c:	40021000 	.word	0x40021000
 8002370:	40021400 	.word	0x40021400
 8002374:	40021800 	.word	0x40021800
 8002378:	40021c00 	.word	0x40021c00
 800237c:	40022000 	.word	0x40022000
 8002380:	40022400 	.word	0x40022400
 8002384:	40013c00 	.word	0x40013c00

08002388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	807b      	strh	r3, [r7, #2]
 8002394:	4613      	mov	r3, r2
 8002396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002398:	787b      	ldrb	r3, [r7, #1]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800239e:	887a      	ldrh	r2, [r7, #2]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80023a4:	e003      	b.n	80023ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023a6:	887b      	ldrh	r3, [r7, #2]
 80023a8:	041a      	lsls	r2, r3, #16
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	619a      	str	r2, [r3, #24]
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b086      	sub	sp, #24
 80023be:	af02      	add	r7, sp, #8
 80023c0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e108      	b.n	80025de <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d106      	bne.n	80023ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f007 fdec 	bl	8009fc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2203      	movs	r2, #3
 80023f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023fa:	d102      	bne.n	8002402 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f004 f9ff 	bl	800680a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7c1a      	ldrb	r2, [r3, #16]
 8002414:	f88d 2000 	strb.w	r2, [sp]
 8002418:	3304      	adds	r3, #4
 800241a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800241c:	f004 f8e8 	bl	80065f0 <USB_CoreInit>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2202      	movs	r2, #2
 800242a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e0d5      	b.n	80025de <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f004 f9f7 	bl	800682c <USB_SetCurrentMode>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0c6      	b.n	80025de <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002450:	2300      	movs	r3, #0
 8002452:	73fb      	strb	r3, [r7, #15]
 8002454:	e04a      	b.n	80024ec <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002456:	7bfa      	ldrb	r2, [r7, #15]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	3315      	adds	r3, #21
 8002466:	2201      	movs	r2, #1
 8002468:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800246a:	7bfa      	ldrb	r2, [r7, #15]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	3314      	adds	r3, #20
 800247a:	7bfa      	ldrb	r2, [r7, #15]
 800247c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800247e:	7bfa      	ldrb	r2, [r7, #15]
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	b298      	uxth	r0, r3
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	332e      	adds	r3, #46	@ 0x2e
 8002492:	4602      	mov	r2, r0
 8002494:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4413      	add	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	3318      	adds	r3, #24
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024aa:	7bfa      	ldrb	r2, [r7, #15]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4413      	add	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	331c      	adds	r3, #28
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	3320      	adds	r3, #32
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024d2:	7bfa      	ldrb	r2, [r7, #15]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	3324      	adds	r3, #36	@ 0x24
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	3301      	adds	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	791b      	ldrb	r3, [r3, #4]
 80024f0:	7bfa      	ldrb	r2, [r7, #15]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d3af      	bcc.n	8002456 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	e044      	b.n	8002586 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002512:	7bfa      	ldrb	r2, [r7, #15]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002554:	7bfa      	ldrb	r2, [r7, #15]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800256a:	7bfa      	ldrb	r2, [r7, #15]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	3301      	adds	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	791b      	ldrb	r3, [r3, #4]
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	429a      	cmp	r2, r3
 800258e:	d3b5      	bcc.n	80024fc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	7c1a      	ldrb	r2, [r3, #16]
 8002598:	f88d 2000 	strb.w	r2, [sp]
 800259c:	3304      	adds	r3, #4
 800259e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025a0:	f004 f990 	bl	80068c4 <USB_DevInit>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2202      	movs	r2, #2
 80025ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e013      	b.n	80025de <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	7b1b      	ldrb	r3, [r3, #12]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d102      	bne.n	80025d2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f001 f959 	bl	8003884 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f005 f9cf 	bl	800797a <USB_DevDisconnect>

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_PCD_Start+0x16>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e012      	b.n	8002622 <HAL_PCD_Start+0x3c>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f004 f8ed 	bl	80067e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f005 f990 	bl	8007938 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800262a:	b590      	push	{r4, r7, lr}
 800262c:	b08d      	sub	sp, #52	@ 0x34
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f005 fa4e 	bl	8007ae2 <USB_GetMode>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	f040 84b9 	bne.w	8002fc0 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f005 f9b2 	bl	80079bc <USB_ReadInterrupts>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 84af 	beq.w	8002fbe <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	0a1b      	lsrs	r3, r3, #8
 800266a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f005 f99f 	bl	80079bc <USB_ReadInterrupts>
 800267e:	4603      	mov	r3, r0
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b02      	cmp	r3, #2
 8002686:	d107      	bne.n	8002698 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f002 0202 	and.w	r2, r2, #2
 8002696:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f005 f98d 	bl	80079bc <USB_ReadInterrupts>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	2b10      	cmp	r3, #16
 80026aa:	d161      	bne.n	8002770 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699a      	ldr	r2, [r3, #24]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0210 	bic.w	r2, r2, #16
 80026ba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	f003 020f 	and.w	r2, r3, #15
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	4413      	add	r3, r2
 80026d8:	3304      	adds	r3, #4
 80026da:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80026e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80026e6:	d124      	bne.n	8002732 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d035      	beq.n	8002760 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	091b      	lsrs	r3, r3, #4
 80026fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002702:	b29b      	uxth	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	6a38      	ldr	r0, [r7, #32]
 8002708:	f004 ffc4 	bl	8007694 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	091b      	lsrs	r3, r3, #4
 8002714:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002718:	441a      	add	r2, r3
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	091b      	lsrs	r3, r3, #4
 8002726:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800272a:	441a      	add	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	615a      	str	r2, [r3, #20]
 8002730:	e016      	b.n	8002760 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002738:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800273c:	d110      	bne.n	8002760 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002744:	2208      	movs	r2, #8
 8002746:	4619      	mov	r1, r3
 8002748:	6a38      	ldr	r0, [r7, #32]
 800274a:	f004 ffa3 	bl	8007694 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800275a:	441a      	add	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699a      	ldr	r2, [r3, #24]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0210 	orr.w	r2, r2, #16
 800276e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f005 f921 	bl	80079bc <USB_ReadInterrupts>
 800277a:	4603      	mov	r3, r0
 800277c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002780:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002784:	f040 80a7 	bne.w	80028d6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f005 f926 	bl	80079e2 <USB_ReadDevAllOutEpInterrupt>
 8002796:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002798:	e099      	b.n	80028ce <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800279a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 808e 	beq.w	80028c2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f005 f94a 	bl	8007a4a <USB_ReadDevOutEPInterrupt>
 80027b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00c      	beq.n	80027dc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027ce:	461a      	mov	r2, r3
 80027d0:	2301      	movs	r3, #1
 80027d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80027d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 fece 	bl	8003578 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00c      	beq.n	8002800 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027f2:	461a      	mov	r2, r3
 80027f4:	2308      	movs	r3, #8
 80027f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80027f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 ffa4 	bl	8003748 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f003 0310 	and.w	r3, r3, #16
 8002806:	2b00      	cmp	r3, #0
 8002808:	d008      	beq.n	800281c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	4413      	add	r3, r2
 8002812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002816:	461a      	mov	r2, r3
 8002818:	2310      	movs	r3, #16
 800281a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d030      	beq.n	8002888 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800282e:	2b80      	cmp	r3, #128	@ 0x80
 8002830:	d109      	bne.n	8002846 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	69fa      	ldr	r2, [r7, #28]
 800283c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002840:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002844:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002848:	4613      	mov	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	4413      	add	r3, r2
 8002858:	3304      	adds	r3, #4
 800285a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	78db      	ldrb	r3, [r3, #3]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d108      	bne.n	8002876 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	2200      	movs	r2, #0
 8002868:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800286a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286c:	b2db      	uxtb	r3, r3
 800286e:	4619      	mov	r1, r3
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f007 fccb 	bl	800a20c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	4413      	add	r3, r2
 800287e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002882:	461a      	mov	r2, r3
 8002884:	2302      	movs	r3, #2
 8002886:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	f003 0320 	and.w	r3, r3, #32
 800288e:	2b00      	cmp	r3, #0
 8002890:	d008      	beq.n	80028a4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	4413      	add	r3, r2
 800289a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800289e:	461a      	mov	r2, r3
 80028a0:	2320      	movs	r3, #32
 80028a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d009      	beq.n	80028c2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028ba:	461a      	mov	r2, r3
 80028bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028c0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c4:	3301      	adds	r3, #1
 80028c6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80028c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ca:	085b      	lsrs	r3, r3, #1
 80028cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80028ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f47f af62 	bne.w	800279a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f005 f86e 	bl	80079bc <USB_ReadInterrupts>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80028ea:	f040 80db 	bne.w	8002aa4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f005 f88f 	bl	8007a16 <USB_ReadDevAllInEpInterrupt>
 80028f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80028fe:	e0cd      	b.n	8002a9c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 80c2 	beq.w	8002a90 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	4611      	mov	r1, r2
 8002916:	4618      	mov	r0, r3
 8002918:	f005 f8b5 	bl	8007a86 <USB_ReadDevInEPInterrupt>
 800291c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d057      	beq.n	80029d8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	2201      	movs	r2, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800293c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	43db      	mvns	r3, r3
 8002942:	69f9      	ldr	r1, [r7, #28]
 8002944:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002948:	4013      	ands	r3, r2
 800294a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800294c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	4413      	add	r3, r2
 8002954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002958:	461a      	mov	r2, r3
 800295a:	2301      	movs	r3, #1
 800295c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	799b      	ldrb	r3, [r3, #6]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d132      	bne.n	80029cc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800296a:	4613      	mov	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	4413      	add	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	440b      	add	r3, r1
 8002974:	3320      	adds	r3, #32
 8002976:	6819      	ldr	r1, [r3, #0]
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4403      	add	r3, r0
 8002986:	331c      	adds	r3, #28
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4419      	add	r1, r3
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002990:	4613      	mov	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4403      	add	r3, r0
 800299a:	3320      	adds	r3, #32
 800299c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800299e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d113      	bne.n	80029cc <HAL_PCD_IRQHandler+0x3a2>
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029a8:	4613      	mov	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	3324      	adds	r3, #36	@ 0x24
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d108      	bne.n	80029cc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029c4:	461a      	mov	r2, r3
 80029c6:	2101      	movs	r1, #1
 80029c8:	f005 f8be 	bl	8007b48 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	4619      	mov	r1, r3
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f007 fb95 	bl	800a102 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d008      	beq.n	80029f4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029ee:	461a      	mov	r2, r3
 80029f0:	2308      	movs	r3, #8
 80029f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d008      	beq.n	8002a10 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80029fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	2310      	movs	r3, #16
 8002a0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d008      	beq.n	8002a2c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a26:	461a      	mov	r2, r3
 8002a28:	2340      	movs	r3, #64	@ 0x40
 8002a2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d023      	beq.n	8002a7e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a38:	6a38      	ldr	r0, [r7, #32]
 8002a3a:	f004 f8a1 	bl	8006b80 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a40:	4613      	mov	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	3310      	adds	r3, #16
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3304      	adds	r3, #4
 8002a50:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	78db      	ldrb	r3, [r3, #3]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d108      	bne.n	8002a6c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	4619      	mov	r1, r3
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f007 fbe2 	bl	800a230 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fce8 	bl	8003460 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a92:	3301      	adds	r3, #1
 8002a94:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a98:	085b      	lsrs	r3, r3, #1
 8002a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f47f af2e 	bne.w	8002900 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f004 ff87 	bl	80079bc <USB_ReadInterrupts>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ab8:	d122      	bne.n	8002b00 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	69fa      	ldr	r2, [r7, #28]
 8002ac4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ac8:	f023 0301 	bic.w	r3, r3, #1
 8002acc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d108      	bne.n	8002aea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f007 fd5c 	bl	800a5a0 <HAL_PCDEx_LPM_Callback>
 8002ae8:	e002      	b.n	8002af0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f007 fb80 	bl	800a1f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002afe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f004 ff59 	bl	80079bc <USB_ReadInterrupts>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b14:	d112      	bne.n	8002b3c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d102      	bne.n	8002b2c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f007 fb3c 	bl	800a1a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695a      	ldr	r2, [r3, #20]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002b3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f004 ff3b 	bl	80079bc <USB_ReadInterrupts>
 8002b46:	4603      	mov	r3, r0
 8002b48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b50:	d121      	bne.n	8002b96 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002b60:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d111      	bne.n	8002b90 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7a:	089b      	lsrs	r3, r3, #2
 8002b7c:	f003 020f 	and.w	r2, r3, #15
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b86:	2101      	movs	r1, #1
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f007 fd09 	bl	800a5a0 <HAL_PCDEx_LPM_Callback>
 8002b8e:	e002      	b.n	8002b96 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f007 fb07 	bl	800a1a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f004 ff0e 	bl	80079bc <USB_ReadInterrupts>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ba6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002baa:	f040 80b7 	bne.w	8002d1c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	69fa      	ldr	r2, [r7, #28]
 8002bb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2110      	movs	r1, #16
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f003 ffd9 	bl	8006b80 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bd2:	e046      	b.n	8002c62 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002be0:	461a      	mov	r2, r3
 8002be2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002be6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bf8:	0151      	lsls	r1, r2, #5
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	440a      	add	r2, r1
 8002bfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002c02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c06:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c14:	461a      	mov	r2, r3
 8002c16:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c1a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c1e:	015a      	lsls	r2, r3, #5
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c2c:	0151      	lsls	r1, r2, #5
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	440a      	add	r2, r1
 8002c32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c3a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c4c:	0151      	lsls	r1, r2, #5
 8002c4e:	69fa      	ldr	r2, [r7, #28]
 8002c50:	440a      	add	r2, r1
 8002c52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002c5a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c5e:	3301      	adds	r3, #1
 8002c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	791b      	ldrb	r3, [r3, #4]
 8002c66:	461a      	mov	r2, r3
 8002c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d3b2      	bcc.n	8002bd4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c7c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002c80:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	7bdb      	ldrb	r3, [r3, #15]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d016      	beq.n	8002cb8 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c94:	69fa      	ldr	r2, [r7, #28]
 8002c96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c9a:	f043 030b 	orr.w	r3, r3, #11
 8002c9e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cb0:	f043 030b 	orr.w	r3, r3, #11
 8002cb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cb6:	e015      	b.n	8002ce4 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cbe:	695a      	ldr	r2, [r3, #20]
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	69fa      	ldr	r2, [r7, #28]
 8002cda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cde:	f043 030b 	orr.w	r3, r3, #11
 8002ce2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69fa      	ldr	r2, [r7, #28]
 8002cee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cf2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002cf6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6818      	ldr	r0, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d06:	461a      	mov	r2, r3
 8002d08:	f004 ff1e 	bl	8007b48 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002d1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f004 fe4b 	bl	80079bc <USB_ReadInterrupts>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d30:	d123      	bne.n	8002d7a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f004 fee2 	bl	8007b00 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f003 ff96 	bl	8006c72 <USB_GetDevSpeed>
 8002d46:	4603      	mov	r3, r0
 8002d48:	461a      	mov	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681c      	ldr	r4, [r3, #0]
 8002d52:	f001 fa2b 	bl	80041ac <HAL_RCC_GetHCLKFreq>
 8002d56:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4620      	mov	r0, r4
 8002d60:	f003 fca0 	bl	80066a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f007 f9f4 	bl	800a152 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695a      	ldr	r2, [r3, #20]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002d78:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f004 fe1c 	bl	80079bc <USB_ReadInterrupts>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d10a      	bne.n	8002da4 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f007 f9d1 	bl	800a136 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f002 0208 	and.w	r2, r2, #8
 8002da2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f004 fe07 	bl	80079bc <USB_ReadInterrupts>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db4:	2b80      	cmp	r3, #128	@ 0x80
 8002db6:	d123      	bne.n	8002e00 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dc8:	e014      	b.n	8002df4 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d105      	bne.n	8002dee <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	4619      	mov	r1, r3
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 fb08 	bl	80033fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	3301      	adds	r3, #1
 8002df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	791b      	ldrb	r3, [r3, #4]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d3e4      	bcc.n	8002dca <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f004 fdd9 	bl	80079bc <USB_ReadInterrupts>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e14:	d13c      	bne.n	8002e90 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e16:	2301      	movs	r3, #1
 8002e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e1a:	e02b      	b.n	8002e74 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	3318      	adds	r3, #24
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d115      	bne.n	8002e6e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002e42:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	da12      	bge.n	8002e6e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	3317      	adds	r3, #23
 8002e58:	2201      	movs	r2, #1
 8002e5a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	4619      	mov	r1, r3
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fac8 	bl	80033fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	3301      	adds	r3, #1
 8002e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	791b      	ldrb	r3, [r3, #4]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d3cd      	bcc.n	8002e1c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002e8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f004 fd91 	bl	80079bc <USB_ReadInterrupts>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ea0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ea4:	d156      	bne.n	8002f54 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eaa:	e045      	b.n	8002f38 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d12e      	bne.n	8002f32 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ed4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	da2b      	bge.n	8002f32 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002ee6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d121      	bne.n	8002f32 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f00:	2201      	movs	r2, #1
 8002f02:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10a      	bne.n	8002f32 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	69fa      	ldr	r2, [r7, #28]
 8002f26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f2e:	6053      	str	r3, [r2, #4]
            break;
 8002f30:	e008      	b.n	8002f44 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f34:	3301      	adds	r3, #1
 8002f36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	791b      	ldrb	r3, [r3, #4]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d3b3      	bcc.n	8002eac <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002f52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f004 fd2f 	bl	80079bc <USB_ReadInterrupts>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f68:	d10a      	bne.n	8002f80 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f007 f972 	bl	800a254 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695a      	ldr	r2, [r3, #20]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002f7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f004 fd19 	bl	80079bc <USB_ReadInterrupts>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d115      	bne.n	8002fc0 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f007 f962 	bl	800a270 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6859      	ldr	r1, [r3, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	605a      	str	r2, [r3, #4]
 8002fbc:	e000      	b.n	8002fc0 <HAL_PCD_IRQHandler+0x996>
      return;
 8002fbe:	bf00      	nop
    }
  }
}
 8002fc0:	3734      	adds	r7, #52	@ 0x34
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd90      	pop	{r4, r7, pc}

08002fc6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_PCD_SetAddress+0x1a>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e012      	b.n	8003006 <HAL_PCD_SetAddress+0x40>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f004 fc78 	bl	80078ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b084      	sub	sp, #16
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	4608      	mov	r0, r1
 8003018:	4611      	mov	r1, r2
 800301a:	461a      	mov	r2, r3
 800301c:	4603      	mov	r3, r0
 800301e:	70fb      	strb	r3, [r7, #3]
 8003020:	460b      	mov	r3, r1
 8003022:	803b      	strh	r3, [r7, #0]
 8003024:	4613      	mov	r3, r2
 8003026:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800302c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003030:	2b00      	cmp	r3, #0
 8003032:	da0f      	bge.n	8003054 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	f003 020f 	and.w	r2, r3, #15
 800303a:	4613      	mov	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	3310      	adds	r3, #16
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	4413      	add	r3, r2
 8003048:	3304      	adds	r3, #4
 800304a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2201      	movs	r2, #1
 8003050:	705a      	strb	r2, [r3, #1]
 8003052:	e00f      	b.n	8003074 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	f003 020f 	and.w	r2, r3, #15
 800305a:	4613      	mov	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	3304      	adds	r3, #4
 800306c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	b2da      	uxtb	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003080:	883a      	ldrh	r2, [r7, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	78ba      	ldrb	r2, [r7, #2]
 800308a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	785b      	ldrb	r3, [r3, #1]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d004      	beq.n	800309e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800309e:	78bb      	ldrb	r3, [r7, #2]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d102      	bne.n	80030aa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_PCD_EP_Open+0xaa>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e00e      	b.n	80030d6 <HAL_PCD_EP_Open+0xc8>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68f9      	ldr	r1, [r7, #12]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f003 fdf8 	bl	8006cbc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80030d4:	7afb      	ldrb	r3, [r7, #11]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	460b      	mov	r3, r1
 80030e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	da0f      	bge.n	8003112 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	f003 020f 	and.w	r2, r3, #15
 80030f8:	4613      	mov	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	3310      	adds	r3, #16
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	4413      	add	r3, r2
 8003106:	3304      	adds	r3, #4
 8003108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	705a      	strb	r2, [r3, #1]
 8003110:	e00f      	b.n	8003132 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003112:	78fb      	ldrb	r3, [r7, #3]
 8003114:	f003 020f 	and.w	r2, r3, #15
 8003118:	4613      	mov	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	4413      	add	r3, r2
 8003128:	3304      	adds	r3, #4
 800312a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003132:	78fb      	ldrb	r3, [r7, #3]
 8003134:	f003 030f 	and.w	r3, r3, #15
 8003138:	b2da      	uxtb	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_PCD_EP_Close+0x6e>
 8003148:	2302      	movs	r3, #2
 800314a:	e00e      	b.n	800316a <HAL_PCD_EP_Close+0x8c>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68f9      	ldr	r1, [r7, #12]
 800315a:	4618      	mov	r0, r3
 800315c:	f003 fe36 	bl	8006dcc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b086      	sub	sp, #24
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	603b      	str	r3, [r7, #0]
 800317e:	460b      	mov	r3, r1
 8003180:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003182:	7afb      	ldrb	r3, [r7, #11]
 8003184:	f003 020f 	and.w	r2, r3, #15
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4413      	add	r3, r2
 8003198:	3304      	adds	r3, #4
 800319a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2200      	movs	r2, #0
 80031ac:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2200      	movs	r2, #0
 80031b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031b4:	7afb      	ldrb	r3, [r7, #11]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	799b      	ldrb	r3, [r3, #6]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d102      	bne.n	80031ce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	799b      	ldrb	r3, [r3, #6]
 80031d6:	461a      	mov	r2, r3
 80031d8:	6979      	ldr	r1, [r7, #20]
 80031da:	f003 fed3 	bl	8006f84 <USB_EPStartXfer>

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	f003 020f 	and.w	r2, r3, #15
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800320a:	681b      	ldr	r3, [r3, #0]
}
 800320c:	4618      	mov	r0, r3
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	607a      	str	r2, [r7, #4]
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	460b      	mov	r3, r1
 8003226:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003228:	7afb      	ldrb	r3, [r7, #11]
 800322a:	f003 020f 	and.w	r2, r3, #15
 800322e:	4613      	mov	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	3310      	adds	r3, #16
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4413      	add	r3, r2
 800323c:	3304      	adds	r3, #4
 800323e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2200      	movs	r2, #0
 8003250:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2201      	movs	r2, #1
 8003256:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003258:	7afb      	ldrb	r3, [r7, #11]
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	b2da      	uxtb	r2, r3
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	799b      	ldrb	r3, [r3, #6]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d102      	bne.n	8003272 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	799b      	ldrb	r3, [r3, #6]
 800327a:	461a      	mov	r2, r3
 800327c:	6979      	ldr	r1, [r7, #20]
 800327e:	f003 fe81 	bl	8006f84 <USB_EPStartXfer>

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	7912      	ldrb	r2, [r2, #4]
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d901      	bls.n	80032aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e04f      	b.n	800334a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	da0f      	bge.n	80032d2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032b2:	78fb      	ldrb	r3, [r7, #3]
 80032b4:	f003 020f 	and.w	r2, r3, #15
 80032b8:	4613      	mov	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	4413      	add	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	3310      	adds	r3, #16
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	4413      	add	r3, r2
 80032c6:	3304      	adds	r3, #4
 80032c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2201      	movs	r2, #1
 80032ce:	705a      	strb	r2, [r3, #1]
 80032d0:	e00d      	b.n	80032ee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	4613      	mov	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	4413      	add	r3, r2
 80032e4:	3304      	adds	r3, #4
 80032e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2201      	movs	r2, #1
 80032f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_PCD_EP_SetStall+0x82>
 800330a:	2302      	movs	r3, #2
 800330c:	e01d      	b.n	800334a <HAL_PCD_EP_SetStall+0xbe>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68f9      	ldr	r1, [r7, #12]
 800331c:	4618      	mov	r0, r3
 800331e:	f004 fa11 	bl	8007744 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003322:	78fb      	ldrb	r3, [r7, #3]
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	2b00      	cmp	r3, #0
 800332a:	d109      	bne.n	8003340 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	7999      	ldrb	r1, [r3, #6]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800333a:	461a      	mov	r2, r3
 800333c:	f004 fc04 	bl	8007b48 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	460b      	mov	r3, r1
 800335c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	f003 030f 	and.w	r3, r3, #15
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	7912      	ldrb	r2, [r2, #4]
 8003368:	4293      	cmp	r3, r2
 800336a:	d901      	bls.n	8003370 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e042      	b.n	80033f6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003370:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003374:	2b00      	cmp	r3, #0
 8003376:	da0f      	bge.n	8003398 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	f003 020f 	and.w	r2, r3, #15
 800337e:	4613      	mov	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	3310      	adds	r3, #16
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	4413      	add	r3, r2
 800338c:	3304      	adds	r3, #4
 800338e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2201      	movs	r2, #1
 8003394:	705a      	strb	r2, [r3, #1]
 8003396:	e00f      	b.n	80033b8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	f003 020f 	and.w	r2, r3, #15
 800339e:	4613      	mov	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	4413      	add	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	4413      	add	r3, r2
 80033ae:	3304      	adds	r3, #4
 80033b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033be:	78fb      	ldrb	r3, [r7, #3]
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_PCD_EP_ClrStall+0x86>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e00e      	b.n	80033f6 <HAL_PCD_EP_ClrStall+0xa4>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68f9      	ldr	r1, [r7, #12]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f004 fa1a 	bl	8007820 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b084      	sub	sp, #16
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
 8003406:	460b      	mov	r3, r1
 8003408:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800340a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800340e:	2b00      	cmp	r3, #0
 8003410:	da0c      	bge.n	800342c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	f003 020f 	and.w	r2, r3, #15
 8003418:	4613      	mov	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	3310      	adds	r3, #16
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	4413      	add	r3, r2
 8003426:	3304      	adds	r3, #4
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	e00c      	b.n	8003446 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	f003 020f 	and.w	r2, r3, #15
 8003432:	4613      	mov	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	4413      	add	r3, r2
 8003442:	3304      	adds	r3, #4
 8003444:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68f9      	ldr	r1, [r7, #12]
 800344c:	4618      	mov	r0, r3
 800344e:	f004 f839 	bl	80074c4 <USB_EPStopXfer>
 8003452:	4603      	mov	r3, r0
 8003454:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003456:	7afb      	ldrb	r3, [r7, #11]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08a      	sub	sp, #40	@ 0x28
 8003464:	af02      	add	r7, sp, #8
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	4613      	mov	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	4413      	add	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	3310      	adds	r3, #16
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	4413      	add	r3, r2
 8003484:	3304      	adds	r3, #4
 8003486:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	429a      	cmp	r2, r3
 8003492:	d901      	bls.n	8003498 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e06b      	b.n	8003570 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	69fa      	ldr	r2, [r7, #28]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d902      	bls.n	80034b4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	3303      	adds	r3, #3
 80034b8:	089b      	lsrs	r3, r3, #2
 80034ba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034bc:	e02a      	b.n	8003514 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d902      	bls.n	80034da <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	3303      	adds	r3, #3
 80034de:	089b      	lsrs	r3, r3, #2
 80034e0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	68d9      	ldr	r1, [r3, #12]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	4603      	mov	r3, r0
 80034f6:	6978      	ldr	r0, [r7, #20]
 80034f8:	f004 f88e 	bl	8007618 <USB_WritePacket>

    ep->xfer_buff  += len;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	441a      	add	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	695a      	ldr	r2, [r3, #20]
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	441a      	add	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	4413      	add	r3, r2
 800351c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	429a      	cmp	r2, r3
 8003528:	d809      	bhi.n	800353e <PCD_WriteEmptyTxFifo+0xde>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	695a      	ldr	r2, [r3, #20]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003532:	429a      	cmp	r2, r3
 8003534:	d203      	bcs.n	800353e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1bf      	bne.n	80034be <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	429a      	cmp	r2, r3
 8003548:	d811      	bhi.n	800356e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	f003 030f 	and.w	r3, r3, #15
 8003550:	2201      	movs	r2, #1
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800355e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	43db      	mvns	r3, r3
 8003564:	6939      	ldr	r1, [r7, #16]
 8003566:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800356a:	4013      	ands	r3, r2
 800356c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3720      	adds	r7, #32
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	333c      	adds	r3, #60	@ 0x3c
 8003590:	3304      	adds	r3, #4
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	799b      	ldrb	r3, [r3, #6]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d17b      	bne.n	80036a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d015      	beq.n	80035e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	4a61      	ldr	r2, [pc, #388]	@ (8003740 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	f240 80b9 	bls.w	8003734 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80b3 	beq.w	8003734 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035da:	461a      	mov	r2, r3
 80035dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035e0:	6093      	str	r3, [r2, #8]
 80035e2:	e0a7      	b.n	8003734 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d009      	beq.n	8003602 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035fa:	461a      	mov	r2, r3
 80035fc:	2320      	movs	r3, #32
 80035fe:	6093      	str	r3, [r2, #8]
 8003600:	e098      	b.n	8003734 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003608:	2b00      	cmp	r3, #0
 800360a:	f040 8093 	bne.w	8003734 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	4a4b      	ldr	r2, [pc, #300]	@ (8003740 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d90f      	bls.n	8003636 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	4413      	add	r3, r2
 8003628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800362c:	461a      	mov	r2, r3
 800362e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003632:	6093      	str	r3, [r2, #8]
 8003634:	e07e      	b.n	8003734 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	4613      	mov	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	4413      	add	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	4413      	add	r3, r2
 8003648:	3304      	adds	r3, #4
 800364a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a1a      	ldr	r2, [r3, #32]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	0159      	lsls	r1, r3, #5
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	440b      	add	r3, r1
 8003658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003662:	1ad2      	subs	r2, r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d114      	bne.n	8003698 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d109      	bne.n	800368a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003680:	461a      	mov	r2, r3
 8003682:	2101      	movs	r1, #1
 8003684:	f004 fa60 	bl	8007b48 <USB_EP0_OutStart>
 8003688:	e006      	b.n	8003698 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	441a      	add	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	b2db      	uxtb	r3, r3
 800369c:	4619      	mov	r1, r3
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f006 fd14 	bl	800a0cc <HAL_PCD_DataOutStageCallback>
 80036a4:	e046      	b.n	8003734 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	4a26      	ldr	r2, [pc, #152]	@ (8003744 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d124      	bne.n	80036f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036c4:	461a      	mov	r2, r3
 80036c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036ca:	6093      	str	r3, [r2, #8]
 80036cc:	e032      	b.n	8003734 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036e4:	461a      	mov	r2, r3
 80036e6:	2320      	movs	r3, #32
 80036e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	4619      	mov	r1, r3
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f006 fceb 	bl	800a0cc <HAL_PCD_DataOutStageCallback>
 80036f6:	e01d      	b.n	8003734 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d114      	bne.n	8003728 <PCD_EP_OutXfrComplete_int+0x1b0>
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	4613      	mov	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d108      	bne.n	8003728 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003720:	461a      	mov	r2, r3
 8003722:	2100      	movs	r1, #0
 8003724:	f004 fa10 	bl	8007b48 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	4619      	mov	r1, r3
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f006 fccc 	bl	800a0cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3720      	adds	r7, #32
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	4f54300a 	.word	0x4f54300a
 8003744:	4f54310a 	.word	0x4f54310a

08003748 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	333c      	adds	r3, #60	@ 0x3c
 8003760:	3304      	adds	r3, #4
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4413      	add	r3, r2
 800376e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4a15      	ldr	r2, [pc, #84]	@ (80037d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d90e      	bls.n	800379c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003784:	2b00      	cmp	r3, #0
 8003786:	d009      	beq.n	800379c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003794:	461a      	mov	r2, r3
 8003796:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800379a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f006 fc83 	bl	800a0a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4a0a      	ldr	r2, [pc, #40]	@ (80037d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d90c      	bls.n	80037c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	799b      	ldrb	r3, [r3, #6]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d108      	bne.n	80037c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037bc:	461a      	mov	r2, r3
 80037be:	2101      	movs	r1, #1
 80037c0:	f004 f9c2 	bl	8007b48 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	4f54300a 	.word	0x4f54300a

080037d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	70fb      	strb	r3, [r7, #3]
 80037e0:	4613      	mov	r3, r2
 80037e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d107      	bne.n	8003802 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80037f2:	883b      	ldrh	r3, [r7, #0]
 80037f4:	0419      	lsls	r1, r3, #16
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8003800:	e028      	b.n	8003854 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003808:	0c1b      	lsrs	r3, r3, #16
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	4413      	add	r3, r2
 800380e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003810:	2300      	movs	r3, #0
 8003812:	73fb      	strb	r3, [r7, #15]
 8003814:	e00d      	b.n	8003832 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	7bfb      	ldrb	r3, [r7, #15]
 800381c:	3340      	adds	r3, #64	@ 0x40
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	0c1b      	lsrs	r3, r3, #16
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	4413      	add	r3, r2
 800382a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	3301      	adds	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
 8003832:	7bfa      	ldrb	r2, [r7, #15]
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	3b01      	subs	r3, #1
 8003838:	429a      	cmp	r2, r3
 800383a:	d3ec      	bcc.n	8003816 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800383c:	883b      	ldrh	r3, [r7, #0]
 800383e:	0418      	lsls	r0, r3, #16
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6819      	ldr	r1, [r3, #0]
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	3b01      	subs	r3, #1
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	4302      	orrs	r2, r0
 800384c:	3340      	adds	r3, #64	@ 0x40
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	460b      	mov	r3, r1
 800386c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	887a      	ldrh	r2, [r7, #2]
 8003874:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038b2:	4b05      	ldr	r3, [pc, #20]	@ (80038c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	10000003 	.word	0x10000003

080038cc <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80038d0:	4b06      	ldr	r3, [pc, #24]	@ (80038ec <HAL_PWR_PVD_IRQHandler+0x20>)
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80038dc:	f000 f808 	bl	80038f0 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80038e0:	4b02      	ldr	r3, [pc, #8]	@ (80038ec <HAL_PWR_PVD_IRQHandler+0x20>)
 80038e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80038e6:	615a      	str	r2, [r3, #20]
  }
}
 80038e8:	bf00      	nop
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40013c00 	.word	0x40013c00

080038f0 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80038f4:	bf00      	nop
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
	...

08003900 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003908:	2300      	movs	r3, #0
 800390a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e291      	b.n	8003e3a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 8087 	beq.w	8003a32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003924:	4b96      	ldr	r3, [pc, #600]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 030c 	and.w	r3, r3, #12
 800392c:	2b04      	cmp	r3, #4
 800392e:	d00c      	beq.n	800394a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003930:	4b93      	ldr	r3, [pc, #588]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 030c 	and.w	r3, r3, #12
 8003938:	2b08      	cmp	r3, #8
 800393a:	d112      	bne.n	8003962 <HAL_RCC_OscConfig+0x62>
 800393c:	4b90      	ldr	r3, [pc, #576]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003944:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003948:	d10b      	bne.n	8003962 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394a:	4b8d      	ldr	r3, [pc, #564]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d06c      	beq.n	8003a30 <HAL_RCC_OscConfig+0x130>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d168      	bne.n	8003a30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e26b      	b.n	8003e3a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800396a:	d106      	bne.n	800397a <HAL_RCC_OscConfig+0x7a>
 800396c:	4b84      	ldr	r3, [pc, #528]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a83      	ldr	r2, [pc, #524]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003972:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	e02e      	b.n	80039d8 <HAL_RCC_OscConfig+0xd8>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10c      	bne.n	800399c <HAL_RCC_OscConfig+0x9c>
 8003982:	4b7f      	ldr	r3, [pc, #508]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a7e      	ldr	r2, [pc, #504]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003988:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	4b7c      	ldr	r3, [pc, #496]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a7b      	ldr	r2, [pc, #492]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003994:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	e01d      	b.n	80039d8 <HAL_RCC_OscConfig+0xd8>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039a4:	d10c      	bne.n	80039c0 <HAL_RCC_OscConfig+0xc0>
 80039a6:	4b76      	ldr	r3, [pc, #472]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a75      	ldr	r2, [pc, #468]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 80039ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	4b73      	ldr	r3, [pc, #460]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a72      	ldr	r2, [pc, #456]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 80039b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	e00b      	b.n	80039d8 <HAL_RCC_OscConfig+0xd8>
 80039c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 80039c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ca:	6013      	str	r3, [r2, #0]
 80039cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a6b      	ldr	r2, [pc, #428]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 80039d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d013      	beq.n	8003a08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e0:	f7fd ff7c 	bl	80018dc <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e8:	f7fd ff78 	bl	80018dc <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b64      	cmp	r3, #100	@ 0x64
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e21f      	b.n	8003e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fa:	4b61      	ldr	r3, [pc, #388]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f0      	beq.n	80039e8 <HAL_RCC_OscConfig+0xe8>
 8003a06:	e014      	b.n	8003a32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fd ff68 	bl	80018dc <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a10:	f7fd ff64 	bl	80018dc <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b64      	cmp	r3, #100	@ 0x64
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e20b      	b.n	8003e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a22:	4b57      	ldr	r3, [pc, #348]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f0      	bne.n	8003a10 <HAL_RCC_OscConfig+0x110>
 8003a2e:	e000      	b.n	8003a32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d069      	beq.n	8003b12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a3e:	4b50      	ldr	r3, [pc, #320]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 030c 	and.w	r3, r3, #12
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00b      	beq.n	8003a62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a4a:	4b4d      	ldr	r3, [pc, #308]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d11c      	bne.n	8003a90 <HAL_RCC_OscConfig+0x190>
 8003a56:	4b4a      	ldr	r3, [pc, #296]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d116      	bne.n	8003a90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a62:	4b47      	ldr	r3, [pc, #284]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d005      	beq.n	8003a7a <HAL_RCC_OscConfig+0x17a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d001      	beq.n	8003a7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e1df      	b.n	8003e3a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7a:	4b41      	ldr	r3, [pc, #260]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	493d      	ldr	r1, [pc, #244]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8e:	e040      	b.n	8003b12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d023      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a98:	4b39      	ldr	r3, [pc, #228]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a38      	ldr	r2, [pc, #224]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa4:	f7fd ff1a 	bl	80018dc <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aac:	f7fd ff16 	bl	80018dc <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e1bd      	b.n	8003e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003abe:	4b30      	ldr	r3, [pc, #192]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aca:	4b2d      	ldr	r3, [pc, #180]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4929      	ldr	r1, [pc, #164]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	600b      	str	r3, [r1, #0]
 8003ade:	e018      	b.n	8003b12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ae0:	4b27      	ldr	r3, [pc, #156]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a26      	ldr	r2, [pc, #152]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aec:	f7fd fef6 	bl	80018dc <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af4:	f7fd fef2 	bl	80018dc <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e199      	b.n	8003e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b06:	4b1e      	ldr	r3, [pc, #120]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d038      	beq.n	8003b90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d019      	beq.n	8003b5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b26:	4b16      	ldr	r3, [pc, #88]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b2a:	4a15      	ldr	r2, [pc, #84]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b32:	f7fd fed3 	bl	80018dc <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b3a:	f7fd fecf 	bl	80018dc <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e176      	b.n	8003e3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003b4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0f0      	beq.n	8003b3a <HAL_RCC_OscConfig+0x23a>
 8003b58:	e01a      	b.n	8003b90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b5a:	4b09      	ldr	r3, [pc, #36]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b5e:	4a08      	ldr	r2, [pc, #32]	@ (8003b80 <HAL_RCC_OscConfig+0x280>)
 8003b60:	f023 0301 	bic.w	r3, r3, #1
 8003b64:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b66:	f7fd feb9 	bl	80018dc <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b6c:	e00a      	b.n	8003b84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b6e:	f7fd feb5 	bl	80018dc <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d903      	bls.n	8003b84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e15c      	b.n	8003e3a <HAL_RCC_OscConfig+0x53a>
 8003b80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b84:	4b91      	ldr	r3, [pc, #580]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003b86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1ee      	bne.n	8003b6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 80a4 	beq.w	8003ce6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b9e:	4b8b      	ldr	r3, [pc, #556]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10d      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003baa:	4b88      	ldr	r3, [pc, #544]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bae:	4a87      	ldr	r2, [pc, #540]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bb6:	4b85      	ldr	r3, [pc, #532]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bc6:	4b82      	ldr	r3, [pc, #520]	@ (8003dd0 <HAL_RCC_OscConfig+0x4d0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d118      	bne.n	8003c04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003bd2:	4b7f      	ldr	r3, [pc, #508]	@ (8003dd0 <HAL_RCC_OscConfig+0x4d0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a7e      	ldr	r2, [pc, #504]	@ (8003dd0 <HAL_RCC_OscConfig+0x4d0>)
 8003bd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bde:	f7fd fe7d 	bl	80018dc <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be6:	f7fd fe79 	bl	80018dc <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b64      	cmp	r3, #100	@ 0x64
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e120      	b.n	8003e3a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bf8:	4b75      	ldr	r3, [pc, #468]	@ (8003dd0 <HAL_RCC_OscConfig+0x4d0>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0f0      	beq.n	8003be6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d106      	bne.n	8003c1a <HAL_RCC_OscConfig+0x31a>
 8003c0c:	4b6f      	ldr	r3, [pc, #444]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c10:	4a6e      	ldr	r2, [pc, #440]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c18:	e02d      	b.n	8003c76 <HAL_RCC_OscConfig+0x376>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10c      	bne.n	8003c3c <HAL_RCC_OscConfig+0x33c>
 8003c22:	4b6a      	ldr	r3, [pc, #424]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c26:	4a69      	ldr	r2, [pc, #420]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003c28:	f023 0301 	bic.w	r3, r3, #1
 8003c2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c2e:	4b67      	ldr	r3, [pc, #412]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c32:	4a66      	ldr	r2, [pc, #408]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003c34:	f023 0304 	bic.w	r3, r3, #4
 8003c38:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c3a:	e01c      	b.n	8003c76 <HAL_RCC_OscConfig+0x376>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b05      	cmp	r3, #5
 8003c42:	d10c      	bne.n	8003c5e <HAL_RCC_OscConfig+0x35e>
 8003c44:	4b61      	ldr	r3, [pc, #388]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c48:	4a60      	ldr	r2, [pc, #384]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003c4a:	f043 0304 	orr.w	r3, r3, #4
 8003c4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c50:	4b5e      	ldr	r3, [pc, #376]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c54:	4a5d      	ldr	r2, [pc, #372]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c5c:	e00b      	b.n	8003c76 <HAL_RCC_OscConfig+0x376>
 8003c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c62:	4a5a      	ldr	r2, [pc, #360]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003c64:	f023 0301 	bic.w	r3, r3, #1
 8003c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c6a:	4b58      	ldr	r3, [pc, #352]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6e:	4a57      	ldr	r2, [pc, #348]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003c70:	f023 0304 	bic.w	r3, r3, #4
 8003c74:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d015      	beq.n	8003caa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7e:	f7fd fe2d 	bl	80018dc <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c84:	e00a      	b.n	8003c9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c86:	f7fd fe29 	bl	80018dc <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e0ce      	b.n	8003e3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9c:	4b4b      	ldr	r3, [pc, #300]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0ee      	beq.n	8003c86 <HAL_RCC_OscConfig+0x386>
 8003ca8:	e014      	b.n	8003cd4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003caa:	f7fd fe17 	bl	80018dc <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb0:	e00a      	b.n	8003cc8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb2:	f7fd fe13 	bl	80018dc <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e0b8      	b.n	8003e3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc8:	4b40      	ldr	r3, [pc, #256]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1ee      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cd4:	7dfb      	ldrb	r3, [r7, #23]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d105      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cda:	4b3c      	ldr	r3, [pc, #240]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cde:	4a3b      	ldr	r2, [pc, #236]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003ce0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ce4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 80a4 	beq.w	8003e38 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cf0:	4b36      	ldr	r3, [pc, #216]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 030c 	and.w	r3, r3, #12
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d06b      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d149      	bne.n	8003d98 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d04:	4b31      	ldr	r3, [pc, #196]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a30      	ldr	r2, [pc, #192]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003d0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d10:	f7fd fde4 	bl	80018dc <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d18:	f7fd fde0 	bl	80018dc <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e087      	b.n	8003e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2a:	4b28      	ldr	r3, [pc, #160]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69da      	ldr	r2, [r3, #28]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d44:	019b      	lsls	r3, r3, #6
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4c:	085b      	lsrs	r3, r3, #1
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	041b      	lsls	r3, r3, #16
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d58:	061b      	lsls	r3, r3, #24
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003d5e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003d62:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d64:	4b19      	ldr	r3, [pc, #100]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a18      	ldr	r2, [pc, #96]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003d6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fd fdb4 	bl	80018dc <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d78:	f7fd fdb0 	bl	80018dc <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e057      	b.n	8003e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d8a:	4b10      	ldr	r3, [pc, #64]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x478>
 8003d96:	e04f      	b.n	8003e38 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d98:	4b0c      	ldr	r3, [pc, #48]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a0b      	ldr	r2, [pc, #44]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003d9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fd fd9a 	bl	80018dc <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dac:	f7fd fd96 	bl	80018dc <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e03d      	b.n	8003e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dbe:	4b03      	ldr	r3, [pc, #12]	@ (8003dcc <HAL_RCC_OscConfig+0x4cc>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x4ac>
 8003dca:	e035      	b.n	8003e38 <HAL_RCC_OscConfig+0x538>
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e44 <HAL_RCC_OscConfig+0x544>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d028      	beq.n	8003e34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d121      	bne.n	8003e34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d11a      	bne.n	8003e34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e04:	4013      	ands	r3, r2
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d111      	bne.n	8003e34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1a:	085b      	lsrs	r3, r3, #1
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d107      	bne.n	8003e34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e000      	b.n	8003e3a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40023800 	.word	0x40023800

08003e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0d0      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e60:	4b6a      	ldr	r3, [pc, #424]	@ (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d910      	bls.n	8003e90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6e:	4b67      	ldr	r3, [pc, #412]	@ (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f023 020f 	bic.w	r2, r3, #15
 8003e76:	4965      	ldr	r1, [pc, #404]	@ (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7e:	4b63      	ldr	r3, [pc, #396]	@ (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d001      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0b8      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d020      	beq.n	8003ede <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ea8:	4b59      	ldr	r3, [pc, #356]	@ (8004010 <HAL_RCC_ClockConfig+0x1c8>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	4a58      	ldr	r2, [pc, #352]	@ (8004010 <HAL_RCC_ClockConfig+0x1c8>)
 8003eae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003eb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d005      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ec0:	4b53      	ldr	r3, [pc, #332]	@ (8004010 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	4a52      	ldr	r2, [pc, #328]	@ (8004010 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003eca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ecc:	4b50      	ldr	r3, [pc, #320]	@ (8004010 <HAL_RCC_ClockConfig+0x1c8>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	494d      	ldr	r1, [pc, #308]	@ (8004010 <HAL_RCC_ClockConfig+0x1c8>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d040      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d107      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef2:	4b47      	ldr	r3, [pc, #284]	@ (8004010 <HAL_RCC_ClockConfig+0x1c8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d115      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e07f      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d107      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0a:	4b41      	ldr	r3, [pc, #260]	@ (8004010 <HAL_RCC_ClockConfig+0x1c8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e073      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f1a:	4b3d      	ldr	r3, [pc, #244]	@ (8004010 <HAL_RCC_ClockConfig+0x1c8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e06b      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f2a:	4b39      	ldr	r3, [pc, #228]	@ (8004010 <HAL_RCC_ClockConfig+0x1c8>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f023 0203 	bic.w	r2, r3, #3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	4936      	ldr	r1, [pc, #216]	@ (8004010 <HAL_RCC_ClockConfig+0x1c8>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f3c:	f7fd fcce 	bl	80018dc <HAL_GetTick>
 8003f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f42:	e00a      	b.n	8003f5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f44:	f7fd fcca 	bl	80018dc <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e053      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8004010 <HAL_RCC_ClockConfig+0x1c8>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 020c 	and.w	r2, r3, #12
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d1eb      	bne.n	8003f44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f6c:	4b27      	ldr	r3, [pc, #156]	@ (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d210      	bcs.n	8003f9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7a:	4b24      	ldr	r3, [pc, #144]	@ (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f023 020f 	bic.w	r2, r3, #15
 8003f82:	4922      	ldr	r1, [pc, #136]	@ (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8a:	4b20      	ldr	r3, [pc, #128]	@ (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e032      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d008      	beq.n	8003fba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa8:	4b19      	ldr	r3, [pc, #100]	@ (8004010 <HAL_RCC_ClockConfig+0x1c8>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	4916      	ldr	r1, [pc, #88]	@ (8004010 <HAL_RCC_ClockConfig+0x1c8>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fc6:	4b12      	ldr	r3, [pc, #72]	@ (8004010 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	490e      	ldr	r1, [pc, #56]	@ (8004010 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fda:	f000 f821 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8004010 <HAL_RCC_ClockConfig+0x1c8>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	091b      	lsrs	r3, r3, #4
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	490a      	ldr	r1, [pc, #40]	@ (8004014 <HAL_RCC_ClockConfig+0x1cc>)
 8003fec:	5ccb      	ldrb	r3, [r1, r3]
 8003fee:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff2:	4a09      	ldr	r2, [pc, #36]	@ (8004018 <HAL_RCC_ClockConfig+0x1d0>)
 8003ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ff6:	4b09      	ldr	r3, [pc, #36]	@ (800401c <HAL_RCC_ClockConfig+0x1d4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fd fc2a 	bl	8001854 <HAL_InitTick>

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40023c00 	.word	0x40023c00
 8004010:	40023800 	.word	0x40023800
 8004014:	0800aa84 	.word	0x0800aa84
 8004018:	20000270 	.word	0x20000270
 800401c:	20000274 	.word	0x20000274

08004020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004024:	b090      	sub	sp, #64	@ 0x40
 8004026:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004028:	2300      	movs	r3, #0
 800402a:	637b      	str	r3, [r7, #52]	@ 0x34
 800402c:	2300      	movs	r3, #0
 800402e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004030:	2300      	movs	r3, #0
 8004032:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004034:	2300      	movs	r3, #0
 8004036:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004038:	4b59      	ldr	r3, [pc, #356]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 030c 	and.w	r3, r3, #12
 8004040:	2b08      	cmp	r3, #8
 8004042:	d00d      	beq.n	8004060 <HAL_RCC_GetSysClockFreq+0x40>
 8004044:	2b08      	cmp	r3, #8
 8004046:	f200 80a1 	bhi.w	800418c <HAL_RCC_GetSysClockFreq+0x16c>
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <HAL_RCC_GetSysClockFreq+0x34>
 800404e:	2b04      	cmp	r3, #4
 8004050:	d003      	beq.n	800405a <HAL_RCC_GetSysClockFreq+0x3a>
 8004052:	e09b      	b.n	800418c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004054:	4b53      	ldr	r3, [pc, #332]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004056:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004058:	e09b      	b.n	8004192 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800405a:	4b53      	ldr	r3, [pc, #332]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800405c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800405e:	e098      	b.n	8004192 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004060:	4b4f      	ldr	r3, [pc, #316]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004068:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800406a:	4b4d      	ldr	r3, [pc, #308]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d028      	beq.n	80040c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004076:	4b4a      	ldr	r3, [pc, #296]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	099b      	lsrs	r3, r3, #6
 800407c:	2200      	movs	r2, #0
 800407e:	623b      	str	r3, [r7, #32]
 8004080:	627a      	str	r2, [r7, #36]	@ 0x24
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004088:	2100      	movs	r1, #0
 800408a:	4b47      	ldr	r3, [pc, #284]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800408c:	fb03 f201 	mul.w	r2, r3, r1
 8004090:	2300      	movs	r3, #0
 8004092:	fb00 f303 	mul.w	r3, r0, r3
 8004096:	4413      	add	r3, r2
 8004098:	4a43      	ldr	r2, [pc, #268]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800409a:	fba0 1202 	umull	r1, r2, r0, r2
 800409e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040a0:	460a      	mov	r2, r1
 80040a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80040a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040a6:	4413      	add	r3, r2
 80040a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ac:	2200      	movs	r2, #0
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	61fa      	str	r2, [r7, #28]
 80040b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80040ba:	f7fc f8ad 	bl	8000218 <__aeabi_uldivmod>
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	4613      	mov	r3, r2
 80040c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040c6:	e053      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040c8:	4b35      	ldr	r3, [pc, #212]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	099b      	lsrs	r3, r3, #6
 80040ce:	2200      	movs	r2, #0
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	617a      	str	r2, [r7, #20]
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040da:	f04f 0b00 	mov.w	fp, #0
 80040de:	4652      	mov	r2, sl
 80040e0:	465b      	mov	r3, fp
 80040e2:	f04f 0000 	mov.w	r0, #0
 80040e6:	f04f 0100 	mov.w	r1, #0
 80040ea:	0159      	lsls	r1, r3, #5
 80040ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040f0:	0150      	lsls	r0, r2, #5
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	ebb2 080a 	subs.w	r8, r2, sl
 80040fa:	eb63 090b 	sbc.w	r9, r3, fp
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800410a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800410e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004112:	ebb2 0408 	subs.w	r4, r2, r8
 8004116:	eb63 0509 	sbc.w	r5, r3, r9
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	00eb      	lsls	r3, r5, #3
 8004124:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004128:	00e2      	lsls	r2, r4, #3
 800412a:	4614      	mov	r4, r2
 800412c:	461d      	mov	r5, r3
 800412e:	eb14 030a 	adds.w	r3, r4, sl
 8004132:	603b      	str	r3, [r7, #0]
 8004134:	eb45 030b 	adc.w	r3, r5, fp
 8004138:	607b      	str	r3, [r7, #4]
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004146:	4629      	mov	r1, r5
 8004148:	028b      	lsls	r3, r1, #10
 800414a:	4621      	mov	r1, r4
 800414c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004150:	4621      	mov	r1, r4
 8004152:	028a      	lsls	r2, r1, #10
 8004154:	4610      	mov	r0, r2
 8004156:	4619      	mov	r1, r3
 8004158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800415a:	2200      	movs	r2, #0
 800415c:	60bb      	str	r3, [r7, #8]
 800415e:	60fa      	str	r2, [r7, #12]
 8004160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004164:	f7fc f858 	bl	8000218 <__aeabi_uldivmod>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4613      	mov	r3, r2
 800416e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004170:	4b0b      	ldr	r3, [pc, #44]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	0c1b      	lsrs	r3, r3, #16
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	3301      	adds	r3, #1
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004180:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004184:	fbb2 f3f3 	udiv	r3, r2, r3
 8004188:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800418a:	e002      	b.n	8004192 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800418c:	4b05      	ldr	r3, [pc, #20]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800418e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004190:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004194:	4618      	mov	r0, r3
 8004196:	3740      	adds	r7, #64	@ 0x40
 8004198:	46bd      	mov	sp, r7
 800419a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800419e:	bf00      	nop
 80041a0:	40023800 	.word	0x40023800
 80041a4:	00f42400 	.word	0x00f42400
 80041a8:	017d7840 	.word	0x017d7840

080041ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041b0:	4b03      	ldr	r3, [pc, #12]	@ (80041c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041b2:	681b      	ldr	r3, [r3, #0]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	20000270 	.word	0x20000270

080041c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041c8:	f7ff fff0 	bl	80041ac <HAL_RCC_GetHCLKFreq>
 80041cc:	4602      	mov	r2, r0
 80041ce:	4b05      	ldr	r3, [pc, #20]	@ (80041e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	0a9b      	lsrs	r3, r3, #10
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	4903      	ldr	r1, [pc, #12]	@ (80041e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041da:	5ccb      	ldrb	r3, [r1, r3]
 80041dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40023800 	.word	0x40023800
 80041e8:	0800aa94 	.word	0x0800aa94

080041ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041f0:	f7ff ffdc 	bl	80041ac <HAL_RCC_GetHCLKFreq>
 80041f4:	4602      	mov	r2, r0
 80041f6:	4b05      	ldr	r3, [pc, #20]	@ (800420c <HAL_RCC_GetPCLK2Freq+0x20>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	0b5b      	lsrs	r3, r3, #13
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	4903      	ldr	r1, [pc, #12]	@ (8004210 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004202:	5ccb      	ldrb	r3, [r1, r3]
 8004204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004208:	4618      	mov	r0, r3
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40023800 	.word	0x40023800
 8004210:	0800aa94 	.word	0x0800aa94

08004214 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800421c:	2300      	movs	r3, #0
 800421e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004220:	2300      	movs	r3, #0
 8004222:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004228:	2300      	movs	r3, #0
 800422a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	d012      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800423c:	4b69      	ldr	r3, [pc, #420]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	4a68      	ldr	r2, [pc, #416]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004242:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004246:	6093      	str	r3, [r2, #8]
 8004248:	4b66      	ldr	r3, [pc, #408]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004250:	4964      	ldr	r1, [pc, #400]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004252:	4313      	orrs	r3, r2
 8004254:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800425e:	2301      	movs	r3, #1
 8004260:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d017      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800426e:	4b5d      	ldr	r3, [pc, #372]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004270:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004274:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427c:	4959      	ldr	r1, [pc, #356]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004288:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800428c:	d101      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800428e:	2301      	movs	r3, #1
 8004290:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800429a:	2301      	movs	r3, #1
 800429c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d017      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042aa:	4b4e      	ldr	r3, [pc, #312]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042b0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b8:	494a      	ldr	r1, [pc, #296]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042c8:	d101      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80042ca:	2301      	movs	r3, #1
 80042cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80042d6:	2301      	movs	r3, #1
 80042d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80042e6:	2301      	movs	r3, #1
 80042e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 808b 	beq.w	800440e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042f8:	4b3a      	ldr	r3, [pc, #232]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fc:	4a39      	ldr	r2, [pc, #228]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004302:	6413      	str	r3, [r2, #64]	@ 0x40
 8004304:	4b37      	ldr	r3, [pc, #220]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800430c:	60bb      	str	r3, [r7, #8]
 800430e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004310:	4b35      	ldr	r3, [pc, #212]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a34      	ldr	r2, [pc, #208]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004316:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800431a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800431c:	f7fd fade 	bl	80018dc <HAL_GetTick>
 8004320:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004324:	f7fd fada 	bl	80018dc <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b64      	cmp	r3, #100	@ 0x64
 8004330:	d901      	bls.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e357      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004336:	4b2c      	ldr	r3, [pc, #176]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0f0      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004342:	4b28      	ldr	r3, [pc, #160]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004346:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800434a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d035      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004356:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	429a      	cmp	r2, r3
 800435e:	d02e      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004360:	4b20      	ldr	r3, [pc, #128]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004364:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004368:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800436a:	4b1e      	ldr	r3, [pc, #120]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800436c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800436e:	4a1d      	ldr	r2, [pc, #116]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004374:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004376:	4b1b      	ldr	r3, [pc, #108]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800437a:	4a1a      	ldr	r2, [pc, #104]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004380:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004382:	4a18      	ldr	r2, [pc, #96]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004388:	4b16      	ldr	r3, [pc, #88]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b01      	cmp	r3, #1
 8004392:	d114      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004394:	f7fd faa2 	bl	80018dc <HAL_GetTick>
 8004398:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439a:	e00a      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800439c:	f7fd fa9e 	bl	80018dc <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e319      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b2:	4b0c      	ldr	r3, [pc, #48]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0ee      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043ca:	d111      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80043cc:	4b05      	ldr	r3, [pc, #20]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80043d8:	4b04      	ldr	r3, [pc, #16]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80043da:	400b      	ands	r3, r1
 80043dc:	4901      	ldr	r1, [pc, #4]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	608b      	str	r3, [r1, #8]
 80043e2:	e00b      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80043e4:	40023800 	.word	0x40023800
 80043e8:	40007000 	.word	0x40007000
 80043ec:	0ffffcff 	.word	0x0ffffcff
 80043f0:	4baa      	ldr	r3, [pc, #680]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	4aa9      	ldr	r2, [pc, #676]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043f6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80043fa:	6093      	str	r3, [r2, #8]
 80043fc:	4ba7      	ldr	r3, [pc, #668]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004408:	49a4      	ldr	r1, [pc, #656]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800440a:	4313      	orrs	r3, r2
 800440c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	2b00      	cmp	r3, #0
 8004418:	d010      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800441a:	4ba0      	ldr	r3, [pc, #640]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800441c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004420:	4a9e      	ldr	r2, [pc, #632]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004422:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004426:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800442a:	4b9c      	ldr	r3, [pc, #624]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800442c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004434:	4999      	ldr	r1, [pc, #612]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00a      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004448:	4b94      	ldr	r3, [pc, #592]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800444a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800444e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004456:	4991      	ldr	r1, [pc, #580]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00a      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800446a:	4b8c      	ldr	r3, [pc, #560]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800446c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004470:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004478:	4988      	ldr	r1, [pc, #544]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800447a:	4313      	orrs	r3, r2
 800447c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00a      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800448c:	4b83      	ldr	r3, [pc, #524]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004492:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800449a:	4980      	ldr	r1, [pc, #512]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800449c:	4313      	orrs	r3, r2
 800449e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00a      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044ae:	4b7b      	ldr	r3, [pc, #492]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044bc:	4977      	ldr	r1, [pc, #476]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00a      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044d0:	4b72      	ldr	r3, [pc, #456]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d6:	f023 0203 	bic.w	r2, r3, #3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044de:	496f      	ldr	r1, [pc, #444]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044f2:	4b6a      	ldr	r3, [pc, #424]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f8:	f023 020c 	bic.w	r2, r3, #12
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004500:	4966      	ldr	r1, [pc, #408]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00a      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004514:	4b61      	ldr	r3, [pc, #388]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800451a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004522:	495e      	ldr	r1, [pc, #376]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004524:	4313      	orrs	r3, r2
 8004526:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004536:	4b59      	ldr	r3, [pc, #356]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004544:	4955      	ldr	r1, [pc, #340]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004546:	4313      	orrs	r3, r2
 8004548:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004558:	4b50      	ldr	r3, [pc, #320]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800455e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004566:	494d      	ldr	r1, [pc, #308]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800457a:	4b48      	ldr	r3, [pc, #288]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800457c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004580:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004588:	4944      	ldr	r1, [pc, #272]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800459c:	4b3f      	ldr	r3, [pc, #252]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045aa:	493c      	ldr	r1, [pc, #240]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80045be:	4b37      	ldr	r3, [pc, #220]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045cc:	4933      	ldr	r1, [pc, #204]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045e0:	4b2e      	ldr	r3, [pc, #184]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045ee:	492b      	ldr	r1, [pc, #172]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d011      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004602:	4b26      	ldr	r3, [pc, #152]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004608:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004610:	4922      	ldr	r1, [pc, #136]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800461c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004620:	d101      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004622:	2301      	movs	r3, #1
 8004624:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004632:	2301      	movs	r3, #1
 8004634:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004642:	4b16      	ldr	r3, [pc, #88]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004648:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004650:	4912      	ldr	r1, [pc, #72]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00b      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004664:	4b0d      	ldr	r3, [pc, #52]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800466a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004674:	4909      	ldr	r1, [pc, #36]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004676:	4313      	orrs	r3, r2
 8004678:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d006      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 80d9 	beq.w	8004842 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004690:	4b02      	ldr	r3, [pc, #8]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a01      	ldr	r2, [pc, #4]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004696:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800469a:	e001      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800469c:	40023800 	.word	0x40023800
 80046a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a2:	f7fd f91b 	bl	80018dc <HAL_GetTick>
 80046a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046a8:	e008      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046aa:	f7fd f917 	bl	80018dc <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b64      	cmp	r3, #100	@ 0x64
 80046b6:	d901      	bls.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e194      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046bc:	4b6c      	ldr	r3, [pc, #432]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1f0      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d021      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d11d      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046dc:	4b64      	ldr	r3, [pc, #400]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046e2:	0c1b      	lsrs	r3, r3, #16
 80046e4:	f003 0303 	and.w	r3, r3, #3
 80046e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046ea:	4b61      	ldr	r3, [pc, #388]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046f0:	0e1b      	lsrs	r3, r3, #24
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	019a      	lsls	r2, r3, #6
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	041b      	lsls	r3, r3, #16
 8004702:	431a      	orrs	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	061b      	lsls	r3, r3, #24
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	071b      	lsls	r3, r3, #28
 8004710:	4957      	ldr	r1, [pc, #348]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d004      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004728:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800472c:	d00a      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004736:	2b00      	cmp	r3, #0
 8004738:	d02e      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004742:	d129      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004744:	4b4a      	ldr	r3, [pc, #296]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004746:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800474a:	0c1b      	lsrs	r3, r3, #16
 800474c:	f003 0303 	and.w	r3, r3, #3
 8004750:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004752:	4b47      	ldr	r3, [pc, #284]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004754:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004758:	0f1b      	lsrs	r3, r3, #28
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	019a      	lsls	r2, r3, #6
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	041b      	lsls	r3, r3, #16
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	061b      	lsls	r3, r3, #24
 8004772:	431a      	orrs	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	071b      	lsls	r3, r3, #28
 8004778:	493d      	ldr	r1, [pc, #244]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004780:	4b3b      	ldr	r3, [pc, #236]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004782:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004786:	f023 021f 	bic.w	r2, r3, #31
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478e:	3b01      	subs	r3, #1
 8004790:	4937      	ldr	r1, [pc, #220]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d01d      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047a4:	4b32      	ldr	r3, [pc, #200]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047aa:	0e1b      	lsrs	r3, r3, #24
 80047ac:	f003 030f 	and.w	r3, r3, #15
 80047b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047b8:	0f1b      	lsrs	r3, r3, #28
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	019a      	lsls	r2, r3, #6
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	041b      	lsls	r3, r3, #16
 80047cc:	431a      	orrs	r2, r3
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	061b      	lsls	r3, r3, #24
 80047d2:	431a      	orrs	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	071b      	lsls	r3, r3, #28
 80047d8:	4925      	ldr	r1, [pc, #148]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d011      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	019a      	lsls	r2, r3, #6
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	041b      	lsls	r3, r3, #16
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	061b      	lsls	r3, r3, #24
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	071b      	lsls	r3, r3, #28
 8004808:	4919      	ldr	r1, [pc, #100]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004810:	4b17      	ldr	r3, [pc, #92]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a16      	ldr	r2, [pc, #88]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004816:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800481a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800481c:	f7fd f85e 	bl	80018dc <HAL_GetTick>
 8004820:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004824:	f7fd f85a 	bl	80018dc <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b64      	cmp	r3, #100	@ 0x64
 8004830:	d901      	bls.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e0d7      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004836:	4b0e      	ldr	r3, [pc, #56]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0f0      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	2b01      	cmp	r3, #1
 8004846:	f040 80cd 	bne.w	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800484a:	4b09      	ldr	r3, [pc, #36]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a08      	ldr	r2, [pc, #32]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004850:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004856:	f7fd f841 	bl	80018dc <HAL_GetTick>
 800485a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800485c:	e00a      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800485e:	f7fd f83d 	bl	80018dc <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b64      	cmp	r3, #100	@ 0x64
 800486a:	d903      	bls.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e0ba      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004870:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004874:	4b5e      	ldr	r3, [pc, #376]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800487c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004880:	d0ed      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004892:	2b00      	cmp	r3, #0
 8004894:	d009      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d02e      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d12a      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048aa:	4b51      	ldr	r3, [pc, #324]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b0:	0c1b      	lsrs	r3, r3, #16
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048b8:	4b4d      	ldr	r3, [pc, #308]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048be:	0f1b      	lsrs	r3, r3, #28
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	019a      	lsls	r2, r3, #6
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	041b      	lsls	r3, r3, #16
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	061b      	lsls	r3, r3, #24
 80048d8:	431a      	orrs	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	071b      	lsls	r3, r3, #28
 80048de:	4944      	ldr	r1, [pc, #272]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80048e6:	4b42      	ldr	r3, [pc, #264]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048ec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f4:	3b01      	subs	r3, #1
 80048f6:	021b      	lsls	r3, r3, #8
 80048f8:	493d      	ldr	r1, [pc, #244]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d022      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004910:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004914:	d11d      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004916:	4b36      	ldr	r3, [pc, #216]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491c:	0e1b      	lsrs	r3, r3, #24
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004924:	4b32      	ldr	r3, [pc, #200]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800492a:	0f1b      	lsrs	r3, r3, #28
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	019a      	lsls	r2, r3, #6
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	041b      	lsls	r3, r3, #16
 800493e:	431a      	orrs	r2, r3
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	061b      	lsls	r3, r3, #24
 8004944:	431a      	orrs	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	071b      	lsls	r3, r3, #28
 800494a:	4929      	ldr	r1, [pc, #164]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d028      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800495e:	4b24      	ldr	r3, [pc, #144]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004964:	0e1b      	lsrs	r3, r3, #24
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800496c:	4b20      	ldr	r3, [pc, #128]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004972:	0c1b      	lsrs	r3, r3, #16
 8004974:	f003 0303 	and.w	r3, r3, #3
 8004978:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	019a      	lsls	r2, r3, #6
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	041b      	lsls	r3, r3, #16
 8004984:	431a      	orrs	r2, r3
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	061b      	lsls	r3, r3, #24
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	071b      	lsls	r3, r3, #28
 8004992:	4917      	ldr	r1, [pc, #92]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800499a:	4b15      	ldr	r3, [pc, #84]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800499c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a8:	4911      	ldr	r1, [pc, #68]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80049b0:	4b0f      	ldr	r3, [pc, #60]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a0e      	ldr	r2, [pc, #56]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049bc:	f7fc ff8e 	bl	80018dc <HAL_GetTick>
 80049c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049c2:	e008      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049c4:	f7fc ff8a 	bl	80018dc <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b64      	cmp	r3, #100	@ 0x64
 80049d0:	d901      	bls.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e007      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049d6:	4b06      	ldr	r3, [pc, #24]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049e2:	d1ef      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3720      	adds	r7, #32
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	40023800 	.word	0x40023800

080049f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e049      	b.n	8004a9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7fc fdd8 	bl	80015d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3304      	adds	r3, #4
 8004a30:	4619      	mov	r1, r3
 8004a32:	4610      	mov	r0, r2
 8004a34:	f000 fad6 	bl	8004fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d001      	beq.n	8004abc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e054      	b.n	8004b66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0201 	orr.w	r2, r2, #1
 8004ad2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a26      	ldr	r2, [pc, #152]	@ (8004b74 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d022      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ae6:	d01d      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a22      	ldr	r2, [pc, #136]	@ (8004b78 <HAL_TIM_Base_Start_IT+0xd4>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d018      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a21      	ldr	r2, [pc, #132]	@ (8004b7c <HAL_TIM_Base_Start_IT+0xd8>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d013      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a1f      	ldr	r2, [pc, #124]	@ (8004b80 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00e      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004b84 <HAL_TIM_Base_Start_IT+0xe0>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d009      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a1c      	ldr	r2, [pc, #112]	@ (8004b88 <HAL_TIM_Base_Start_IT+0xe4>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d004      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8004b8c <HAL_TIM_Base_Start_IT+0xe8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d115      	bne.n	8004b50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689a      	ldr	r2, [r3, #8]
 8004b2a:	4b19      	ldr	r3, [pc, #100]	@ (8004b90 <HAL_TIM_Base_Start_IT+0xec>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2b06      	cmp	r3, #6
 8004b34:	d015      	beq.n	8004b62 <HAL_TIM_Base_Start_IT+0xbe>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b3c:	d011      	beq.n	8004b62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 0201 	orr.w	r2, r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4e:	e008      	b.n	8004b62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0201 	orr.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	e000      	b.n	8004b64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40010000 	.word	0x40010000
 8004b78:	40000400 	.word	0x40000400
 8004b7c:	40000800 	.word	0x40000800
 8004b80:	40000c00 	.word	0x40000c00
 8004b84:	40010400 	.word	0x40010400
 8004b88:	40014000 	.word	0x40014000
 8004b8c:	40001800 	.word	0x40001800
 8004b90:	00010007 	.word	0x00010007

08004b94 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0201 	bic.w	r2, r2, #1
 8004baa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6a1a      	ldr	r2, [r3, #32]
 8004bb2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10f      	bne.n	8004bdc <HAL_TIM_Base_Stop_IT+0x48>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6a1a      	ldr	r2, [r3, #32]
 8004bc2:	f240 4344 	movw	r3, #1092	@ 0x444
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d107      	bne.n	8004bdc <HAL_TIM_Base_Stop_IT+0x48>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0201 	bic.w	r2, r2, #1
 8004bda:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d020      	beq.n	8004c56 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d01b      	beq.n	8004c56 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f06f 0202 	mvn.w	r2, #2
 8004c26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	f003 0303 	and.w	r3, r3, #3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f9b3 	bl	8004fa8 <HAL_TIM_IC_CaptureCallback>
 8004c42:	e005      	b.n	8004c50 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f9a5 	bl	8004f94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f9b6 	bl	8004fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d020      	beq.n	8004ca2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d01b      	beq.n	8004ca2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f06f 0204 	mvn.w	r2, #4
 8004c72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f98d 	bl	8004fa8 <HAL_TIM_IC_CaptureCallback>
 8004c8e:	e005      	b.n	8004c9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f97f 	bl	8004f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f990 	bl	8004fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d020      	beq.n	8004cee <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d01b      	beq.n	8004cee <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f06f 0208 	mvn.w	r2, #8
 8004cbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2204      	movs	r2, #4
 8004cc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	f003 0303 	and.w	r3, r3, #3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f967 	bl	8004fa8 <HAL_TIM_IC_CaptureCallback>
 8004cda:	e005      	b.n	8004ce8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f959 	bl	8004f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f96a 	bl	8004fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d020      	beq.n	8004d3a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f003 0310 	and.w	r3, r3, #16
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d01b      	beq.n	8004d3a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f06f 0210 	mvn.w	r2, #16
 8004d0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2208      	movs	r2, #8
 8004d10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f941 	bl	8004fa8 <HAL_TIM_IC_CaptureCallback>
 8004d26:	e005      	b.n	8004d34 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f933 	bl	8004f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f944 	bl	8004fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00c      	beq.n	8004d5e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d007      	beq.n	8004d5e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f06f 0201 	mvn.w	r2, #1
 8004d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7fb ff63 	bl	8000c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d104      	bne.n	8004d72 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00c      	beq.n	8004d8c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d007      	beq.n	8004d8c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 fb0a 	bl	80053a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00c      	beq.n	8004db0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d007      	beq.n	8004db0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fb02 	bl	80053b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00c      	beq.n	8004dd4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d007      	beq.n	8004dd4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f8fe 	bl	8004fd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f003 0320 	and.w	r3, r3, #32
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00c      	beq.n	8004df8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f003 0320 	and.w	r3, r3, #32
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d007      	beq.n	8004df8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f06f 0220 	mvn.w	r2, #32
 8004df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 faca 	bl	800538c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004df8:	bf00      	nop
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d101      	bne.n	8004e1c <HAL_TIM_ConfigClockSource+0x1c>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e0b4      	b.n	8004f86 <HAL_TIM_ConfigClockSource+0x186>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	4b56      	ldr	r3, [pc, #344]	@ (8004f90 <HAL_TIM_ConfigClockSource+0x190>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e54:	d03e      	beq.n	8004ed4 <HAL_TIM_ConfigClockSource+0xd4>
 8004e56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e5a:	f200 8087 	bhi.w	8004f6c <HAL_TIM_ConfigClockSource+0x16c>
 8004e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e62:	f000 8086 	beq.w	8004f72 <HAL_TIM_ConfigClockSource+0x172>
 8004e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e6a:	d87f      	bhi.n	8004f6c <HAL_TIM_ConfigClockSource+0x16c>
 8004e6c:	2b70      	cmp	r3, #112	@ 0x70
 8004e6e:	d01a      	beq.n	8004ea6 <HAL_TIM_ConfigClockSource+0xa6>
 8004e70:	2b70      	cmp	r3, #112	@ 0x70
 8004e72:	d87b      	bhi.n	8004f6c <HAL_TIM_ConfigClockSource+0x16c>
 8004e74:	2b60      	cmp	r3, #96	@ 0x60
 8004e76:	d050      	beq.n	8004f1a <HAL_TIM_ConfigClockSource+0x11a>
 8004e78:	2b60      	cmp	r3, #96	@ 0x60
 8004e7a:	d877      	bhi.n	8004f6c <HAL_TIM_ConfigClockSource+0x16c>
 8004e7c:	2b50      	cmp	r3, #80	@ 0x50
 8004e7e:	d03c      	beq.n	8004efa <HAL_TIM_ConfigClockSource+0xfa>
 8004e80:	2b50      	cmp	r3, #80	@ 0x50
 8004e82:	d873      	bhi.n	8004f6c <HAL_TIM_ConfigClockSource+0x16c>
 8004e84:	2b40      	cmp	r3, #64	@ 0x40
 8004e86:	d058      	beq.n	8004f3a <HAL_TIM_ConfigClockSource+0x13a>
 8004e88:	2b40      	cmp	r3, #64	@ 0x40
 8004e8a:	d86f      	bhi.n	8004f6c <HAL_TIM_ConfigClockSource+0x16c>
 8004e8c:	2b30      	cmp	r3, #48	@ 0x30
 8004e8e:	d064      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0x15a>
 8004e90:	2b30      	cmp	r3, #48	@ 0x30
 8004e92:	d86b      	bhi.n	8004f6c <HAL_TIM_ConfigClockSource+0x16c>
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	d060      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0x15a>
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d867      	bhi.n	8004f6c <HAL_TIM_ConfigClockSource+0x16c>
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d05c      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0x15a>
 8004ea0:	2b10      	cmp	r3, #16
 8004ea2:	d05a      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0x15a>
 8004ea4:	e062      	b.n	8004f6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004eb6:	f000 f9bb 	bl	8005230 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ec8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	609a      	str	r2, [r3, #8]
      break;
 8004ed2:	e04f      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ee4:	f000 f9a4 	bl	8005230 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ef6:	609a      	str	r2, [r3, #8]
      break;
 8004ef8:	e03c      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f06:	461a      	mov	r2, r3
 8004f08:	f000 f918 	bl	800513c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2150      	movs	r1, #80	@ 0x50
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 f971 	bl	80051fa <TIM_ITRx_SetConfig>
      break;
 8004f18:	e02c      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f26:	461a      	mov	r2, r3
 8004f28:	f000 f937 	bl	800519a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2160      	movs	r1, #96	@ 0x60
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 f961 	bl	80051fa <TIM_ITRx_SetConfig>
      break;
 8004f38:	e01c      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f46:	461a      	mov	r2, r3
 8004f48:	f000 f8f8 	bl	800513c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2140      	movs	r1, #64	@ 0x40
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 f951 	bl	80051fa <TIM_ITRx_SetConfig>
      break;
 8004f58:	e00c      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4619      	mov	r1, r3
 8004f64:	4610      	mov	r0, r2
 8004f66:	f000 f948 	bl	80051fa <TIM_ITRx_SetConfig>
      break;
 8004f6a:	e003      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f70:	e000      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	fffeff88 	.word	0xfffeff88

08004f94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a46      	ldr	r2, [pc, #280]	@ (8005110 <TIM_Base_SetConfig+0x12c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d013      	beq.n	8005024 <TIM_Base_SetConfig+0x40>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005002:	d00f      	beq.n	8005024 <TIM_Base_SetConfig+0x40>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a43      	ldr	r2, [pc, #268]	@ (8005114 <TIM_Base_SetConfig+0x130>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00b      	beq.n	8005024 <TIM_Base_SetConfig+0x40>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a42      	ldr	r2, [pc, #264]	@ (8005118 <TIM_Base_SetConfig+0x134>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d007      	beq.n	8005024 <TIM_Base_SetConfig+0x40>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a41      	ldr	r2, [pc, #260]	@ (800511c <TIM_Base_SetConfig+0x138>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_Base_SetConfig+0x40>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a40      	ldr	r2, [pc, #256]	@ (8005120 <TIM_Base_SetConfig+0x13c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d108      	bne.n	8005036 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800502a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a35      	ldr	r2, [pc, #212]	@ (8005110 <TIM_Base_SetConfig+0x12c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d02b      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005044:	d027      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a32      	ldr	r2, [pc, #200]	@ (8005114 <TIM_Base_SetConfig+0x130>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d023      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a31      	ldr	r2, [pc, #196]	@ (8005118 <TIM_Base_SetConfig+0x134>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d01f      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a30      	ldr	r2, [pc, #192]	@ (800511c <TIM_Base_SetConfig+0x138>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d01b      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a2f      	ldr	r2, [pc, #188]	@ (8005120 <TIM_Base_SetConfig+0x13c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d017      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a2e      	ldr	r2, [pc, #184]	@ (8005124 <TIM_Base_SetConfig+0x140>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d013      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a2d      	ldr	r2, [pc, #180]	@ (8005128 <TIM_Base_SetConfig+0x144>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d00f      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a2c      	ldr	r2, [pc, #176]	@ (800512c <TIM_Base_SetConfig+0x148>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00b      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a2b      	ldr	r2, [pc, #172]	@ (8005130 <TIM_Base_SetConfig+0x14c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d007      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a2a      	ldr	r2, [pc, #168]	@ (8005134 <TIM_Base_SetConfig+0x150>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d003      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a29      	ldr	r2, [pc, #164]	@ (8005138 <TIM_Base_SetConfig+0x154>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d108      	bne.n	80050a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800509c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a10      	ldr	r2, [pc, #64]	@ (8005110 <TIM_Base_SetConfig+0x12c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <TIM_Base_SetConfig+0xf8>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a12      	ldr	r2, [pc, #72]	@ (8005120 <TIM_Base_SetConfig+0x13c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d103      	bne.n	80050e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d105      	bne.n	8005102 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f023 0201 	bic.w	r2, r3, #1
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	611a      	str	r2, [r3, #16]
  }
}
 8005102:	bf00      	nop
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	40010000 	.word	0x40010000
 8005114:	40000400 	.word	0x40000400
 8005118:	40000800 	.word	0x40000800
 800511c:	40000c00 	.word	0x40000c00
 8005120:	40010400 	.word	0x40010400
 8005124:	40014000 	.word	0x40014000
 8005128:	40014400 	.word	0x40014400
 800512c:	40014800 	.word	0x40014800
 8005130:	40001800 	.word	0x40001800
 8005134:	40001c00 	.word	0x40001c00
 8005138:	40002000 	.word	0x40002000

0800513c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	f023 0201 	bic.w	r2, r3, #1
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f023 030a 	bic.w	r3, r3, #10
 8005178:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	621a      	str	r2, [r3, #32]
}
 800518e:	bf00      	nop
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800519a:	b480      	push	{r7}
 800519c:	b087      	sub	sp, #28
 800519e:	af00      	add	r7, sp, #0
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	f023 0210 	bic.w	r2, r3, #16
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	031b      	lsls	r3, r3, #12
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	621a      	str	r2, [r3, #32]
}
 80051ee:	bf00      	nop
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b085      	sub	sp, #20
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005210:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	f043 0307 	orr.w	r3, r3, #7
 800521c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	609a      	str	r2, [r3, #8]
}
 8005224:	bf00      	nop
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800524a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	021a      	lsls	r2, r3, #8
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	431a      	orrs	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4313      	orrs	r3, r2
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	4313      	orrs	r3, r2
 800525c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	609a      	str	r2, [r3, #8]
}
 8005264:	bf00      	nop
 8005266:	371c      	adds	r7, #28
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005280:	2b01      	cmp	r3, #1
 8005282:	d101      	bne.n	8005288 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005284:	2302      	movs	r3, #2
 8005286:	e06d      	b.n	8005364 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a30      	ldr	r2, [pc, #192]	@ (8005370 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d004      	beq.n	80052bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a2f      	ldr	r2, [pc, #188]	@ (8005374 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d108      	bne.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80052c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4313      	orrs	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a20      	ldr	r2, [pc, #128]	@ (8005370 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d022      	beq.n	8005338 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052fa:	d01d      	beq.n	8005338 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a1d      	ldr	r2, [pc, #116]	@ (8005378 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d018      	beq.n	8005338 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a1c      	ldr	r2, [pc, #112]	@ (800537c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d013      	beq.n	8005338 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a1a      	ldr	r2, [pc, #104]	@ (8005380 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00e      	beq.n	8005338 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a15      	ldr	r2, [pc, #84]	@ (8005374 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d009      	beq.n	8005338 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a16      	ldr	r2, [pc, #88]	@ (8005384 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d004      	beq.n	8005338 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a15      	ldr	r2, [pc, #84]	@ (8005388 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d10c      	bne.n	8005352 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800533e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	4313      	orrs	r3, r2
 8005348:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	40010000 	.word	0x40010000
 8005374:	40010400 	.word	0x40010400
 8005378:	40000400 	.word	0x40000400
 800537c:	40000800 	.word	0x40000800
 8005380:	40000c00 	.word	0x40000c00
 8005384:	40014000 	.word	0x40014000
 8005388:	40001800 	.word	0x40001800

0800538c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e040      	b.n	800545c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d106      	bne.n	80053f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7fc f994 	bl	8001718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2224      	movs	r2, #36	@ 0x24
 80053f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 0201 	bic.w	r2, r2, #1
 8005404:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fee4 	bl	80061dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fc7d 	bl	8005d14 <UART_SetConfig>
 800541a:	4603      	mov	r3, r0
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e01b      	b.n	800545c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005432:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005442:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 0201 	orr.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 ff63 	bl	8006320 <UART_CheckIdleState>
 800545a:	4603      	mov	r3, r0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08a      	sub	sp, #40	@ 0x28
 8005468:	af02      	add	r7, sp, #8
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	603b      	str	r3, [r7, #0]
 8005470:	4613      	mov	r3, r2
 8005472:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005478:	2b20      	cmp	r3, #32
 800547a:	d177      	bne.n	800556c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d002      	beq.n	8005488 <HAL_UART_Transmit+0x24>
 8005482:	88fb      	ldrh	r3, [r7, #6]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e070      	b.n	800556e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2221      	movs	r2, #33	@ 0x21
 8005498:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800549a:	f7fc fa1f 	bl	80018dc <HAL_GetTick>
 800549e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	88fa      	ldrh	r2, [r7, #6]
 80054a4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	88fa      	ldrh	r2, [r7, #6]
 80054ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054b8:	d108      	bne.n	80054cc <HAL_UART_Transmit+0x68>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d104      	bne.n	80054cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80054c2:	2300      	movs	r3, #0
 80054c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	61bb      	str	r3, [r7, #24]
 80054ca:	e003      	b.n	80054d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054d0:	2300      	movs	r3, #0
 80054d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054d4:	e02f      	b.n	8005536 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2200      	movs	r2, #0
 80054de:	2180      	movs	r1, #128	@ 0x80
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 ff74 	bl	80063ce <UART_WaitOnFlagUntilTimeout>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d004      	beq.n	80054f6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2220      	movs	r2, #32
 80054f0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e03b      	b.n	800556e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10b      	bne.n	8005514 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	461a      	mov	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800550a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	3302      	adds	r3, #2
 8005510:	61bb      	str	r3, [r7, #24]
 8005512:	e007      	b.n	8005524 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	781a      	ldrb	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	3301      	adds	r3, #1
 8005522:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800552a:	b29b      	uxth	r3, r3
 800552c:	3b01      	subs	r3, #1
 800552e:	b29a      	uxth	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800553c:	b29b      	uxth	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1c9      	bne.n	80054d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2200      	movs	r2, #0
 800554a:	2140      	movs	r1, #64	@ 0x40
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f000 ff3e 	bl	80063ce <UART_WaitOnFlagUntilTimeout>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d004      	beq.n	8005562 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2220      	movs	r2, #32
 800555c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e005      	b.n	800556e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2220      	movs	r2, #32
 8005566:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	e000      	b.n	800556e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800556c:	2302      	movs	r3, #2
  }
}
 800556e:	4618      	mov	r0, r3
 8005570:	3720      	adds	r7, #32
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b08a      	sub	sp, #40	@ 0x28
 800557a:	af02      	add	r7, sp, #8
 800557c:	60f8      	str	r0, [r7, #12]
 800557e:	60b9      	str	r1, [r7, #8]
 8005580:	603b      	str	r3, [r7, #0]
 8005582:	4613      	mov	r3, r2
 8005584:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800558c:	2b20      	cmp	r3, #32
 800558e:	f040 80b5 	bne.w	80056fc <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <HAL_UART_Receive+0x28>
 8005598:	88fb      	ldrh	r3, [r7, #6]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e0ad      	b.n	80056fe <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2222      	movs	r2, #34	@ 0x22
 80055ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055b8:	f7fc f990 	bl	80018dc <HAL_GetTick>
 80055bc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	88fa      	ldrh	r2, [r7, #6]
 80055c2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	88fa      	ldrh	r2, [r7, #6]
 80055ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055d6:	d10e      	bne.n	80055f6 <HAL_UART_Receive+0x80>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d105      	bne.n	80055ec <HAL_UART_Receive+0x76>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80055e6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80055ea:	e02d      	b.n	8005648 <HAL_UART_Receive+0xd2>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	22ff      	movs	r2, #255	@ 0xff
 80055f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80055f4:	e028      	b.n	8005648 <HAL_UART_Receive+0xd2>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10d      	bne.n	800561a <HAL_UART_Receive+0xa4>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d104      	bne.n	8005610 <HAL_UART_Receive+0x9a>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	22ff      	movs	r2, #255	@ 0xff
 800560a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800560e:	e01b      	b.n	8005648 <HAL_UART_Receive+0xd2>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	227f      	movs	r2, #127	@ 0x7f
 8005614:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005618:	e016      	b.n	8005648 <HAL_UART_Receive+0xd2>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005622:	d10d      	bne.n	8005640 <HAL_UART_Receive+0xca>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d104      	bne.n	8005636 <HAL_UART_Receive+0xc0>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	227f      	movs	r2, #127	@ 0x7f
 8005630:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005634:	e008      	b.n	8005648 <HAL_UART_Receive+0xd2>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	223f      	movs	r2, #63	@ 0x3f
 800563a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800563e:	e003      	b.n	8005648 <HAL_UART_Receive+0xd2>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800564e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005658:	d108      	bne.n	800566c <HAL_UART_Receive+0xf6>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d104      	bne.n	800566c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005662:	2300      	movs	r3, #0
 8005664:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	61bb      	str	r3, [r7, #24]
 800566a:	e003      	b.n	8005674 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005670:	2300      	movs	r3, #0
 8005672:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005674:	e036      	b.n	80056e4 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2200      	movs	r2, #0
 800567e:	2120      	movs	r1, #32
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 fea4 	bl	80063ce <UART_WaitOnFlagUntilTimeout>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d005      	beq.n	8005698 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2220      	movs	r2, #32
 8005690:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e032      	b.n	80056fe <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10c      	bne.n	80056b8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	8a7b      	ldrh	r3, [r7, #18]
 80056a8:	4013      	ands	r3, r2
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	3302      	adds	r3, #2
 80056b4:	61bb      	str	r3, [r7, #24]
 80056b6:	e00c      	b.n	80056d2 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	8a7b      	ldrh	r3, [r7, #18]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	4013      	ands	r3, r2
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	3301      	adds	r3, #1
 80056d0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29a      	uxth	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1c2      	bne.n	8005676 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80056f8:	2300      	movs	r3, #0
 80056fa:	e000      	b.n	80056fe <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80056fc:	2302      	movs	r3, #2
  }
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3720      	adds	r7, #32
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b0ba      	sub	sp, #232	@ 0xe8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800572e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005732:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005736:	4013      	ands	r3, r2
 8005738:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800573c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005740:	2b00      	cmp	r3, #0
 8005742:	d115      	bne.n	8005770 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00f      	beq.n	8005770 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005754:	f003 0320 	and.w	r3, r3, #32
 8005758:	2b00      	cmp	r3, #0
 800575a:	d009      	beq.n	8005770 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 8297 	beq.w	8005c94 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	4798      	blx	r3
      }
      return;
 800576e:	e291      	b.n	8005c94 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005770:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 8117 	beq.w	80059a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800577a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005786:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800578a:	4b85      	ldr	r3, [pc, #532]	@ (80059a0 <HAL_UART_IRQHandler+0x298>)
 800578c:	4013      	ands	r3, r2
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 810a 	beq.w	80059a8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b00      	cmp	r3, #0
 800579e:	d011      	beq.n	80057c4 <HAL_UART_IRQHandler+0xbc>
 80057a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00b      	beq.n	80057c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2201      	movs	r2, #1
 80057b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057ba:	f043 0201 	orr.w	r2, r3, #1
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d011      	beq.n	80057f4 <HAL_UART_IRQHandler+0xec>
 80057d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00b      	beq.n	80057f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2202      	movs	r2, #2
 80057e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057ea:	f043 0204 	orr.w	r2, r3, #4
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d011      	beq.n	8005824 <HAL_UART_IRQHandler+0x11c>
 8005800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00b      	beq.n	8005824 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2204      	movs	r2, #4
 8005812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800581a:	f043 0202 	orr.w	r2, r3, #2
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b00      	cmp	r3, #0
 800582e:	d017      	beq.n	8005860 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005834:	f003 0320 	and.w	r3, r3, #32
 8005838:	2b00      	cmp	r3, #0
 800583a:	d105      	bne.n	8005848 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800583c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005840:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00b      	beq.n	8005860 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2208      	movs	r2, #8
 800584e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005856:	f043 0208 	orr.w	r2, r3, #8
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005864:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005868:	2b00      	cmp	r3, #0
 800586a:	d012      	beq.n	8005892 <HAL_UART_IRQHandler+0x18a>
 800586c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005870:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00c      	beq.n	8005892 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005880:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005888:	f043 0220 	orr.w	r2, r3, #32
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 81fd 	beq.w	8005c98 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800589e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a2:	f003 0320 	and.w	r3, r3, #32
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00d      	beq.n	80058c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058ae:	f003 0320 	and.w	r3, r3, #32
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d007      	beq.n	80058c6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058da:	2b40      	cmp	r3, #64	@ 0x40
 80058dc:	d005      	beq.n	80058ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80058de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d04f      	beq.n	800598a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fddc 	bl	80064a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058fa:	2b40      	cmp	r3, #64	@ 0x40
 80058fc:	d141      	bne.n	8005982 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3308      	adds	r3, #8
 8005904:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005908:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800590c:	e853 3f00 	ldrex	r3, [r3]
 8005910:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005914:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005918:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800591c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	3308      	adds	r3, #8
 8005926:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800592a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800592e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005936:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1d9      	bne.n	80058fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800594e:	2b00      	cmp	r3, #0
 8005950:	d013      	beq.n	800597a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005956:	4a13      	ldr	r2, [pc, #76]	@ (80059a4 <HAL_UART_IRQHandler+0x29c>)
 8005958:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800595e:	4618      	mov	r0, r3
 8005960:	f7fc f9e6 	bl	8001d30 <HAL_DMA_Abort_IT>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d017      	beq.n	800599a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800596e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005974:	4610      	mov	r0, r2
 8005976:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005978:	e00f      	b.n	800599a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f9a0 	bl	8005cc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005980:	e00b      	b.n	800599a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f99c 	bl	8005cc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005988:	e007      	b.n	800599a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f998 	bl	8005cc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005998:	e17e      	b.n	8005c98 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800599a:	bf00      	nop
    return;
 800599c:	e17c      	b.n	8005c98 <HAL_UART_IRQHandler+0x590>
 800599e:	bf00      	nop
 80059a0:	04000120 	.word	0x04000120
 80059a4:	08006571 	.word	0x08006571

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	f040 814c 	bne.w	8005c4a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80059b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 8145 	beq.w	8005c4a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80059c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059c4:	f003 0310 	and.w	r3, r3, #16
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 813e 	beq.w	8005c4a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2210      	movs	r2, #16
 80059d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e0:	2b40      	cmp	r3, #64	@ 0x40
 80059e2:	f040 80b6 	bne.w	8005b52 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 8150 	beq.w	8005c9c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005a02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a06:	429a      	cmp	r2, r3
 8005a08:	f080 8148 	bcs.w	8005c9c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a12:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a20:	f000 8086 	beq.w	8005b30 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005a4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a52:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1da      	bne.n	8005a24 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	3308      	adds	r3, #8
 8005a74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a78:	e853 3f00 	ldrex	r3, [r3]
 8005a7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a80:	f023 0301 	bic.w	r3, r3, #1
 8005a84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a9e:	e841 2300 	strex	r3, r2, [r1]
 8005aa2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005aa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1e1      	bne.n	8005a6e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3308      	adds	r3, #8
 8005ab0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ab4:	e853 3f00 	ldrex	r3, [r3]
 8005ab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005aba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005abc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3308      	adds	r3, #8
 8005aca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005ace:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ad0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ad4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005ad6:	e841 2300 	strex	r3, r2, [r1]
 8005ada:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005adc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1e3      	bne.n	8005aaa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005af8:	e853 3f00 	ldrex	r3, [r3]
 8005afc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005afe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b00:	f023 0310 	bic.w	r3, r3, #16
 8005b04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b1a:	e841 2300 	strex	r3, r2, [r1]
 8005b1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1e4      	bne.n	8005af0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fc f890 	bl	8001c50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	4619      	mov	r1, r3
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f8c2 	bl	8005cd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b50:	e0a4      	b.n	8005c9c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 8096 	beq.w	8005ca0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005b74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 8091 	beq.w	8005ca0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b86:	e853 3f00 	ldrex	r3, [r3]
 8005b8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ba0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ba2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ba6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ba8:	e841 2300 	strex	r3, r2, [r1]
 8005bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1e4      	bne.n	8005b7e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3308      	adds	r3, #8
 8005bba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbe:	e853 3f00 	ldrex	r3, [r3]
 8005bc2:	623b      	str	r3, [r7, #32]
   return(result);
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	f023 0301 	bic.w	r3, r3, #1
 8005bca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3308      	adds	r3, #8
 8005bd4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005bd8:	633a      	str	r2, [r7, #48]	@ 0x30
 8005bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bdc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005be0:	e841 2300 	strex	r3, r2, [r1]
 8005be4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1e3      	bne.n	8005bb4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	e853 3f00 	ldrex	r3, [r3]
 8005c0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f023 0310 	bic.w	r3, r3, #16
 8005c14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005c22:	61fb      	str	r3, [r7, #28]
 8005c24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c26:	69b9      	ldr	r1, [r7, #24]
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	e841 2300 	strex	r3, r2, [r1]
 8005c2e:	617b      	str	r3, [r7, #20]
   return(result);
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1e4      	bne.n	8005c00 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2202      	movs	r2, #2
 8005c3a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c40:	4619      	mov	r1, r3
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f846 	bl	8005cd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c48:	e02a      	b.n	8005ca0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00e      	beq.n	8005c74 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d008      	beq.n	8005c74 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d01c      	beq.n	8005ca4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	4798      	blx	r3
    }
    return;
 8005c72:	e017      	b.n	8005ca4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d012      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x59e>
 8005c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00c      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fc85 	bl	800659c <UART_EndTransmit_IT>
    return;
 8005c92:	e008      	b.n	8005ca6 <HAL_UART_IRQHandler+0x59e>
      return;
 8005c94:	bf00      	nop
 8005c96:	e006      	b.n	8005ca6 <HAL_UART_IRQHandler+0x59e>
    return;
 8005c98:	bf00      	nop
 8005c9a:	e004      	b.n	8005ca6 <HAL_UART_IRQHandler+0x59e>
      return;
 8005c9c:	bf00      	nop
 8005c9e:	e002      	b.n	8005ca6 <HAL_UART_IRQHandler+0x59e>
      return;
 8005ca0:	bf00      	nop
 8005ca2:	e000      	b.n	8005ca6 <HAL_UART_IRQHandler+0x59e>
    return;
 8005ca4:	bf00      	nop
  }

}
 8005ca6:	37e8      	adds	r7, #232	@ 0xe8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cf8:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d00:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	4313      	orrs	r3, r2
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	4ba6      	ldr	r3, [pc, #664]	@ (8005fd8 <UART_SetConfig+0x2c4>)
 8005d40:	4013      	ands	r3, r2
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6812      	ldr	r2, [r2, #0]
 8005d46:	6979      	ldr	r1, [r7, #20]
 8005d48:	430b      	orrs	r3, r1
 8005d4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a94      	ldr	r2, [pc, #592]	@ (8005fdc <UART_SetConfig+0x2c8>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d120      	bne.n	8005dd2 <UART_SetConfig+0xbe>
 8005d90:	4b93      	ldr	r3, [pc, #588]	@ (8005fe0 <UART_SetConfig+0x2cc>)
 8005d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d96:	f003 0303 	and.w	r3, r3, #3
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d816      	bhi.n	8005dcc <UART_SetConfig+0xb8>
 8005d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005da4 <UART_SetConfig+0x90>)
 8005da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da4:	08005db5 	.word	0x08005db5
 8005da8:	08005dc1 	.word	0x08005dc1
 8005dac:	08005dbb 	.word	0x08005dbb
 8005db0:	08005dc7 	.word	0x08005dc7
 8005db4:	2301      	movs	r3, #1
 8005db6:	77fb      	strb	r3, [r7, #31]
 8005db8:	e150      	b.n	800605c <UART_SetConfig+0x348>
 8005dba:	2302      	movs	r3, #2
 8005dbc:	77fb      	strb	r3, [r7, #31]
 8005dbe:	e14d      	b.n	800605c <UART_SetConfig+0x348>
 8005dc0:	2304      	movs	r3, #4
 8005dc2:	77fb      	strb	r3, [r7, #31]
 8005dc4:	e14a      	b.n	800605c <UART_SetConfig+0x348>
 8005dc6:	2308      	movs	r3, #8
 8005dc8:	77fb      	strb	r3, [r7, #31]
 8005dca:	e147      	b.n	800605c <UART_SetConfig+0x348>
 8005dcc:	2310      	movs	r3, #16
 8005dce:	77fb      	strb	r3, [r7, #31]
 8005dd0:	e144      	b.n	800605c <UART_SetConfig+0x348>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a83      	ldr	r2, [pc, #524]	@ (8005fe4 <UART_SetConfig+0x2d0>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d132      	bne.n	8005e42 <UART_SetConfig+0x12e>
 8005ddc:	4b80      	ldr	r3, [pc, #512]	@ (8005fe0 <UART_SetConfig+0x2cc>)
 8005dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005de2:	f003 030c 	and.w	r3, r3, #12
 8005de6:	2b0c      	cmp	r3, #12
 8005de8:	d828      	bhi.n	8005e3c <UART_SetConfig+0x128>
 8005dea:	a201      	add	r2, pc, #4	@ (adr r2, 8005df0 <UART_SetConfig+0xdc>)
 8005dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df0:	08005e25 	.word	0x08005e25
 8005df4:	08005e3d 	.word	0x08005e3d
 8005df8:	08005e3d 	.word	0x08005e3d
 8005dfc:	08005e3d 	.word	0x08005e3d
 8005e00:	08005e31 	.word	0x08005e31
 8005e04:	08005e3d 	.word	0x08005e3d
 8005e08:	08005e3d 	.word	0x08005e3d
 8005e0c:	08005e3d 	.word	0x08005e3d
 8005e10:	08005e2b 	.word	0x08005e2b
 8005e14:	08005e3d 	.word	0x08005e3d
 8005e18:	08005e3d 	.word	0x08005e3d
 8005e1c:	08005e3d 	.word	0x08005e3d
 8005e20:	08005e37 	.word	0x08005e37
 8005e24:	2300      	movs	r3, #0
 8005e26:	77fb      	strb	r3, [r7, #31]
 8005e28:	e118      	b.n	800605c <UART_SetConfig+0x348>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	77fb      	strb	r3, [r7, #31]
 8005e2e:	e115      	b.n	800605c <UART_SetConfig+0x348>
 8005e30:	2304      	movs	r3, #4
 8005e32:	77fb      	strb	r3, [r7, #31]
 8005e34:	e112      	b.n	800605c <UART_SetConfig+0x348>
 8005e36:	2308      	movs	r3, #8
 8005e38:	77fb      	strb	r3, [r7, #31]
 8005e3a:	e10f      	b.n	800605c <UART_SetConfig+0x348>
 8005e3c:	2310      	movs	r3, #16
 8005e3e:	77fb      	strb	r3, [r7, #31]
 8005e40:	e10c      	b.n	800605c <UART_SetConfig+0x348>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a68      	ldr	r2, [pc, #416]	@ (8005fe8 <UART_SetConfig+0x2d4>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d120      	bne.n	8005e8e <UART_SetConfig+0x17a>
 8005e4c:	4b64      	ldr	r3, [pc, #400]	@ (8005fe0 <UART_SetConfig+0x2cc>)
 8005e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e52:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e56:	2b30      	cmp	r3, #48	@ 0x30
 8005e58:	d013      	beq.n	8005e82 <UART_SetConfig+0x16e>
 8005e5a:	2b30      	cmp	r3, #48	@ 0x30
 8005e5c:	d814      	bhi.n	8005e88 <UART_SetConfig+0x174>
 8005e5e:	2b20      	cmp	r3, #32
 8005e60:	d009      	beq.n	8005e76 <UART_SetConfig+0x162>
 8005e62:	2b20      	cmp	r3, #32
 8005e64:	d810      	bhi.n	8005e88 <UART_SetConfig+0x174>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <UART_SetConfig+0x15c>
 8005e6a:	2b10      	cmp	r3, #16
 8005e6c:	d006      	beq.n	8005e7c <UART_SetConfig+0x168>
 8005e6e:	e00b      	b.n	8005e88 <UART_SetConfig+0x174>
 8005e70:	2300      	movs	r3, #0
 8005e72:	77fb      	strb	r3, [r7, #31]
 8005e74:	e0f2      	b.n	800605c <UART_SetConfig+0x348>
 8005e76:	2302      	movs	r3, #2
 8005e78:	77fb      	strb	r3, [r7, #31]
 8005e7a:	e0ef      	b.n	800605c <UART_SetConfig+0x348>
 8005e7c:	2304      	movs	r3, #4
 8005e7e:	77fb      	strb	r3, [r7, #31]
 8005e80:	e0ec      	b.n	800605c <UART_SetConfig+0x348>
 8005e82:	2308      	movs	r3, #8
 8005e84:	77fb      	strb	r3, [r7, #31]
 8005e86:	e0e9      	b.n	800605c <UART_SetConfig+0x348>
 8005e88:	2310      	movs	r3, #16
 8005e8a:	77fb      	strb	r3, [r7, #31]
 8005e8c:	e0e6      	b.n	800605c <UART_SetConfig+0x348>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a56      	ldr	r2, [pc, #344]	@ (8005fec <UART_SetConfig+0x2d8>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d120      	bne.n	8005eda <UART_SetConfig+0x1c6>
 8005e98:	4b51      	ldr	r3, [pc, #324]	@ (8005fe0 <UART_SetConfig+0x2cc>)
 8005e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e9e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005ea2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ea4:	d013      	beq.n	8005ece <UART_SetConfig+0x1ba>
 8005ea6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ea8:	d814      	bhi.n	8005ed4 <UART_SetConfig+0x1c0>
 8005eaa:	2b80      	cmp	r3, #128	@ 0x80
 8005eac:	d009      	beq.n	8005ec2 <UART_SetConfig+0x1ae>
 8005eae:	2b80      	cmp	r3, #128	@ 0x80
 8005eb0:	d810      	bhi.n	8005ed4 <UART_SetConfig+0x1c0>
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <UART_SetConfig+0x1a8>
 8005eb6:	2b40      	cmp	r3, #64	@ 0x40
 8005eb8:	d006      	beq.n	8005ec8 <UART_SetConfig+0x1b4>
 8005eba:	e00b      	b.n	8005ed4 <UART_SetConfig+0x1c0>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	77fb      	strb	r3, [r7, #31]
 8005ec0:	e0cc      	b.n	800605c <UART_SetConfig+0x348>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	77fb      	strb	r3, [r7, #31]
 8005ec6:	e0c9      	b.n	800605c <UART_SetConfig+0x348>
 8005ec8:	2304      	movs	r3, #4
 8005eca:	77fb      	strb	r3, [r7, #31]
 8005ecc:	e0c6      	b.n	800605c <UART_SetConfig+0x348>
 8005ece:	2308      	movs	r3, #8
 8005ed0:	77fb      	strb	r3, [r7, #31]
 8005ed2:	e0c3      	b.n	800605c <UART_SetConfig+0x348>
 8005ed4:	2310      	movs	r3, #16
 8005ed6:	77fb      	strb	r3, [r7, #31]
 8005ed8:	e0c0      	b.n	800605c <UART_SetConfig+0x348>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a44      	ldr	r2, [pc, #272]	@ (8005ff0 <UART_SetConfig+0x2dc>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d125      	bne.n	8005f30 <UART_SetConfig+0x21c>
 8005ee4:	4b3e      	ldr	r3, [pc, #248]	@ (8005fe0 <UART_SetConfig+0x2cc>)
 8005ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ef2:	d017      	beq.n	8005f24 <UART_SetConfig+0x210>
 8005ef4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ef8:	d817      	bhi.n	8005f2a <UART_SetConfig+0x216>
 8005efa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005efe:	d00b      	beq.n	8005f18 <UART_SetConfig+0x204>
 8005f00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f04:	d811      	bhi.n	8005f2a <UART_SetConfig+0x216>
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <UART_SetConfig+0x1fe>
 8005f0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f0e:	d006      	beq.n	8005f1e <UART_SetConfig+0x20a>
 8005f10:	e00b      	b.n	8005f2a <UART_SetConfig+0x216>
 8005f12:	2300      	movs	r3, #0
 8005f14:	77fb      	strb	r3, [r7, #31]
 8005f16:	e0a1      	b.n	800605c <UART_SetConfig+0x348>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	77fb      	strb	r3, [r7, #31]
 8005f1c:	e09e      	b.n	800605c <UART_SetConfig+0x348>
 8005f1e:	2304      	movs	r3, #4
 8005f20:	77fb      	strb	r3, [r7, #31]
 8005f22:	e09b      	b.n	800605c <UART_SetConfig+0x348>
 8005f24:	2308      	movs	r3, #8
 8005f26:	77fb      	strb	r3, [r7, #31]
 8005f28:	e098      	b.n	800605c <UART_SetConfig+0x348>
 8005f2a:	2310      	movs	r3, #16
 8005f2c:	77fb      	strb	r3, [r7, #31]
 8005f2e:	e095      	b.n	800605c <UART_SetConfig+0x348>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a2f      	ldr	r2, [pc, #188]	@ (8005ff4 <UART_SetConfig+0x2e0>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d125      	bne.n	8005f86 <UART_SetConfig+0x272>
 8005f3a:	4b29      	ldr	r3, [pc, #164]	@ (8005fe0 <UART_SetConfig+0x2cc>)
 8005f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f48:	d017      	beq.n	8005f7a <UART_SetConfig+0x266>
 8005f4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f4e:	d817      	bhi.n	8005f80 <UART_SetConfig+0x26c>
 8005f50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f54:	d00b      	beq.n	8005f6e <UART_SetConfig+0x25a>
 8005f56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f5a:	d811      	bhi.n	8005f80 <UART_SetConfig+0x26c>
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <UART_SetConfig+0x254>
 8005f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f64:	d006      	beq.n	8005f74 <UART_SetConfig+0x260>
 8005f66:	e00b      	b.n	8005f80 <UART_SetConfig+0x26c>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	77fb      	strb	r3, [r7, #31]
 8005f6c:	e076      	b.n	800605c <UART_SetConfig+0x348>
 8005f6e:	2302      	movs	r3, #2
 8005f70:	77fb      	strb	r3, [r7, #31]
 8005f72:	e073      	b.n	800605c <UART_SetConfig+0x348>
 8005f74:	2304      	movs	r3, #4
 8005f76:	77fb      	strb	r3, [r7, #31]
 8005f78:	e070      	b.n	800605c <UART_SetConfig+0x348>
 8005f7a:	2308      	movs	r3, #8
 8005f7c:	77fb      	strb	r3, [r7, #31]
 8005f7e:	e06d      	b.n	800605c <UART_SetConfig+0x348>
 8005f80:	2310      	movs	r3, #16
 8005f82:	77fb      	strb	r3, [r7, #31]
 8005f84:	e06a      	b.n	800605c <UART_SetConfig+0x348>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ff8 <UART_SetConfig+0x2e4>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d138      	bne.n	8006002 <UART_SetConfig+0x2ee>
 8005f90:	4b13      	ldr	r3, [pc, #76]	@ (8005fe0 <UART_SetConfig+0x2cc>)
 8005f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f96:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005f9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f9e:	d017      	beq.n	8005fd0 <UART_SetConfig+0x2bc>
 8005fa0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fa4:	d82a      	bhi.n	8005ffc <UART_SetConfig+0x2e8>
 8005fa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005faa:	d00b      	beq.n	8005fc4 <UART_SetConfig+0x2b0>
 8005fac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fb0:	d824      	bhi.n	8005ffc <UART_SetConfig+0x2e8>
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <UART_SetConfig+0x2aa>
 8005fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fba:	d006      	beq.n	8005fca <UART_SetConfig+0x2b6>
 8005fbc:	e01e      	b.n	8005ffc <UART_SetConfig+0x2e8>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	77fb      	strb	r3, [r7, #31]
 8005fc2:	e04b      	b.n	800605c <UART_SetConfig+0x348>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	77fb      	strb	r3, [r7, #31]
 8005fc8:	e048      	b.n	800605c <UART_SetConfig+0x348>
 8005fca:	2304      	movs	r3, #4
 8005fcc:	77fb      	strb	r3, [r7, #31]
 8005fce:	e045      	b.n	800605c <UART_SetConfig+0x348>
 8005fd0:	2308      	movs	r3, #8
 8005fd2:	77fb      	strb	r3, [r7, #31]
 8005fd4:	e042      	b.n	800605c <UART_SetConfig+0x348>
 8005fd6:	bf00      	nop
 8005fd8:	efff69f3 	.word	0xefff69f3
 8005fdc:	40011000 	.word	0x40011000
 8005fe0:	40023800 	.word	0x40023800
 8005fe4:	40004400 	.word	0x40004400
 8005fe8:	40004800 	.word	0x40004800
 8005fec:	40004c00 	.word	0x40004c00
 8005ff0:	40005000 	.word	0x40005000
 8005ff4:	40011400 	.word	0x40011400
 8005ff8:	40007800 	.word	0x40007800
 8005ffc:	2310      	movs	r3, #16
 8005ffe:	77fb      	strb	r3, [r7, #31]
 8006000:	e02c      	b.n	800605c <UART_SetConfig+0x348>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a72      	ldr	r2, [pc, #456]	@ (80061d0 <UART_SetConfig+0x4bc>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d125      	bne.n	8006058 <UART_SetConfig+0x344>
 800600c:	4b71      	ldr	r3, [pc, #452]	@ (80061d4 <UART_SetConfig+0x4c0>)
 800600e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006012:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006016:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800601a:	d017      	beq.n	800604c <UART_SetConfig+0x338>
 800601c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006020:	d817      	bhi.n	8006052 <UART_SetConfig+0x33e>
 8006022:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006026:	d00b      	beq.n	8006040 <UART_SetConfig+0x32c>
 8006028:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800602c:	d811      	bhi.n	8006052 <UART_SetConfig+0x33e>
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <UART_SetConfig+0x326>
 8006032:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006036:	d006      	beq.n	8006046 <UART_SetConfig+0x332>
 8006038:	e00b      	b.n	8006052 <UART_SetConfig+0x33e>
 800603a:	2300      	movs	r3, #0
 800603c:	77fb      	strb	r3, [r7, #31]
 800603e:	e00d      	b.n	800605c <UART_SetConfig+0x348>
 8006040:	2302      	movs	r3, #2
 8006042:	77fb      	strb	r3, [r7, #31]
 8006044:	e00a      	b.n	800605c <UART_SetConfig+0x348>
 8006046:	2304      	movs	r3, #4
 8006048:	77fb      	strb	r3, [r7, #31]
 800604a:	e007      	b.n	800605c <UART_SetConfig+0x348>
 800604c:	2308      	movs	r3, #8
 800604e:	77fb      	strb	r3, [r7, #31]
 8006050:	e004      	b.n	800605c <UART_SetConfig+0x348>
 8006052:	2310      	movs	r3, #16
 8006054:	77fb      	strb	r3, [r7, #31]
 8006056:	e001      	b.n	800605c <UART_SetConfig+0x348>
 8006058:	2310      	movs	r3, #16
 800605a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	69db      	ldr	r3, [r3, #28]
 8006060:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006064:	d15b      	bne.n	800611e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006066:	7ffb      	ldrb	r3, [r7, #31]
 8006068:	2b08      	cmp	r3, #8
 800606a:	d828      	bhi.n	80060be <UART_SetConfig+0x3aa>
 800606c:	a201      	add	r2, pc, #4	@ (adr r2, 8006074 <UART_SetConfig+0x360>)
 800606e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006072:	bf00      	nop
 8006074:	08006099 	.word	0x08006099
 8006078:	080060a1 	.word	0x080060a1
 800607c:	080060a9 	.word	0x080060a9
 8006080:	080060bf 	.word	0x080060bf
 8006084:	080060af 	.word	0x080060af
 8006088:	080060bf 	.word	0x080060bf
 800608c:	080060bf 	.word	0x080060bf
 8006090:	080060bf 	.word	0x080060bf
 8006094:	080060b7 	.word	0x080060b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006098:	f7fe f894 	bl	80041c4 <HAL_RCC_GetPCLK1Freq>
 800609c:	61b8      	str	r0, [r7, #24]
        break;
 800609e:	e013      	b.n	80060c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060a0:	f7fe f8a4 	bl	80041ec <HAL_RCC_GetPCLK2Freq>
 80060a4:	61b8      	str	r0, [r7, #24]
        break;
 80060a6:	e00f      	b.n	80060c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060a8:	4b4b      	ldr	r3, [pc, #300]	@ (80061d8 <UART_SetConfig+0x4c4>)
 80060aa:	61bb      	str	r3, [r7, #24]
        break;
 80060ac:	e00c      	b.n	80060c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ae:	f7fd ffb7 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 80060b2:	61b8      	str	r0, [r7, #24]
        break;
 80060b4:	e008      	b.n	80060c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060ba:	61bb      	str	r3, [r7, #24]
        break;
 80060bc:	e004      	b.n	80060c8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80060be:	2300      	movs	r3, #0
 80060c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	77bb      	strb	r3, [r7, #30]
        break;
 80060c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d074      	beq.n	80061b8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	005a      	lsls	r2, r3, #1
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	085b      	lsrs	r3, r3, #1
 80060d8:	441a      	add	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	2b0f      	cmp	r3, #15
 80060e8:	d916      	bls.n	8006118 <UART_SetConfig+0x404>
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060f0:	d212      	bcs.n	8006118 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	f023 030f 	bic.w	r3, r3, #15
 80060fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	085b      	lsrs	r3, r3, #1
 8006100:	b29b      	uxth	r3, r3
 8006102:	f003 0307 	and.w	r3, r3, #7
 8006106:	b29a      	uxth	r2, r3
 8006108:	89fb      	ldrh	r3, [r7, #14]
 800610a:	4313      	orrs	r3, r2
 800610c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	89fa      	ldrh	r2, [r7, #14]
 8006114:	60da      	str	r2, [r3, #12]
 8006116:	e04f      	b.n	80061b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	77bb      	strb	r3, [r7, #30]
 800611c:	e04c      	b.n	80061b8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800611e:	7ffb      	ldrb	r3, [r7, #31]
 8006120:	2b08      	cmp	r3, #8
 8006122:	d828      	bhi.n	8006176 <UART_SetConfig+0x462>
 8006124:	a201      	add	r2, pc, #4	@ (adr r2, 800612c <UART_SetConfig+0x418>)
 8006126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612a:	bf00      	nop
 800612c:	08006151 	.word	0x08006151
 8006130:	08006159 	.word	0x08006159
 8006134:	08006161 	.word	0x08006161
 8006138:	08006177 	.word	0x08006177
 800613c:	08006167 	.word	0x08006167
 8006140:	08006177 	.word	0x08006177
 8006144:	08006177 	.word	0x08006177
 8006148:	08006177 	.word	0x08006177
 800614c:	0800616f 	.word	0x0800616f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006150:	f7fe f838 	bl	80041c4 <HAL_RCC_GetPCLK1Freq>
 8006154:	61b8      	str	r0, [r7, #24]
        break;
 8006156:	e013      	b.n	8006180 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006158:	f7fe f848 	bl	80041ec <HAL_RCC_GetPCLK2Freq>
 800615c:	61b8      	str	r0, [r7, #24]
        break;
 800615e:	e00f      	b.n	8006180 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006160:	4b1d      	ldr	r3, [pc, #116]	@ (80061d8 <UART_SetConfig+0x4c4>)
 8006162:	61bb      	str	r3, [r7, #24]
        break;
 8006164:	e00c      	b.n	8006180 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006166:	f7fd ff5b 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 800616a:	61b8      	str	r0, [r7, #24]
        break;
 800616c:	e008      	b.n	8006180 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800616e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006172:	61bb      	str	r3, [r7, #24]
        break;
 8006174:	e004      	b.n	8006180 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	77bb      	strb	r3, [r7, #30]
        break;
 800617e:	bf00      	nop
    }

    if (pclk != 0U)
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d018      	beq.n	80061b8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	085a      	lsrs	r2, r3, #1
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	441a      	add	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	fbb2 f3f3 	udiv	r3, r2, r3
 8006198:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	2b0f      	cmp	r3, #15
 800619e:	d909      	bls.n	80061b4 <UART_SetConfig+0x4a0>
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061a6:	d205      	bcs.n	80061b4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	60da      	str	r2, [r3, #12]
 80061b2:	e001      	b.n	80061b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80061c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3720      	adds	r7, #32
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	40007c00 	.word	0x40007c00
 80061d4:	40023800 	.word	0x40023800
 80061d8:	00f42400 	.word	0x00f42400

080061dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e8:	f003 0308 	and.w	r3, r3, #8
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00a      	beq.n	8006206 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00a      	beq.n	8006228 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622c:	f003 0302 	and.w	r3, r3, #2
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00a      	beq.n	800624a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800624e:	f003 0304 	and.w	r3, r3, #4
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006270:	f003 0310 	and.w	r3, r3, #16
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00a      	beq.n	800628e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006292:	f003 0320 	and.w	r3, r3, #32
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00a      	beq.n	80062b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d01a      	beq.n	80062f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062da:	d10a      	bne.n	80062f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00a      	beq.n	8006314 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	605a      	str	r2, [r3, #4]
  }
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b08c      	sub	sp, #48	@ 0x30
 8006324:	af02      	add	r7, sp, #8
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006330:	f7fb fad4 	bl	80018dc <HAL_GetTick>
 8006334:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b08      	cmp	r3, #8
 8006342:	d12e      	bne.n	80063a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006344:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634c:	2200      	movs	r2, #0
 800634e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f83b 	bl	80063ce <UART_WaitOnFlagUntilTimeout>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d021      	beq.n	80063a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	e853 3f00 	ldrex	r3, [r3]
 800636a:	60fb      	str	r3, [r7, #12]
   return(result);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006372:	623b      	str	r3, [r7, #32]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	461a      	mov	r2, r3
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	61fb      	str	r3, [r7, #28]
 800637e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006380:	69b9      	ldr	r1, [r7, #24]
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	e841 2300 	strex	r3, r2, [r1]
 8006388:	617b      	str	r3, [r7, #20]
   return(result);
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e6      	bne.n	800635e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2220      	movs	r2, #32
 8006394:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e011      	b.n	80063c6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2220      	movs	r2, #32
 80063a6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2220      	movs	r2, #32
 80063ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3728      	adds	r7, #40	@ 0x28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b084      	sub	sp, #16
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	60f8      	str	r0, [r7, #12]
 80063d6:	60b9      	str	r1, [r7, #8]
 80063d8:	603b      	str	r3, [r7, #0]
 80063da:	4613      	mov	r3, r2
 80063dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063de:	e04f      	b.n	8006480 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e6:	d04b      	beq.n	8006480 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063e8:	f7fb fa78 	bl	80018dc <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d302      	bcc.n	80063fe <UART_WaitOnFlagUntilTimeout+0x30>
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e04e      	b.n	80064a0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b00      	cmp	r3, #0
 800640e:	d037      	beq.n	8006480 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b80      	cmp	r3, #128	@ 0x80
 8006414:	d034      	beq.n	8006480 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	2b40      	cmp	r3, #64	@ 0x40
 800641a:	d031      	beq.n	8006480 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	f003 0308 	and.w	r3, r3, #8
 8006426:	2b08      	cmp	r3, #8
 8006428:	d110      	bne.n	800644c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2208      	movs	r2, #8
 8006430:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f000 f838 	bl	80064a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2208      	movs	r2, #8
 800643c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e029      	b.n	80064a0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006456:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800645a:	d111      	bne.n	8006480 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006464:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f000 f81e 	bl	80064a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2220      	movs	r2, #32
 8006470:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e00f      	b.n	80064a0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	69da      	ldr	r2, [r3, #28]
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	4013      	ands	r3, r2
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	429a      	cmp	r2, r3
 800648e:	bf0c      	ite	eq
 8006490:	2301      	moveq	r3, #1
 8006492:	2300      	movne	r3, #0
 8006494:	b2db      	uxtb	r3, r3
 8006496:	461a      	mov	r2, r3
 8006498:	79fb      	ldrb	r3, [r7, #7]
 800649a:	429a      	cmp	r2, r3
 800649c:	d0a0      	beq.n	80063e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b095      	sub	sp, #84	@ 0x54
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80064be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	461a      	mov	r2, r3
 80064cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80064d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80064d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064d6:	e841 2300 	strex	r3, r2, [r1]
 80064da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80064dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e6      	bne.n	80064b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3308      	adds	r3, #8
 80064e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	e853 3f00 	ldrex	r3, [r3]
 80064f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	f023 0301 	bic.w	r3, r3, #1
 80064f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3308      	adds	r3, #8
 8006500:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006502:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006504:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006508:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1e5      	bne.n	80064e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800651a:	2b01      	cmp	r3, #1
 800651c:	d118      	bne.n	8006550 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	e853 3f00 	ldrex	r3, [r3]
 800652a:	60bb      	str	r3, [r7, #8]
   return(result);
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f023 0310 	bic.w	r3, r3, #16
 8006532:	647b      	str	r3, [r7, #68]	@ 0x44
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	461a      	mov	r2, r3
 800653a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800653c:	61bb      	str	r3, [r7, #24]
 800653e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006540:	6979      	ldr	r1, [r7, #20]
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	e841 2300 	strex	r3, r2, [r1]
 8006548:	613b      	str	r3, [r7, #16]
   return(result);
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1e6      	bne.n	800651e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2220      	movs	r2, #32
 8006554:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006564:	bf00      	nop
 8006566:	3754      	adds	r7, #84	@ 0x54
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f7ff fb96 	bl	8005cc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006594:	bf00      	nop
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b088      	sub	sp, #32
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	e853 3f00 	ldrex	r3, [r3]
 80065b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065b8:	61fb      	str	r3, [r7, #28]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	461a      	mov	r2, r3
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	61bb      	str	r3, [r7, #24]
 80065c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c6:	6979      	ldr	r1, [r7, #20]
 80065c8:	69ba      	ldr	r2, [r7, #24]
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	613b      	str	r3, [r7, #16]
   return(result);
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1e6      	bne.n	80065a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2220      	movs	r2, #32
 80065da:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff fb62 	bl	8005cac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065e8:	bf00      	nop
 80065ea:	3720      	adds	r7, #32
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065f0:	b084      	sub	sp, #16
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b084      	sub	sp, #16
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	f107 001c 	add.w	r0, r7, #28
 80065fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006602:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006606:	2b01      	cmp	r3, #1
 8006608:	d121      	bne.n	800664e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800660e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68da      	ldr	r2, [r3, #12]
 800661a:	4b21      	ldr	r3, [pc, #132]	@ (80066a0 <USB_CoreInit+0xb0>)
 800661c:	4013      	ands	r3, r2
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800662e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006632:	2b01      	cmp	r3, #1
 8006634:	d105      	bne.n	8006642 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f001 fade 	bl	8007c04 <USB_CoreReset>
 8006648:	4603      	mov	r3, r0
 800664a:	73fb      	strb	r3, [r7, #15]
 800664c:	e010      	b.n	8006670 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f001 fad2 	bl	8007c04 <USB_CoreReset>
 8006660:	4603      	mov	r3, r0
 8006662:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006668:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006670:	7fbb      	ldrb	r3, [r7, #30]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d10b      	bne.n	800668e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f043 0206 	orr.w	r2, r3, #6
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f043 0220 	orr.w	r2, r3, #32
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800668e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800669a:	b004      	add	sp, #16
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	ffbdffbf 	.word	0xffbdffbf

080066a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	4613      	mov	r3, r2
 80066b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80066b2:	79fb      	ldrb	r3, [r7, #7]
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d165      	bne.n	8006784 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	4a41      	ldr	r2, [pc, #260]	@ (80067c0 <USB_SetTurnaroundTime+0x11c>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d906      	bls.n	80066ce <USB_SetTurnaroundTime+0x2a>
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	4a40      	ldr	r2, [pc, #256]	@ (80067c4 <USB_SetTurnaroundTime+0x120>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d202      	bcs.n	80066ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80066c8:	230f      	movs	r3, #15
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	e062      	b.n	8006794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	4a3c      	ldr	r2, [pc, #240]	@ (80067c4 <USB_SetTurnaroundTime+0x120>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d306      	bcc.n	80066e4 <USB_SetTurnaroundTime+0x40>
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	4a3b      	ldr	r2, [pc, #236]	@ (80067c8 <USB_SetTurnaroundTime+0x124>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d202      	bcs.n	80066e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80066de:	230e      	movs	r3, #14
 80066e0:	617b      	str	r3, [r7, #20]
 80066e2:	e057      	b.n	8006794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	4a38      	ldr	r2, [pc, #224]	@ (80067c8 <USB_SetTurnaroundTime+0x124>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d306      	bcc.n	80066fa <USB_SetTurnaroundTime+0x56>
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	4a37      	ldr	r2, [pc, #220]	@ (80067cc <USB_SetTurnaroundTime+0x128>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d202      	bcs.n	80066fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80066f4:	230d      	movs	r3, #13
 80066f6:	617b      	str	r3, [r7, #20]
 80066f8:	e04c      	b.n	8006794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	4a33      	ldr	r2, [pc, #204]	@ (80067cc <USB_SetTurnaroundTime+0x128>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d306      	bcc.n	8006710 <USB_SetTurnaroundTime+0x6c>
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	4a32      	ldr	r2, [pc, #200]	@ (80067d0 <USB_SetTurnaroundTime+0x12c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d802      	bhi.n	8006710 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800670a:	230c      	movs	r3, #12
 800670c:	617b      	str	r3, [r7, #20]
 800670e:	e041      	b.n	8006794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	4a2f      	ldr	r2, [pc, #188]	@ (80067d0 <USB_SetTurnaroundTime+0x12c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d906      	bls.n	8006726 <USB_SetTurnaroundTime+0x82>
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	4a2e      	ldr	r2, [pc, #184]	@ (80067d4 <USB_SetTurnaroundTime+0x130>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d802      	bhi.n	8006726 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006720:	230b      	movs	r3, #11
 8006722:	617b      	str	r3, [r7, #20]
 8006724:	e036      	b.n	8006794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	4a2a      	ldr	r2, [pc, #168]	@ (80067d4 <USB_SetTurnaroundTime+0x130>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d906      	bls.n	800673c <USB_SetTurnaroundTime+0x98>
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	4a29      	ldr	r2, [pc, #164]	@ (80067d8 <USB_SetTurnaroundTime+0x134>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d802      	bhi.n	800673c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006736:	230a      	movs	r3, #10
 8006738:	617b      	str	r3, [r7, #20]
 800673a:	e02b      	b.n	8006794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	4a26      	ldr	r2, [pc, #152]	@ (80067d8 <USB_SetTurnaroundTime+0x134>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d906      	bls.n	8006752 <USB_SetTurnaroundTime+0xae>
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	4a25      	ldr	r2, [pc, #148]	@ (80067dc <USB_SetTurnaroundTime+0x138>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d202      	bcs.n	8006752 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800674c:	2309      	movs	r3, #9
 800674e:	617b      	str	r3, [r7, #20]
 8006750:	e020      	b.n	8006794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	4a21      	ldr	r2, [pc, #132]	@ (80067dc <USB_SetTurnaroundTime+0x138>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d306      	bcc.n	8006768 <USB_SetTurnaroundTime+0xc4>
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	4a20      	ldr	r2, [pc, #128]	@ (80067e0 <USB_SetTurnaroundTime+0x13c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d802      	bhi.n	8006768 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006762:	2308      	movs	r3, #8
 8006764:	617b      	str	r3, [r7, #20]
 8006766:	e015      	b.n	8006794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	4a1d      	ldr	r2, [pc, #116]	@ (80067e0 <USB_SetTurnaroundTime+0x13c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d906      	bls.n	800677e <USB_SetTurnaroundTime+0xda>
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	4a1c      	ldr	r2, [pc, #112]	@ (80067e4 <USB_SetTurnaroundTime+0x140>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d202      	bcs.n	800677e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006778:	2307      	movs	r3, #7
 800677a:	617b      	str	r3, [r7, #20]
 800677c:	e00a      	b.n	8006794 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800677e:	2306      	movs	r3, #6
 8006780:	617b      	str	r3, [r7, #20]
 8006782:	e007      	b.n	8006794 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006784:	79fb      	ldrb	r3, [r7, #7]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d102      	bne.n	8006790 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800678a:	2309      	movs	r3, #9
 800678c:	617b      	str	r3, [r7, #20]
 800678e:	e001      	b.n	8006794 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006790:	2309      	movs	r3, #9
 8006792:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	68da      	ldr	r2, [r3, #12]
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	029b      	lsls	r3, r3, #10
 80067a8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80067ac:	431a      	orrs	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	371c      	adds	r7, #28
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	00d8acbf 	.word	0x00d8acbf
 80067c4:	00e4e1c0 	.word	0x00e4e1c0
 80067c8:	00f42400 	.word	0x00f42400
 80067cc:	01067380 	.word	0x01067380
 80067d0:	011a499f 	.word	0x011a499f
 80067d4:	01312cff 	.word	0x01312cff
 80067d8:	014ca43f 	.word	0x014ca43f
 80067dc:	016e3600 	.word	0x016e3600
 80067e0:	01a6ab1f 	.word	0x01a6ab1f
 80067e4:	01e84800 	.word	0x01e84800

080067e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f043 0201 	orr.w	r2, r3, #1
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800680a:	b480      	push	{r7}
 800680c:	b083      	sub	sp, #12
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f023 0201 	bic.w	r2, r3, #1
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006848:	78fb      	ldrb	r3, [r7, #3]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d115      	bne.n	800687a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800685a:	200a      	movs	r0, #10
 800685c:	f7fb f84a 	bl	80018f4 <HAL_Delay>
      ms += 10U;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	330a      	adds	r3, #10
 8006864:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f001 f93b 	bl	8007ae2 <USB_GetMode>
 800686c:	4603      	mov	r3, r0
 800686e:	2b01      	cmp	r3, #1
 8006870:	d01e      	beq.n	80068b0 <USB_SetCurrentMode+0x84>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2bc7      	cmp	r3, #199	@ 0xc7
 8006876:	d9f0      	bls.n	800685a <USB_SetCurrentMode+0x2e>
 8006878:	e01a      	b.n	80068b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800687a:	78fb      	ldrb	r3, [r7, #3]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d115      	bne.n	80068ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800688c:	200a      	movs	r0, #10
 800688e:	f7fb f831 	bl	80018f4 <HAL_Delay>
      ms += 10U;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	330a      	adds	r3, #10
 8006896:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 f922 	bl	8007ae2 <USB_GetMode>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d005      	beq.n	80068b0 <USB_SetCurrentMode+0x84>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2bc7      	cmp	r3, #199	@ 0xc7
 80068a8:	d9f0      	bls.n	800688c <USB_SetCurrentMode+0x60>
 80068aa:	e001      	b.n	80068b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e005      	b.n	80068bc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2bc8      	cmp	r3, #200	@ 0xc8
 80068b4:	d101      	bne.n	80068ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e000      	b.n	80068bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068c4:	b084      	sub	sp, #16
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b086      	sub	sp, #24
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80068d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80068de:	2300      	movs	r3, #0
 80068e0:	613b      	str	r3, [r7, #16]
 80068e2:	e009      	b.n	80068f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	3340      	adds	r3, #64	@ 0x40
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	2200      	movs	r2, #0
 80068f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	3301      	adds	r3, #1
 80068f6:	613b      	str	r3, [r7, #16]
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	2b0e      	cmp	r3, #14
 80068fc:	d9f2      	bls.n	80068e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80068fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006902:	2b00      	cmp	r3, #0
 8006904:	d11c      	bne.n	8006940 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006914:	f043 0302 	orr.w	r3, r3, #2
 8006918:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	e005      	b.n	800694c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006944:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006952:	461a      	mov	r2, r3
 8006954:	2300      	movs	r3, #0
 8006956:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006958:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800695c:	2b01      	cmp	r3, #1
 800695e:	d10d      	bne.n	800697c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006960:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006964:	2b00      	cmp	r3, #0
 8006966:	d104      	bne.n	8006972 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006968:	2100      	movs	r1, #0
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f968 	bl	8006c40 <USB_SetDevSpeed>
 8006970:	e008      	b.n	8006984 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006972:	2101      	movs	r1, #1
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f963 	bl	8006c40 <USB_SetDevSpeed>
 800697a:	e003      	b.n	8006984 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800697c:	2103      	movs	r1, #3
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f95e 	bl	8006c40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006984:	2110      	movs	r1, #16
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f8fa 	bl	8006b80 <USB_FlushTxFifo>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f924 	bl	8006be4 <USB_FlushRxFifo>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ac:	461a      	mov	r2, r3
 80069ae:	2300      	movs	r3, #0
 80069b0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069b8:	461a      	mov	r2, r3
 80069ba:	2300      	movs	r3, #0
 80069bc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069c4:	461a      	mov	r2, r3
 80069c6:	2300      	movs	r3, #0
 80069c8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069ca:	2300      	movs	r3, #0
 80069cc:	613b      	str	r3, [r7, #16]
 80069ce:	e043      	b.n	8006a58 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069e6:	d118      	bne.n	8006a1a <USB_DevInit+0x156>
    {
      if (i == 0U)
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10a      	bne.n	8006a04 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069fa:	461a      	mov	r2, r3
 80069fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006a00:	6013      	str	r3, [r2, #0]
 8006a02:	e013      	b.n	8006a2c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a10:	461a      	mov	r2, r3
 8006a12:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	e008      	b.n	8006a2c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a26:	461a      	mov	r2, r3
 8006a28:	2300      	movs	r3, #0
 8006a2a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a38:	461a      	mov	r2, r3
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	3301      	adds	r3, #1
 8006a56:	613b      	str	r3, [r7, #16]
 8006a58:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d3b5      	bcc.n	80069d0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a64:	2300      	movs	r3, #0
 8006a66:	613b      	str	r3, [r7, #16]
 8006a68:	e043      	b.n	8006af2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	015a      	lsls	r2, r3, #5
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a80:	d118      	bne.n	8006ab4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10a      	bne.n	8006a9e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a94:	461a      	mov	r2, r3
 8006a96:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006a9a:	6013      	str	r3, [r2, #0]
 8006a9c:	e013      	b.n	8006ac6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	015a      	lsls	r2, r3, #5
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aaa:	461a      	mov	r2, r3
 8006aac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006ab0:	6013      	str	r3, [r2, #0]
 8006ab2:	e008      	b.n	8006ac6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	015a      	lsls	r2, r3, #5
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	015a      	lsls	r2, r3, #5
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006aea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	3301      	adds	r3, #1
 8006af0:	613b      	str	r3, [r7, #16]
 8006af2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006af6:	461a      	mov	r2, r3
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d3b5      	bcc.n	8006a6a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b10:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006b1e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d105      	bne.n	8006b34 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	f043 0210 	orr.w	r2, r3, #16
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	699a      	ldr	r2, [r3, #24]
 8006b38:	4b0f      	ldr	r3, [pc, #60]	@ (8006b78 <USB_DevInit+0x2b4>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b40:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d005      	beq.n	8006b54 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	f043 0208 	orr.w	r2, r3, #8
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b54:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d105      	bne.n	8006b68 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	699a      	ldr	r2, [r3, #24]
 8006b60:	4b06      	ldr	r3, [pc, #24]	@ (8006b7c <USB_DevInit+0x2b8>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b74:	b004      	add	sp, #16
 8006b76:	4770      	bx	lr
 8006b78:	803c3800 	.word	0x803c3800
 8006b7c:	40000004 	.word	0x40000004

08006b80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3301      	adds	r3, #1
 8006b92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b9a:	d901      	bls.n	8006ba0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e01b      	b.n	8006bd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	daf2      	bge.n	8006b8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	019b      	lsls	r3, r3, #6
 8006bb0:	f043 0220 	orr.w	r2, r3, #32
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bc4:	d901      	bls.n	8006bca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e006      	b.n	8006bd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	2b20      	cmp	r3, #32
 8006bd4:	d0f0      	beq.n	8006bb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bfc:	d901      	bls.n	8006c02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e018      	b.n	8006c34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	daf2      	bge.n	8006bf0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2210      	movs	r2, #16
 8006c12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	3301      	adds	r3, #1
 8006c18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c20:	d901      	bls.n	8006c26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e006      	b.n	8006c34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	f003 0310 	and.w	r3, r3, #16
 8006c2e:	2b10      	cmp	r3, #16
 8006c30:	d0f0      	beq.n	8006c14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	78fb      	ldrb	r3, [r7, #3]
 8006c5a:	68f9      	ldr	r1, [r7, #12]
 8006c5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c60:	4313      	orrs	r3, r2
 8006c62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3714      	adds	r7, #20
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b087      	sub	sp, #28
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f003 0306 	and.w	r3, r3, #6
 8006c8a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d102      	bne.n	8006c98 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006c92:	2300      	movs	r3, #0
 8006c94:	75fb      	strb	r3, [r7, #23]
 8006c96:	e00a      	b.n	8006cae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d002      	beq.n	8006ca4 <USB_GetDevSpeed+0x32>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2b06      	cmp	r3, #6
 8006ca2:	d102      	bne.n	8006caa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	75fb      	strb	r3, [r7, #23]
 8006ca8:	e001      	b.n	8006cae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006caa:	230f      	movs	r3, #15
 8006cac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	371c      	adds	r7, #28
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	785b      	ldrb	r3, [r3, #1]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d139      	bne.n	8006d4c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cde:	69da      	ldr	r2, [r3, #28]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	f003 030f 	and.w	r3, r3, #15
 8006ce8:	2101      	movs	r1, #1
 8006cea:	fa01 f303 	lsl.w	r3, r1, r3
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	68f9      	ldr	r1, [r7, #12]
 8006cf2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d153      	bne.n	8006db8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	791b      	ldrb	r3, [r3, #4]
 8006d2a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d2c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	059b      	lsls	r3, r3, #22
 8006d32:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d34:	431a      	orrs	r2, r3
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	0159      	lsls	r1, r3, #5
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	440b      	add	r3, r1
 8006d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d42:	4619      	mov	r1, r3
 8006d44:	4b20      	ldr	r3, [pc, #128]	@ (8006dc8 <USB_ActivateEndpoint+0x10c>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	600b      	str	r3, [r1, #0]
 8006d4a:	e035      	b.n	8006db8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d52:	69da      	ldr	r2, [r3, #28]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	f003 030f 	and.w	r3, r3, #15
 8006d5c:	2101      	movs	r1, #1
 8006d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d62:	041b      	lsls	r3, r3, #16
 8006d64:	68f9      	ldr	r1, [r7, #12]
 8006d66:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d119      	bne.n	8006db8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	791b      	ldrb	r3, [r3, #4]
 8006d9e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006da0:	430b      	orrs	r3, r1
 8006da2:	431a      	orrs	r2, r3
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	0159      	lsls	r1, r3, #5
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	440b      	add	r3, r1
 8006dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006db0:	4619      	mov	r1, r3
 8006db2:	4b05      	ldr	r3, [pc, #20]	@ (8006dc8 <USB_ActivateEndpoint+0x10c>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3714      	adds	r7, #20
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	10008000 	.word	0x10008000

08006dcc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	785b      	ldrb	r3, [r3, #1]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d161      	bne.n	8006eac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dfe:	d11f      	bne.n	8006e40 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	0151      	lsls	r1, r2, #5
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	440a      	add	r2, r1
 8006e16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e1a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e1e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	0151      	lsls	r1, r2, #5
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	440a      	add	r2, r1
 8006e36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	f003 030f 	and.w	r3, r3, #15
 8006e50:	2101      	movs	r1, #1
 8006e52:	fa01 f303 	lsl.w	r3, r1, r3
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	43db      	mvns	r3, r3
 8006e5a:	68f9      	ldr	r1, [r7, #12]
 8006e5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e60:	4013      	ands	r3, r2
 8006e62:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e6a:	69da      	ldr	r2, [r3, #28]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	f003 030f 	and.w	r3, r3, #15
 8006e74:	2101      	movs	r1, #1
 8006e76:	fa01 f303 	lsl.w	r3, r1, r3
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	43db      	mvns	r3, r3
 8006e7e:	68f9      	ldr	r1, [r7, #12]
 8006e80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e84:	4013      	ands	r3, r2
 8006e86:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	0159      	lsls	r1, r3, #5
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	440b      	add	r3, r1
 8006e9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	4b35      	ldr	r3, [pc, #212]	@ (8006f7c <USB_DeactivateEndpoint+0x1b0>)
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	600b      	str	r3, [r1, #0]
 8006eaa:	e060      	b.n	8006f6e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ebe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ec2:	d11f      	bne.n	8006f04 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	015a      	lsls	r2, r3, #5
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4413      	add	r3, r2
 8006ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	0151      	lsls	r1, r2, #5
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	440a      	add	r2, r1
 8006eda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ede:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006ee2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	0151      	lsls	r1, r2, #5
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	440a      	add	r2, r1
 8006efa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006efe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	f003 030f 	and.w	r3, r3, #15
 8006f14:	2101      	movs	r1, #1
 8006f16:	fa01 f303 	lsl.w	r3, r1, r3
 8006f1a:	041b      	lsls	r3, r3, #16
 8006f1c:	43db      	mvns	r3, r3
 8006f1e:	68f9      	ldr	r1, [r7, #12]
 8006f20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f24:	4013      	ands	r3, r2
 8006f26:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f2e:	69da      	ldr	r2, [r3, #28]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	2101      	movs	r1, #1
 8006f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f3e:	041b      	lsls	r3, r3, #16
 8006f40:	43db      	mvns	r3, r3
 8006f42:	68f9      	ldr	r1, [r7, #12]
 8006f44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f48:	4013      	ands	r3, r2
 8006f4a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	0159      	lsls	r1, r3, #5
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	440b      	add	r3, r1
 8006f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f66:	4619      	mov	r1, r3
 8006f68:	4b05      	ldr	r3, [pc, #20]	@ (8006f80 <USB_DeactivateEndpoint+0x1b4>)
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	ec337800 	.word	0xec337800
 8006f80:	eff37800 	.word	0xeff37800

08006f84 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b08a      	sub	sp, #40	@ 0x28
 8006f88:	af02      	add	r7, sp, #8
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	785b      	ldrb	r3, [r3, #1]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	f040 8181 	bne.w	80072a8 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d132      	bne.n	8007014 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fba:	691a      	ldr	r2, [r3, #16]
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	0159      	lsls	r1, r3, #5
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	440b      	add	r3, r1
 8006fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4ba5      	ldr	r3, [pc, #660]	@ (8007260 <USB_EPStartXfer+0x2dc>)
 8006fcc:	4013      	ands	r3, r2
 8006fce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	015a      	lsls	r2, r3, #5
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	69ba      	ldr	r2, [r7, #24]
 8006fe0:	0151      	lsls	r1, r2, #5
 8006fe2:	69fa      	ldr	r2, [r7, #28]
 8006fe4:	440a      	add	r2, r1
 8006fe6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006fee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ffc:	691a      	ldr	r2, [r3, #16]
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	0159      	lsls	r1, r3, #5
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	440b      	add	r3, r1
 8007006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800700a:	4619      	mov	r1, r3
 800700c:	4b95      	ldr	r3, [pc, #596]	@ (8007264 <USB_EPStartXfer+0x2e0>)
 800700e:	4013      	ands	r3, r2
 8007010:	610b      	str	r3, [r1, #16]
 8007012:	e092      	b.n	800713a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007020:	691a      	ldr	r2, [r3, #16]
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	0159      	lsls	r1, r3, #5
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	440b      	add	r3, r1
 800702a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800702e:	4619      	mov	r1, r3
 8007030:	4b8c      	ldr	r3, [pc, #560]	@ (8007264 <USB_EPStartXfer+0x2e0>)
 8007032:	4013      	ands	r3, r2
 8007034:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	015a      	lsls	r2, r3, #5
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	4413      	add	r3, r2
 800703e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007042:	691a      	ldr	r2, [r3, #16]
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	0159      	lsls	r1, r3, #5
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	440b      	add	r3, r1
 800704c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007050:	4619      	mov	r1, r3
 8007052:	4b83      	ldr	r3, [pc, #524]	@ (8007260 <USB_EPStartXfer+0x2dc>)
 8007054:	4013      	ands	r3, r2
 8007056:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d11a      	bne.n	8007094 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	691a      	ldr	r2, [r3, #16]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	429a      	cmp	r2, r3
 8007068:	d903      	bls.n	8007072 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	689a      	ldr	r2, [r3, #8]
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	4413      	add	r3, r2
 800707a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	0151      	lsls	r1, r2, #5
 8007084:	69fa      	ldr	r2, [r7, #28]
 8007086:	440a      	add	r2, r1
 8007088:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800708c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007090:	6113      	str	r3, [r2, #16]
 8007092:	e01b      	b.n	80070cc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	4413      	add	r3, r2
 800709c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070a0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	6919      	ldr	r1, [r3, #16]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	440b      	add	r3, r1
 80070ac:	1e59      	subs	r1, r3, #1
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80070b6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80070b8:	4b6b      	ldr	r3, [pc, #428]	@ (8007268 <USB_EPStartXfer+0x2e4>)
 80070ba:	400b      	ands	r3, r1
 80070bc:	69b9      	ldr	r1, [r7, #24]
 80070be:	0148      	lsls	r0, r1, #5
 80070c0:	69f9      	ldr	r1, [r7, #28]
 80070c2:	4401      	add	r1, r0
 80070c4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80070c8:	4313      	orrs	r3, r2
 80070ca:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070d8:	691a      	ldr	r2, [r3, #16]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070e2:	69b9      	ldr	r1, [r7, #24]
 80070e4:	0148      	lsls	r0, r1, #5
 80070e6:	69f9      	ldr	r1, [r7, #28]
 80070e8:	4401      	add	r1, r0
 80070ea:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80070ee:	4313      	orrs	r3, r2
 80070f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	791b      	ldrb	r3, [r3, #4]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d11f      	bne.n	800713a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	4413      	add	r3, r2
 8007102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	0151      	lsls	r1, r2, #5
 800710c:	69fa      	ldr	r2, [r7, #28]
 800710e:	440a      	add	r2, r1
 8007110:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007114:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007118:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	4413      	add	r3, r2
 8007122:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	69ba      	ldr	r2, [r7, #24]
 800712a:	0151      	lsls	r1, r2, #5
 800712c:	69fa      	ldr	r2, [r7, #28]
 800712e:	440a      	add	r2, r1
 8007130:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007134:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007138:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800713a:	79fb      	ldrb	r3, [r7, #7]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d14b      	bne.n	80071d8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	69db      	ldr	r3, [r3, #28]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d009      	beq.n	800715c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007154:	461a      	mov	r2, r3
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	791b      	ldrb	r3, [r3, #4]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d128      	bne.n	80071b6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007170:	2b00      	cmp	r3, #0
 8007172:	d110      	bne.n	8007196 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	69ba      	ldr	r2, [r7, #24]
 8007184:	0151      	lsls	r1, r2, #5
 8007186:	69fa      	ldr	r2, [r7, #28]
 8007188:	440a      	add	r2, r1
 800718a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800718e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	e00f      	b.n	80071b6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	4413      	add	r3, r2
 800719e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	69ba      	ldr	r2, [r7, #24]
 80071a6:	0151      	lsls	r1, r2, #5
 80071a8:	69fa      	ldr	r2, [r7, #28]
 80071aa:	440a      	add	r2, r1
 80071ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071b4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	015a      	lsls	r2, r3, #5
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	4413      	add	r3, r2
 80071be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	69ba      	ldr	r2, [r7, #24]
 80071c6:	0151      	lsls	r1, r2, #5
 80071c8:	69fa      	ldr	r2, [r7, #28]
 80071ca:	440a      	add	r2, r1
 80071cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071d0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80071d4:	6013      	str	r3, [r2, #0]
 80071d6:	e16a      	b.n	80074ae <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	0151      	lsls	r1, r2, #5
 80071ea:	69fa      	ldr	r2, [r7, #28]
 80071ec:	440a      	add	r2, r1
 80071ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80071f6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	791b      	ldrb	r3, [r3, #4]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d015      	beq.n	800722c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 8152 	beq.w	80074ae <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007210:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	f003 030f 	and.w	r3, r3, #15
 800721a:	2101      	movs	r1, #1
 800721c:	fa01 f303 	lsl.w	r3, r1, r3
 8007220:	69f9      	ldr	r1, [r7, #28]
 8007222:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007226:	4313      	orrs	r3, r2
 8007228:	634b      	str	r3, [r1, #52]	@ 0x34
 800722a:	e140      	b.n	80074ae <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007238:	2b00      	cmp	r3, #0
 800723a:	d117      	bne.n	800726c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	69ba      	ldr	r2, [r7, #24]
 800724c:	0151      	lsls	r1, r2, #5
 800724e:	69fa      	ldr	r2, [r7, #28]
 8007250:	440a      	add	r2, r1
 8007252:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007256:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800725a:	6013      	str	r3, [r2, #0]
 800725c:	e016      	b.n	800728c <USB_EPStartXfer+0x308>
 800725e:	bf00      	nop
 8007260:	e007ffff 	.word	0xe007ffff
 8007264:	fff80000 	.word	0xfff80000
 8007268:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	015a      	lsls	r2, r3, #5
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	4413      	add	r3, r2
 8007274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	69ba      	ldr	r2, [r7, #24]
 800727c:	0151      	lsls	r1, r2, #5
 800727e:	69fa      	ldr	r2, [r7, #28]
 8007280:	440a      	add	r2, r1
 8007282:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800728a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	68d9      	ldr	r1, [r3, #12]
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	781a      	ldrb	r2, [r3, #0]
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	b298      	uxth	r0, r3
 800729a:	79fb      	ldrb	r3, [r7, #7]
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	4603      	mov	r3, r0
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 f9b9 	bl	8007618 <USB_WritePacket>
 80072a6:	e102      	b.n	80074ae <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	015a      	lsls	r2, r3, #5
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	4413      	add	r3, r2
 80072b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072b4:	691a      	ldr	r2, [r3, #16]
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	0159      	lsls	r1, r3, #5
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	440b      	add	r3, r1
 80072be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072c2:	4619      	mov	r1, r3
 80072c4:	4b7c      	ldr	r3, [pc, #496]	@ (80074b8 <USB_EPStartXfer+0x534>)
 80072c6:	4013      	ands	r3, r2
 80072c8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	015a      	lsls	r2, r3, #5
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	4413      	add	r3, r2
 80072d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072d6:	691a      	ldr	r2, [r3, #16]
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	0159      	lsls	r1, r3, #5
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	440b      	add	r3, r1
 80072e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072e4:	4619      	mov	r1, r3
 80072e6:	4b75      	ldr	r3, [pc, #468]	@ (80074bc <USB_EPStartXfer+0x538>)
 80072e8:	4013      	ands	r3, r2
 80072ea:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d12f      	bne.n	8007352 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d003      	beq.n	8007302 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	689a      	ldr	r2, [r3, #8]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	689a      	ldr	r2, [r3, #8]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	4413      	add	r3, r2
 8007312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007316:	691a      	ldr	r2, [r3, #16]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007320:	69b9      	ldr	r1, [r7, #24]
 8007322:	0148      	lsls	r0, r1, #5
 8007324:	69f9      	ldr	r1, [r7, #28]
 8007326:	4401      	add	r1, r0
 8007328:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800732c:	4313      	orrs	r3, r2
 800732e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	69ba      	ldr	r2, [r7, #24]
 8007340:	0151      	lsls	r1, r2, #5
 8007342:	69fa      	ldr	r2, [r7, #28]
 8007344:	440a      	add	r2, r1
 8007346:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800734a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800734e:	6113      	str	r3, [r2, #16]
 8007350:	e05f      	b.n	8007412 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d123      	bne.n	80073a2 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	4413      	add	r3, r2
 8007362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007366:	691a      	ldr	r2, [r3, #16]
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007370:	69b9      	ldr	r1, [r7, #24]
 8007372:	0148      	lsls	r0, r1, #5
 8007374:	69f9      	ldr	r1, [r7, #28]
 8007376:	4401      	add	r1, r0
 8007378:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800737c:	4313      	orrs	r3, r2
 800737e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	4413      	add	r3, r2
 8007388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	69ba      	ldr	r2, [r7, #24]
 8007390:	0151      	lsls	r1, r2, #5
 8007392:	69fa      	ldr	r2, [r7, #28]
 8007394:	440a      	add	r2, r1
 8007396:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800739a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800739e:	6113      	str	r3, [r2, #16]
 80073a0:	e037      	b.n	8007412 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	691a      	ldr	r2, [r3, #16]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	4413      	add	r3, r2
 80073ac:	1e5a      	subs	r2, r3, #1
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	8afa      	ldrh	r2, [r7, #22]
 80073be:	fb03 f202 	mul.w	r2, r3, r2
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073d2:	691a      	ldr	r2, [r3, #16]
 80073d4:	8afb      	ldrh	r3, [r7, #22]
 80073d6:	04d9      	lsls	r1, r3, #19
 80073d8:	4b39      	ldr	r3, [pc, #228]	@ (80074c0 <USB_EPStartXfer+0x53c>)
 80073da:	400b      	ands	r3, r1
 80073dc:	69b9      	ldr	r1, [r7, #24]
 80073de:	0148      	lsls	r0, r1, #5
 80073e0:	69f9      	ldr	r1, [r7, #28]
 80073e2:	4401      	add	r1, r0
 80073e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80073e8:	4313      	orrs	r3, r2
 80073ea:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	015a      	lsls	r2, r3, #5
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	4413      	add	r3, r2
 80073f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073f8:	691a      	ldr	r2, [r3, #16]
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007402:	69b9      	ldr	r1, [r7, #24]
 8007404:	0148      	lsls	r0, r1, #5
 8007406:	69f9      	ldr	r1, [r7, #28]
 8007408:	4401      	add	r1, r0
 800740a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800740e:	4313      	orrs	r3, r2
 8007410:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007412:	79fb      	ldrb	r3, [r7, #7]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d10d      	bne.n	8007434 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d009      	beq.n	8007434 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	68d9      	ldr	r1, [r3, #12]
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007430:	460a      	mov	r2, r1
 8007432:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	791b      	ldrb	r3, [r3, #4]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d128      	bne.n	800748e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007448:	2b00      	cmp	r3, #0
 800744a:	d110      	bne.n	800746e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	4413      	add	r3, r2
 8007454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	69ba      	ldr	r2, [r7, #24]
 800745c:	0151      	lsls	r1, r2, #5
 800745e:	69fa      	ldr	r2, [r7, #28]
 8007460:	440a      	add	r2, r1
 8007462:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007466:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800746a:	6013      	str	r3, [r2, #0]
 800746c:	e00f      	b.n	800748e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	015a      	lsls	r2, r3, #5
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	4413      	add	r3, r2
 8007476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	0151      	lsls	r1, r2, #5
 8007480:	69fa      	ldr	r2, [r7, #28]
 8007482:	440a      	add	r2, r1
 8007484:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800748c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	015a      	lsls	r2, r3, #5
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	4413      	add	r3, r2
 8007496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	69ba      	ldr	r2, [r7, #24]
 800749e:	0151      	lsls	r1, r2, #5
 80074a0:	69fa      	ldr	r2, [r7, #28]
 80074a2:	440a      	add	r2, r1
 80074a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074a8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80074ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3720      	adds	r7, #32
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	fff80000 	.word	0xfff80000
 80074bc:	e007ffff 	.word	0xe007ffff
 80074c0:	1ff80000 	.word	0x1ff80000

080074c4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b087      	sub	sp, #28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	785b      	ldrb	r3, [r3, #1]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d14a      	bne.n	8007578 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074fa:	f040 8086 	bne.w	800760a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	7812      	ldrb	r2, [r2, #0]
 8007512:	0151      	lsls	r1, r2, #5
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	440a      	add	r2, r1
 8007518:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800751c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007520:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	4413      	add	r3, r2
 800752c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	7812      	ldrb	r2, [r2, #0]
 8007536:	0151      	lsls	r1, r2, #5
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	440a      	add	r2, r1
 800753c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007540:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007544:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	3301      	adds	r3, #1
 800754a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007552:	4293      	cmp	r3, r2
 8007554:	d902      	bls.n	800755c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	75fb      	strb	r3, [r7, #23]
          break;
 800755a:	e056      	b.n	800760a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	015a      	lsls	r2, r3, #5
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	4413      	add	r3, r2
 8007566:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007570:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007574:	d0e7      	beq.n	8007546 <USB_EPStopXfer+0x82>
 8007576:	e048      	b.n	800760a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	015a      	lsls	r2, r3, #5
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	4413      	add	r3, r2
 8007582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800758c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007590:	d13b      	bne.n	800760a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	015a      	lsls	r2, r3, #5
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	4413      	add	r3, r2
 800759c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	7812      	ldrb	r2, [r2, #0]
 80075a6:	0151      	lsls	r1, r2, #5
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	440a      	add	r2, r1
 80075ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80075b4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	7812      	ldrb	r2, [r2, #0]
 80075ca:	0151      	lsls	r1, r2, #5
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	440a      	add	r2, r1
 80075d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80075d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3301      	adds	r3, #1
 80075de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d902      	bls.n	80075f0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	75fb      	strb	r3, [r7, #23]
          break;
 80075ee:	e00c      	b.n	800760a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	015a      	lsls	r2, r3, #5
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007604:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007608:	d0e7      	beq.n	80075da <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800760a:	7dfb      	ldrb	r3, [r7, #23]
}
 800760c:	4618      	mov	r0, r3
 800760e:	371c      	adds	r7, #28
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007618:	b480      	push	{r7}
 800761a:	b089      	sub	sp, #36	@ 0x24
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	4611      	mov	r1, r2
 8007624:	461a      	mov	r2, r3
 8007626:	460b      	mov	r3, r1
 8007628:	71fb      	strb	r3, [r7, #7]
 800762a:	4613      	mov	r3, r2
 800762c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007636:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800763a:	2b00      	cmp	r3, #0
 800763c:	d123      	bne.n	8007686 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800763e:	88bb      	ldrh	r3, [r7, #4]
 8007640:	3303      	adds	r3, #3
 8007642:	089b      	lsrs	r3, r3, #2
 8007644:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007646:	2300      	movs	r3, #0
 8007648:	61bb      	str	r3, [r7, #24]
 800764a:	e018      	b.n	800767e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800764c:	79fb      	ldrb	r3, [r7, #7]
 800764e:	031a      	lsls	r2, r3, #12
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	4413      	add	r3, r2
 8007654:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007658:	461a      	mov	r2, r3
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	3301      	adds	r3, #1
 8007664:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	3301      	adds	r3, #1
 800766a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	3301      	adds	r3, #1
 8007670:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	3301      	adds	r3, #1
 8007676:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	3301      	adds	r3, #1
 800767c:	61bb      	str	r3, [r7, #24]
 800767e:	69ba      	ldr	r2, [r7, #24]
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	429a      	cmp	r2, r3
 8007684:	d3e2      	bcc.n	800764c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3724      	adds	r7, #36	@ 0x24
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007694:	b480      	push	{r7}
 8007696:	b08b      	sub	sp, #44	@ 0x2c
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	4613      	mov	r3, r2
 80076a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80076aa:	88fb      	ldrh	r3, [r7, #6]
 80076ac:	089b      	lsrs	r3, r3, #2
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80076b2:	88fb      	ldrh	r3, [r7, #6]
 80076b4:	f003 0303 	and.w	r3, r3, #3
 80076b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80076ba:	2300      	movs	r3, #0
 80076bc:	623b      	str	r3, [r7, #32]
 80076be:	e014      	b.n	80076ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80076cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ce:	3301      	adds	r3, #1
 80076d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80076d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d4:	3301      	adds	r3, #1
 80076d6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80076d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076da:	3301      	adds	r3, #1
 80076dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80076de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e0:	3301      	adds	r3, #1
 80076e2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80076e4:	6a3b      	ldr	r3, [r7, #32]
 80076e6:	3301      	adds	r3, #1
 80076e8:	623b      	str	r3, [r7, #32]
 80076ea:	6a3a      	ldr	r2, [r7, #32]
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d3e6      	bcc.n	80076c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80076f2:	8bfb      	ldrh	r3, [r7, #30]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d01e      	beq.n	8007736 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80076f8:	2300      	movs	r3, #0
 80076fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007702:	461a      	mov	r2, r3
 8007704:	f107 0310 	add.w	r3, r7, #16
 8007708:	6812      	ldr	r2, [r2, #0]
 800770a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	b2db      	uxtb	r3, r3
 8007712:	00db      	lsls	r3, r3, #3
 8007714:	fa22 f303 	lsr.w	r3, r2, r3
 8007718:	b2da      	uxtb	r2, r3
 800771a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771c:	701a      	strb	r2, [r3, #0]
      i++;
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	3301      	adds	r3, #1
 8007722:	623b      	str	r3, [r7, #32]
      pDest++;
 8007724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007726:	3301      	adds	r3, #1
 8007728:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800772a:	8bfb      	ldrh	r3, [r7, #30]
 800772c:	3b01      	subs	r3, #1
 800772e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007730:	8bfb      	ldrh	r3, [r7, #30]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1ea      	bne.n	800770c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007738:	4618      	mov	r0, r3
 800773a:	372c      	adds	r7, #44	@ 0x2c
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	785b      	ldrb	r3, [r3, #1]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d12c      	bne.n	80077ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	db12      	blt.n	8007798 <USB_EPSetStall+0x54>
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00f      	beq.n	8007798 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	015a      	lsls	r2, r3, #5
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	4413      	add	r3, r2
 8007780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	0151      	lsls	r1, r2, #5
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	440a      	add	r2, r1
 800778e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007792:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007796:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68ba      	ldr	r2, [r7, #8]
 80077a8:	0151      	lsls	r1, r2, #5
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	440a      	add	r2, r1
 80077ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80077b6:	6013      	str	r3, [r2, #0]
 80077b8:	e02b      	b.n	8007812 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	015a      	lsls	r2, r3, #5
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	4413      	add	r3, r2
 80077c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	db12      	blt.n	80077f2 <USB_EPSetStall+0xae>
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00f      	beq.n	80077f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	0151      	lsls	r1, r2, #5
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	440a      	add	r2, r1
 80077e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80077f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	015a      	lsls	r2, r3, #5
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	4413      	add	r3, r2
 80077fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	0151      	lsls	r1, r2, #5
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	440a      	add	r2, r1
 8007808:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800780c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007810:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	785b      	ldrb	r3, [r3, #1]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d128      	bne.n	800788e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	015a      	lsls	r2, r3, #5
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	4413      	add	r3, r2
 8007844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	0151      	lsls	r1, r2, #5
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	440a      	add	r2, r1
 8007852:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007856:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800785a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	791b      	ldrb	r3, [r3, #4]
 8007860:	2b03      	cmp	r3, #3
 8007862:	d003      	beq.n	800786c <USB_EPClearStall+0x4c>
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	791b      	ldrb	r3, [r3, #4]
 8007868:	2b02      	cmp	r3, #2
 800786a:	d138      	bne.n	80078de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	0151      	lsls	r1, r2, #5
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	440a      	add	r2, r1
 8007882:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800788a:	6013      	str	r3, [r2, #0]
 800788c:	e027      	b.n	80078de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	015a      	lsls	r2, r3, #5
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	4413      	add	r3, r2
 8007896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	0151      	lsls	r1, r2, #5
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	440a      	add	r2, r1
 80078a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80078ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	791b      	ldrb	r3, [r3, #4]
 80078b2:	2b03      	cmp	r3, #3
 80078b4:	d003      	beq.n	80078be <USB_EPClearStall+0x9e>
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	791b      	ldrb	r3, [r3, #4]
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d10f      	bne.n	80078de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	015a      	lsls	r2, r3, #5
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	4413      	add	r3, r2
 80078c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	0151      	lsls	r1, r2, #5
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	440a      	add	r2, r1
 80078d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3714      	adds	r7, #20
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	460b      	mov	r3, r1
 80078f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800790a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800790e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	78fb      	ldrb	r3, [r7, #3]
 800791a:	011b      	lsls	r3, r3, #4
 800791c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007920:	68f9      	ldr	r1, [r7, #12]
 8007922:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007926:	4313      	orrs	r3, r2
 8007928:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007952:	f023 0303 	bic.w	r3, r3, #3
 8007956:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007966:	f023 0302 	bic.w	r3, r3, #2
 800796a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr

0800797a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800797a:	b480      	push	{r7}
 800797c:	b085      	sub	sp, #20
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007994:	f023 0303 	bic.w	r3, r3, #3
 8007998:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079a8:	f043 0302 	orr.w	r3, r3, #2
 80079ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	4013      	ands	r3, r2
 80079d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80079d4:	68fb      	ldr	r3, [r7, #12]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b085      	sub	sp, #20
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079fe:	69db      	ldr	r3, [r3, #28]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	4013      	ands	r3, r2
 8007a04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	0c1b      	lsrs	r3, r3, #16
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b085      	sub	sp, #20
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a32:	69db      	ldr	r3, [r3, #28]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	4013      	ands	r3, r2
 8007a38:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	b29b      	uxth	r3, r3
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3714      	adds	r7, #20
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b085      	sub	sp, #20
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	460b      	mov	r3, r1
 8007a54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007a5a:	78fb      	ldrb	r3, [r7, #3]
 8007a5c:	015a      	lsls	r2, r3, #5
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	4413      	add	r3, r2
 8007a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	4013      	ands	r3, r2
 8007a76:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a78:	68bb      	ldr	r3, [r7, #8]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b087      	sub	sp, #28
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
 8007a8e:	460b      	mov	r3, r1
 8007a90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aa8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007aaa:	78fb      	ldrb	r3, [r7, #3]
 8007aac:	f003 030f 	and.w	r3, r3, #15
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ab6:	01db      	lsls	r3, r3, #7
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007ac0:	78fb      	ldrb	r3, [r7, #3]
 8007ac2:	015a      	lsls	r2, r3, #5
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ad4:	68bb      	ldr	r3, [r7, #8]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	371c      	adds	r7, #28
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr

08007ae2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ae2:	b480      	push	{r7}
 8007ae4:	b083      	sub	sp, #12
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	f003 0301 	and.w	r3, r3, #1
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
	...

08007b00 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4b09      	ldr	r3, [pc, #36]	@ (8007b44 <USB_ActivateSetup+0x44>)
 8007b1e:	4013      	ands	r3, r2
 8007b20:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	fffff800 	.word	0xfffff800

08007b48 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	460b      	mov	r3, r1
 8007b52:	607a      	str	r2, [r7, #4]
 8007b54:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	333c      	adds	r3, #60	@ 0x3c
 8007b5e:	3304      	adds	r3, #4
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	4a26      	ldr	r2, [pc, #152]	@ (8007c00 <USB_EP0_OutStart+0xb8>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d90a      	bls.n	8007b82 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b7c:	d101      	bne.n	8007b82 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	e037      	b.n	8007bf2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b88:	461a      	mov	r2, r3
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ba0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bb0:	f043 0318 	orr.w	r3, r3, #24
 8007bb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bc4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007bc8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007bca:	7afb      	ldrb	r3, [r7, #11]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d10f      	bne.n	8007bf0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bea:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007bee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	371c      	adds	r7, #28
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	4f54300a 	.word	0x4f54300a

08007c04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	3301      	adds	r3, #1
 8007c14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c1c:	d901      	bls.n	8007c22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e01b      	b.n	8007c5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	daf2      	bge.n	8007c10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	f043 0201 	orr.w	r2, r3, #1
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c46:	d901      	bls.n	8007c4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e006      	b.n	8007c5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	f003 0301 	and.w	r3, r3, #1
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d0f0      	beq.n	8007c3a <USB_CoreReset+0x36>

  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
	...

08007c68 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007c74:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007c78:	f002 fd12 	bl	800a6a0 <malloc>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d109      	bne.n	8007c9a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	32b0      	adds	r2, #176	@ 0xb0
 8007c90:	2100      	movs	r1, #0
 8007c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007c96:	2302      	movs	r3, #2
 8007c98:	e0d4      	b.n	8007e44 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007c9a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f002 fdbb 	bl	800a81c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	32b0      	adds	r2, #176	@ 0xb0
 8007cb0:	68f9      	ldr	r1, [r7, #12]
 8007cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	32b0      	adds	r2, #176	@ 0xb0
 8007cc0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	7c1b      	ldrb	r3, [r3, #16]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d138      	bne.n	8007d44 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007cd2:	4b5e      	ldr	r3, [pc, #376]	@ (8007e4c <USBD_CDC_Init+0x1e4>)
 8007cd4:	7819      	ldrb	r1, [r3, #0]
 8007cd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007cda:	2202      	movs	r2, #2
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f002 fb3c 	bl	800a35a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007ce2:	4b5a      	ldr	r3, [pc, #360]	@ (8007e4c <USBD_CDC_Init+0x1e4>)
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	f003 020f 	and.w	r2, r3, #15
 8007cea:	6879      	ldr	r1, [r7, #4]
 8007cec:	4613      	mov	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	440b      	add	r3, r1
 8007cf6:	3324      	adds	r3, #36	@ 0x24
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007cfc:	4b54      	ldr	r3, [pc, #336]	@ (8007e50 <USBD_CDC_Init+0x1e8>)
 8007cfe:	7819      	ldrb	r1, [r3, #0]
 8007d00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d04:	2202      	movs	r2, #2
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f002 fb27 	bl	800a35a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007d0c:	4b50      	ldr	r3, [pc, #320]	@ (8007e50 <USBD_CDC_Init+0x1e8>)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	f003 020f 	and.w	r2, r3, #15
 8007d14:	6879      	ldr	r1, [r7, #4]
 8007d16:	4613      	mov	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4413      	add	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	440b      	add	r3, r1
 8007d20:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007d24:	2201      	movs	r2, #1
 8007d26:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007d28:	4b4a      	ldr	r3, [pc, #296]	@ (8007e54 <USBD_CDC_Init+0x1ec>)
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	f003 020f 	and.w	r2, r3, #15
 8007d30:	6879      	ldr	r1, [r7, #4]
 8007d32:	4613      	mov	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4413      	add	r3, r2
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	440b      	add	r3, r1
 8007d3c:	3326      	adds	r3, #38	@ 0x26
 8007d3e:	2210      	movs	r2, #16
 8007d40:	801a      	strh	r2, [r3, #0]
 8007d42:	e035      	b.n	8007db0 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007d44:	4b41      	ldr	r3, [pc, #260]	@ (8007e4c <USBD_CDC_Init+0x1e4>)
 8007d46:	7819      	ldrb	r1, [r3, #0]
 8007d48:	2340      	movs	r3, #64	@ 0x40
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f002 fb04 	bl	800a35a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007d52:	4b3e      	ldr	r3, [pc, #248]	@ (8007e4c <USBD_CDC_Init+0x1e4>)
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	f003 020f 	and.w	r2, r3, #15
 8007d5a:	6879      	ldr	r1, [r7, #4]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	440b      	add	r3, r1
 8007d66:	3324      	adds	r3, #36	@ 0x24
 8007d68:	2201      	movs	r2, #1
 8007d6a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007d6c:	4b38      	ldr	r3, [pc, #224]	@ (8007e50 <USBD_CDC_Init+0x1e8>)
 8007d6e:	7819      	ldrb	r1, [r3, #0]
 8007d70:	2340      	movs	r3, #64	@ 0x40
 8007d72:	2202      	movs	r2, #2
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f002 faf0 	bl	800a35a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007d7a:	4b35      	ldr	r3, [pc, #212]	@ (8007e50 <USBD_CDC_Init+0x1e8>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	f003 020f 	and.w	r2, r3, #15
 8007d82:	6879      	ldr	r1, [r7, #4]
 8007d84:	4613      	mov	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	440b      	add	r3, r1
 8007d8e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007d92:	2201      	movs	r2, #1
 8007d94:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007d96:	4b2f      	ldr	r3, [pc, #188]	@ (8007e54 <USBD_CDC_Init+0x1ec>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	f003 020f 	and.w	r2, r3, #15
 8007d9e:	6879      	ldr	r1, [r7, #4]
 8007da0:	4613      	mov	r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	4413      	add	r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	440b      	add	r3, r1
 8007daa:	3326      	adds	r3, #38	@ 0x26
 8007dac:	2210      	movs	r2, #16
 8007dae:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007db0:	4b28      	ldr	r3, [pc, #160]	@ (8007e54 <USBD_CDC_Init+0x1ec>)
 8007db2:	7819      	ldrb	r1, [r3, #0]
 8007db4:	2308      	movs	r3, #8
 8007db6:	2203      	movs	r2, #3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f002 face 	bl	800a35a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007dbe:	4b25      	ldr	r3, [pc, #148]	@ (8007e54 <USBD_CDC_Init+0x1ec>)
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	f003 020f 	and.w	r2, r3, #15
 8007dc6:	6879      	ldr	r1, [r7, #4]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	440b      	add	r3, r1
 8007dd2:	3324      	adds	r3, #36	@ 0x24
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	33b0      	adds	r3, #176	@ 0xb0
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	4413      	add	r3, r2
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8007e0e:	2302      	movs	r3, #2
 8007e10:	e018      	b.n	8007e44 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	7c1b      	ldrb	r3, [r3, #16]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10a      	bne.n	8007e30 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007e50 <USBD_CDC_Init+0x1e8>)
 8007e1c:	7819      	ldrb	r1, [r3, #0]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f002 fb85 	bl	800a538 <USBD_LL_PrepareReceive>
 8007e2e:	e008      	b.n	8007e42 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e30:	4b07      	ldr	r3, [pc, #28]	@ (8007e50 <USBD_CDC_Init+0x1e8>)
 8007e32:	7819      	ldrb	r1, [r3, #0]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e3a:	2340      	movs	r3, #64	@ 0x40
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f002 fb7b 	bl	800a538 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	20000303 	.word	0x20000303
 8007e50:	20000304 	.word	0x20000304
 8007e54:	20000305 	.word	0x20000305

08007e58 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	460b      	mov	r3, r1
 8007e62:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007e64:	4b3a      	ldr	r3, [pc, #232]	@ (8007f50 <USBD_CDC_DeInit+0xf8>)
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	4619      	mov	r1, r3
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f002 fa9b 	bl	800a3a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007e70:	4b37      	ldr	r3, [pc, #220]	@ (8007f50 <USBD_CDC_DeInit+0xf8>)
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	f003 020f 	and.w	r2, r3, #15
 8007e78:	6879      	ldr	r1, [r7, #4]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	440b      	add	r3, r1
 8007e84:	3324      	adds	r3, #36	@ 0x24
 8007e86:	2200      	movs	r2, #0
 8007e88:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007e8a:	4b32      	ldr	r3, [pc, #200]	@ (8007f54 <USBD_CDC_DeInit+0xfc>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f002 fa88 	bl	800a3a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007e96:	4b2f      	ldr	r3, [pc, #188]	@ (8007f54 <USBD_CDC_DeInit+0xfc>)
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	f003 020f 	and.w	r2, r3, #15
 8007e9e:	6879      	ldr	r1, [r7, #4]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4413      	add	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	440b      	add	r3, r1
 8007eaa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007eae:	2200      	movs	r2, #0
 8007eb0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007eb2:	4b29      	ldr	r3, [pc, #164]	@ (8007f58 <USBD_CDC_DeInit+0x100>)
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f002 fa74 	bl	800a3a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007ebe:	4b26      	ldr	r3, [pc, #152]	@ (8007f58 <USBD_CDC_DeInit+0x100>)
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	f003 020f 	and.w	r2, r3, #15
 8007ec6:	6879      	ldr	r1, [r7, #4]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4413      	add	r3, r2
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	440b      	add	r3, r1
 8007ed2:	3324      	adds	r3, #36	@ 0x24
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8007f58 <USBD_CDC_DeInit+0x100>)
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	f003 020f 	and.w	r2, r3, #15
 8007ee0:	6879      	ldr	r1, [r7, #4]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	4413      	add	r3, r2
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	440b      	add	r3, r1
 8007eec:	3326      	adds	r3, #38	@ 0x26
 8007eee:	2200      	movs	r2, #0
 8007ef0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	32b0      	adds	r2, #176	@ 0xb0
 8007efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d01f      	beq.n	8007f44 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	33b0      	adds	r3, #176	@ 0xb0
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	4413      	add	r3, r2
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	32b0      	adds	r2, #176	@ 0xb0
 8007f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f002 fbc2 	bl	800a6b0 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	32b0      	adds	r2, #176	@ 0xb0
 8007f36:	2100      	movs	r1, #0
 8007f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	20000303 	.word	0x20000303
 8007f54:	20000304 	.word	0x20000304
 8007f58:	20000305 	.word	0x20000305

08007f5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	32b0      	adds	r2, #176	@ 0xb0
 8007f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f74:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007f76:	2300      	movs	r3, #0
 8007f78:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d101      	bne.n	8007f8c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	e0bf      	b.n	800810c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d050      	beq.n	800803a <USBD_CDC_Setup+0xde>
 8007f98:	2b20      	cmp	r3, #32
 8007f9a:	f040 80af 	bne.w	80080fc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	88db      	ldrh	r3, [r3, #6]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d03a      	beq.n	800801c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	b25b      	sxtb	r3, r3
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	da1b      	bge.n	8007fe8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	33b0      	adds	r3, #176	@ 0xb0
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	4413      	add	r3, r2
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007fc6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	88d2      	ldrh	r2, [r2, #6]
 8007fcc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	88db      	ldrh	r3, [r3, #6]
 8007fd2:	2b07      	cmp	r3, #7
 8007fd4:	bf28      	it	cs
 8007fd6:	2307      	movcs	r3, #7
 8007fd8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	89fa      	ldrh	r2, [r7, #14]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f001 fd7d 	bl	8009ae0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007fe6:	e090      	b.n	800810a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	785a      	ldrb	r2, [r3, #1]
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	88db      	ldrh	r3, [r3, #6]
 8007ff6:	2b3f      	cmp	r3, #63	@ 0x3f
 8007ff8:	d803      	bhi.n	8008002 <USBD_CDC_Setup+0xa6>
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	88db      	ldrh	r3, [r3, #6]
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	e000      	b.n	8008004 <USBD_CDC_Setup+0xa8>
 8008002:	2240      	movs	r2, #64	@ 0x40
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800800a:	6939      	ldr	r1, [r7, #16]
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008012:	461a      	mov	r2, r3
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f001 fd8f 	bl	8009b38 <USBD_CtlPrepareRx>
      break;
 800801a:	e076      	b.n	800810a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	33b0      	adds	r3, #176	@ 0xb0
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	7850      	ldrb	r0, [r2, #1]
 8008032:	2200      	movs	r2, #0
 8008034:	6839      	ldr	r1, [r7, #0]
 8008036:	4798      	blx	r3
      break;
 8008038:	e067      	b.n	800810a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	785b      	ldrb	r3, [r3, #1]
 800803e:	2b0b      	cmp	r3, #11
 8008040:	d851      	bhi.n	80080e6 <USBD_CDC_Setup+0x18a>
 8008042:	a201      	add	r2, pc, #4	@ (adr r2, 8008048 <USBD_CDC_Setup+0xec>)
 8008044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008048:	08008079 	.word	0x08008079
 800804c:	080080f5 	.word	0x080080f5
 8008050:	080080e7 	.word	0x080080e7
 8008054:	080080e7 	.word	0x080080e7
 8008058:	080080e7 	.word	0x080080e7
 800805c:	080080e7 	.word	0x080080e7
 8008060:	080080e7 	.word	0x080080e7
 8008064:	080080e7 	.word	0x080080e7
 8008068:	080080e7 	.word	0x080080e7
 800806c:	080080e7 	.word	0x080080e7
 8008070:	080080a3 	.word	0x080080a3
 8008074:	080080cd 	.word	0x080080cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b03      	cmp	r3, #3
 8008082:	d107      	bne.n	8008094 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008084:	f107 030a 	add.w	r3, r7, #10
 8008088:	2202      	movs	r2, #2
 800808a:	4619      	mov	r1, r3
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f001 fd27 	bl	8009ae0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008092:	e032      	b.n	80080fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f001 fca5 	bl	80099e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800809c:	2303      	movs	r3, #3
 800809e:	75fb      	strb	r3, [r7, #23]
          break;
 80080a0:	e02b      	b.n	80080fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	2b03      	cmp	r3, #3
 80080ac:	d107      	bne.n	80080be <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80080ae:	f107 030d 	add.w	r3, r7, #13
 80080b2:	2201      	movs	r2, #1
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f001 fd12 	bl	8009ae0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80080bc:	e01d      	b.n	80080fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f001 fc90 	bl	80099e6 <USBD_CtlError>
            ret = USBD_FAIL;
 80080c6:	2303      	movs	r3, #3
 80080c8:	75fb      	strb	r3, [r7, #23]
          break;
 80080ca:	e016      	b.n	80080fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	2b03      	cmp	r3, #3
 80080d6:	d00f      	beq.n	80080f8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f001 fc83 	bl	80099e6 <USBD_CtlError>
            ret = USBD_FAIL;
 80080e0:	2303      	movs	r3, #3
 80080e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80080e4:	e008      	b.n	80080f8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80080e6:	6839      	ldr	r1, [r7, #0]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f001 fc7c 	bl	80099e6 <USBD_CtlError>
          ret = USBD_FAIL;
 80080ee:	2303      	movs	r3, #3
 80080f0:	75fb      	strb	r3, [r7, #23]
          break;
 80080f2:	e002      	b.n	80080fa <USBD_CDC_Setup+0x19e>
          break;
 80080f4:	bf00      	nop
 80080f6:	e008      	b.n	800810a <USBD_CDC_Setup+0x1ae>
          break;
 80080f8:	bf00      	nop
      }
      break;
 80080fa:	e006      	b.n	800810a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80080fc:	6839      	ldr	r1, [r7, #0]
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f001 fc71 	bl	80099e6 <USBD_CtlError>
      ret = USBD_FAIL;
 8008104:	2303      	movs	r3, #3
 8008106:	75fb      	strb	r3, [r7, #23]
      break;
 8008108:	bf00      	nop
  }

  return (uint8_t)ret;
 800810a:	7dfb      	ldrb	r3, [r7, #23]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3718      	adds	r7, #24
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008126:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	32b0      	adds	r2, #176	@ 0xb0
 8008132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800813a:	2303      	movs	r3, #3
 800813c:	e065      	b.n	800820a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	32b0      	adds	r2, #176	@ 0xb0
 8008148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800814c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800814e:	78fb      	ldrb	r3, [r7, #3]
 8008150:	f003 020f 	and.w	r2, r3, #15
 8008154:	6879      	ldr	r1, [r7, #4]
 8008156:	4613      	mov	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	440b      	add	r3, r1
 8008160:	3318      	adds	r3, #24
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d02f      	beq.n	80081c8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008168:	78fb      	ldrb	r3, [r7, #3]
 800816a:	f003 020f 	and.w	r2, r3, #15
 800816e:	6879      	ldr	r1, [r7, #4]
 8008170:	4613      	mov	r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	4413      	add	r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	440b      	add	r3, r1
 800817a:	3318      	adds	r3, #24
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	78fb      	ldrb	r3, [r7, #3]
 8008180:	f003 010f 	and.w	r1, r3, #15
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	460b      	mov	r3, r1
 8008188:	00db      	lsls	r3, r3, #3
 800818a:	440b      	add	r3, r1
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4403      	add	r3, r0
 8008190:	331c      	adds	r3, #28
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	fbb2 f1f3 	udiv	r1, r2, r3
 8008198:	fb01 f303 	mul.w	r3, r1, r3
 800819c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d112      	bne.n	80081c8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80081a2:	78fb      	ldrb	r3, [r7, #3]
 80081a4:	f003 020f 	and.w	r2, r3, #15
 80081a8:	6879      	ldr	r1, [r7, #4]
 80081aa:	4613      	mov	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	4413      	add	r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	440b      	add	r3, r1
 80081b4:	3318      	adds	r3, #24
 80081b6:	2200      	movs	r2, #0
 80081b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80081ba:	78f9      	ldrb	r1, [r7, #3]
 80081bc:	2300      	movs	r3, #0
 80081be:	2200      	movs	r2, #0
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f002 f998 	bl	800a4f6 <USBD_LL_Transmit>
 80081c6:	e01f      	b.n	8008208 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	33b0      	adds	r3, #176	@ 0xb0
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4413      	add	r3, r2
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d010      	beq.n	8008208 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	33b0      	adds	r3, #176	@ 0xb0
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	4413      	add	r3, r2
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008204:	78fa      	ldrb	r2, [r7, #3]
 8008206:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	460b      	mov	r3, r1
 800821c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	32b0      	adds	r2, #176	@ 0xb0
 8008228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800822c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	32b0      	adds	r2, #176	@ 0xb0
 8008238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008240:	2303      	movs	r3, #3
 8008242:	e01a      	b.n	800827a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008244:	78fb      	ldrb	r3, [r7, #3]
 8008246:	4619      	mov	r1, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f002 f996 	bl	800a57a <USBD_LL_GetRxDataSize>
 800824e:	4602      	mov	r2, r0
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	33b0      	adds	r3, #176	@ 0xb0
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	4413      	add	r3, r2
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008274:	4611      	mov	r1, r2
 8008276:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b084      	sub	sp, #16
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	32b0      	adds	r2, #176	@ 0xb0
 8008294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008298:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d101      	bne.n	80082a4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e024      	b.n	80082ee <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	33b0      	adds	r3, #176	@ 0xb0
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4413      	add	r3, r2
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d019      	beq.n	80082ec <USBD_CDC_EP0_RxReady+0x6a>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80082be:	2bff      	cmp	r3, #255	@ 0xff
 80082c0:	d014      	beq.n	80082ec <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	33b0      	adds	r3, #176	@ 0xb0
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	4413      	add	r3, r2
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80082da:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80082e2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	22ff      	movs	r2, #255	@ 0xff
 80082e8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
	...

080082f8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b086      	sub	sp, #24
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008300:	2182      	movs	r1, #130	@ 0x82
 8008302:	4818      	ldr	r0, [pc, #96]	@ (8008364 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008304:	f000 fd0f 	bl	8008d26 <USBD_GetEpDesc>
 8008308:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800830a:	2101      	movs	r1, #1
 800830c:	4815      	ldr	r0, [pc, #84]	@ (8008364 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800830e:	f000 fd0a 	bl	8008d26 <USBD_GetEpDesc>
 8008312:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008314:	2181      	movs	r1, #129	@ 0x81
 8008316:	4813      	ldr	r0, [pc, #76]	@ (8008364 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008318:	f000 fd05 	bl	8008d26 <USBD_GetEpDesc>
 800831c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	2210      	movs	r2, #16
 8008328:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d006      	beq.n	800833e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	2200      	movs	r2, #0
 8008334:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008338:	711a      	strb	r2, [r3, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d006      	beq.n	8008352 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800834c:	711a      	strb	r2, [r3, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2243      	movs	r2, #67	@ 0x43
 8008356:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008358:	4b02      	ldr	r3, [pc, #8]	@ (8008364 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800835a:	4618      	mov	r0, r3
 800835c:	3718      	adds	r7, #24
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	200002c0 	.word	0x200002c0

08008368 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008370:	2182      	movs	r1, #130	@ 0x82
 8008372:	4818      	ldr	r0, [pc, #96]	@ (80083d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008374:	f000 fcd7 	bl	8008d26 <USBD_GetEpDesc>
 8008378:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800837a:	2101      	movs	r1, #1
 800837c:	4815      	ldr	r0, [pc, #84]	@ (80083d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800837e:	f000 fcd2 	bl	8008d26 <USBD_GetEpDesc>
 8008382:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008384:	2181      	movs	r1, #129	@ 0x81
 8008386:	4813      	ldr	r0, [pc, #76]	@ (80083d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008388:	f000 fccd 	bl	8008d26 <USBD_GetEpDesc>
 800838c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	2210      	movs	r2, #16
 8008398:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d006      	beq.n	80083ae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	2200      	movs	r2, #0
 80083a4:	711a      	strb	r2, [r3, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f042 0202 	orr.w	r2, r2, #2
 80083ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d006      	beq.n	80083c2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	711a      	strb	r2, [r3, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f042 0202 	orr.w	r2, r2, #2
 80083c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2243      	movs	r2, #67	@ 0x43
 80083c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80083c8:	4b02      	ldr	r3, [pc, #8]	@ (80083d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3718      	adds	r7, #24
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	200002c0 	.word	0x200002c0

080083d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80083e0:	2182      	movs	r1, #130	@ 0x82
 80083e2:	4818      	ldr	r0, [pc, #96]	@ (8008444 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80083e4:	f000 fc9f 	bl	8008d26 <USBD_GetEpDesc>
 80083e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80083ea:	2101      	movs	r1, #1
 80083ec:	4815      	ldr	r0, [pc, #84]	@ (8008444 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80083ee:	f000 fc9a 	bl	8008d26 <USBD_GetEpDesc>
 80083f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80083f4:	2181      	movs	r1, #129	@ 0x81
 80083f6:	4813      	ldr	r0, [pc, #76]	@ (8008444 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80083f8:	f000 fc95 	bl	8008d26 <USBD_GetEpDesc>
 80083fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d002      	beq.n	800840a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	2210      	movs	r2, #16
 8008408:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d006      	beq.n	800841e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	2200      	movs	r2, #0
 8008414:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008418:	711a      	strb	r2, [r3, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d006      	beq.n	8008432 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800842c:	711a      	strb	r2, [r3, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2243      	movs	r2, #67	@ 0x43
 8008436:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008438:	4b02      	ldr	r3, [pc, #8]	@ (8008444 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800843a:	4618      	mov	r0, r3
 800843c:	3718      	adds	r7, #24
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	200002c0 	.word	0x200002c0

08008448 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	220a      	movs	r2, #10
 8008454:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008456:	4b03      	ldr	r3, [pc, #12]	@ (8008464 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008458:	4618      	mov	r0, r3
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr
 8008464:	2000027c 	.word	0x2000027c

08008468 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d101      	bne.n	800847c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008478:	2303      	movs	r3, #3
 800847a:	e009      	b.n	8008490 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	33b0      	adds	r3, #176	@ 0xb0
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	4413      	add	r3, r2
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800849c:	b480      	push	{r7}
 800849e:	b087      	sub	sp, #28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	32b0      	adds	r2, #176	@ 0xb0
 80084b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d101      	bne.n	80084c2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80084be:	2303      	movs	r3, #3
 80084c0:	e008      	b.n	80084d4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	371c      	adds	r7, #28
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	32b0      	adds	r2, #176	@ 0xb0
 80084f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d101      	bne.n	8008504 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008500:	2303      	movs	r3, #3
 8008502:	e004      	b.n	800850e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
	...

0800851c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	32b0      	adds	r2, #176	@ 0xb0
 800852e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008532:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	32b0      	adds	r2, #176	@ 0xb0
 800853e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008546:	2303      	movs	r3, #3
 8008548:	e018      	b.n	800857c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	7c1b      	ldrb	r3, [r3, #16]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10a      	bne.n	8008568 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008552:	4b0c      	ldr	r3, [pc, #48]	@ (8008584 <USBD_CDC_ReceivePacket+0x68>)
 8008554:	7819      	ldrb	r1, [r3, #0]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800855c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f001 ffe9 	bl	800a538 <USBD_LL_PrepareReceive>
 8008566:	e008      	b.n	800857a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008568:	4b06      	ldr	r3, [pc, #24]	@ (8008584 <USBD_CDC_ReceivePacket+0x68>)
 800856a:	7819      	ldrb	r1, [r3, #0]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008572:	2340      	movs	r3, #64	@ 0x40
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f001 ffdf 	bl	800a538 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	20000304 	.word	0x20000304

08008588 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	4613      	mov	r3, r2
 8008594:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d101      	bne.n	80085a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800859c:	2303      	movs	r3, #3
 800859e:	e01f      	b.n	80085e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d003      	beq.n	80085c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	68ba      	ldr	r2, [r7, #8]
 80085c2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	79fa      	ldrb	r2, [r7, #7]
 80085d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f001 fe59 	bl	800a28c <USBD_LL_Init>
 80085da:	4603      	mov	r3, r0
 80085dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80085de:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3718      	adds	r7, #24
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085f2:	2300      	movs	r3, #0
 80085f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d101      	bne.n	8008600 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e025      	b.n	800864c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	32ae      	adds	r2, #174	@ 0xae
 8008612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00f      	beq.n	800863c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	32ae      	adds	r2, #174	@ 0xae
 8008626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800862a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800862c:	f107 020e 	add.w	r2, r7, #14
 8008630:	4610      	mov	r0, r2
 8008632:	4798      	blx	r3
 8008634:	4602      	mov	r2, r0
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008642:	1c5a      	adds	r2, r3, #1
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f001 fe61 	bl	800a324 <USBD_LL_Start>
 8008662:	4603      	mov	r3, r0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008674:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008676:	4618      	mov	r0, r3
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr

08008682 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b084      	sub	sp, #16
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
 800868a:	460b      	mov	r3, r1
 800868c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800868e:	2300      	movs	r3, #0
 8008690:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008698:	2b00      	cmp	r3, #0
 800869a:	d009      	beq.n	80086b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	78fa      	ldrb	r2, [r7, #3]
 80086a6:	4611      	mov	r1, r2
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	4798      	blx	r3
 80086ac:	4603      	mov	r3, r0
 80086ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80086b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b084      	sub	sp, #16
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	460b      	mov	r3, r1
 80086c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	78fa      	ldrb	r2, [r7, #3]
 80086d4:	4611      	mov	r1, r2
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	4798      	blx	r3
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d001      	beq.n	80086e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80086e0:	2303      	movs	r3, #3
 80086e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80086e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b084      	sub	sp, #16
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80086fe:	6839      	ldr	r1, [r7, #0]
 8008700:	4618      	mov	r0, r3
 8008702:	f001 f936 	bl	8009972 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008714:	461a      	mov	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008722:	f003 031f 	and.w	r3, r3, #31
 8008726:	2b02      	cmp	r3, #2
 8008728:	d01a      	beq.n	8008760 <USBD_LL_SetupStage+0x72>
 800872a:	2b02      	cmp	r3, #2
 800872c:	d822      	bhi.n	8008774 <USBD_LL_SetupStage+0x86>
 800872e:	2b00      	cmp	r3, #0
 8008730:	d002      	beq.n	8008738 <USBD_LL_SetupStage+0x4a>
 8008732:	2b01      	cmp	r3, #1
 8008734:	d00a      	beq.n	800874c <USBD_LL_SetupStage+0x5e>
 8008736:	e01d      	b.n	8008774 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800873e:	4619      	mov	r1, r3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 fb63 	bl	8008e0c <USBD_StdDevReq>
 8008746:	4603      	mov	r3, r0
 8008748:	73fb      	strb	r3, [r7, #15]
      break;
 800874a:	e020      	b.n	800878e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008752:	4619      	mov	r1, r3
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fbcb 	bl	8008ef0 <USBD_StdItfReq>
 800875a:	4603      	mov	r3, r0
 800875c:	73fb      	strb	r3, [r7, #15]
      break;
 800875e:	e016      	b.n	800878e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008766:	4619      	mov	r1, r3
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fc2d 	bl	8008fc8 <USBD_StdEPReq>
 800876e:	4603      	mov	r3, r0
 8008770:	73fb      	strb	r3, [r7, #15]
      break;
 8008772:	e00c      	b.n	800878e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800877a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800877e:	b2db      	uxtb	r3, r3
 8008780:	4619      	mov	r1, r3
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f001 fe2e 	bl	800a3e4 <USBD_LL_StallEP>
 8008788:	4603      	mov	r3, r0
 800878a:	73fb      	strb	r3, [r7, #15]
      break;
 800878c:	bf00      	nop
  }

  return ret;
 800878e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008790:	4618      	mov	r0, r3
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	460b      	mov	r3, r1
 80087a2:	607a      	str	r2, [r7, #4]
 80087a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80087aa:	7afb      	ldrb	r3, [r7, #11]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d16e      	bne.n	800888e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80087b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80087be:	2b03      	cmp	r3, #3
 80087c0:	f040 8098 	bne.w	80088f4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	689a      	ldr	r2, [r3, #8]
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d913      	bls.n	80087f8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	689a      	ldr	r2, [r3, #8]
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	1ad2      	subs	r2, r2, r3
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	68da      	ldr	r2, [r3, #12]
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	4293      	cmp	r3, r2
 80087e8:	bf28      	it	cs
 80087ea:	4613      	movcs	r3, r2
 80087ec:	461a      	mov	r2, r3
 80087ee:	6879      	ldr	r1, [r7, #4]
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f001 f9be 	bl	8009b72 <USBD_CtlContinueRx>
 80087f6:	e07d      	b.n	80088f4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80087fe:	f003 031f 	and.w	r3, r3, #31
 8008802:	2b02      	cmp	r3, #2
 8008804:	d014      	beq.n	8008830 <USBD_LL_DataOutStage+0x98>
 8008806:	2b02      	cmp	r3, #2
 8008808:	d81d      	bhi.n	8008846 <USBD_LL_DataOutStage+0xae>
 800880a:	2b00      	cmp	r3, #0
 800880c:	d002      	beq.n	8008814 <USBD_LL_DataOutStage+0x7c>
 800880e:	2b01      	cmp	r3, #1
 8008810:	d003      	beq.n	800881a <USBD_LL_DataOutStage+0x82>
 8008812:	e018      	b.n	8008846 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008814:	2300      	movs	r3, #0
 8008816:	75bb      	strb	r3, [r7, #22]
            break;
 8008818:	e018      	b.n	800884c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008820:	b2db      	uxtb	r3, r3
 8008822:	4619      	mov	r1, r3
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 fa64 	bl	8008cf2 <USBD_CoreFindIF>
 800882a:	4603      	mov	r3, r0
 800882c:	75bb      	strb	r3, [r7, #22]
            break;
 800882e:	e00d      	b.n	800884c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008836:	b2db      	uxtb	r3, r3
 8008838:	4619      	mov	r1, r3
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	f000 fa66 	bl	8008d0c <USBD_CoreFindEP>
 8008840:	4603      	mov	r3, r0
 8008842:	75bb      	strb	r3, [r7, #22]
            break;
 8008844:	e002      	b.n	800884c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008846:	2300      	movs	r3, #0
 8008848:	75bb      	strb	r3, [r7, #22]
            break;
 800884a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800884c:	7dbb      	ldrb	r3, [r7, #22]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d119      	bne.n	8008886 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b03      	cmp	r3, #3
 800885c:	d113      	bne.n	8008886 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800885e:	7dba      	ldrb	r2, [r7, #22]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	32ae      	adds	r2, #174	@ 0xae
 8008864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00b      	beq.n	8008886 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800886e:	7dba      	ldrb	r2, [r7, #22]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008876:	7dba      	ldrb	r2, [r7, #22]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	32ae      	adds	r2, #174	@ 0xae
 800887c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f001 f984 	bl	8009b94 <USBD_CtlSendStatus>
 800888c:	e032      	b.n	80088f4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800888e:	7afb      	ldrb	r3, [r7, #11]
 8008890:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008894:	b2db      	uxtb	r3, r3
 8008896:	4619      	mov	r1, r3
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f000 fa37 	bl	8008d0c <USBD_CoreFindEP>
 800889e:	4603      	mov	r3, r0
 80088a0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088a2:	7dbb      	ldrb	r3, [r7, #22]
 80088a4:	2bff      	cmp	r3, #255	@ 0xff
 80088a6:	d025      	beq.n	80088f4 <USBD_LL_DataOutStage+0x15c>
 80088a8:	7dbb      	ldrb	r3, [r7, #22]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d122      	bne.n	80088f4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b03      	cmp	r3, #3
 80088b8:	d117      	bne.n	80088ea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80088ba:	7dba      	ldrb	r2, [r7, #22]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	32ae      	adds	r2, #174	@ 0xae
 80088c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c4:	699b      	ldr	r3, [r3, #24]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00f      	beq.n	80088ea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80088ca:	7dba      	ldrb	r2, [r7, #22]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80088d2:	7dba      	ldrb	r2, [r7, #22]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	32ae      	adds	r2, #174	@ 0xae
 80088d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088dc:	699b      	ldr	r3, [r3, #24]
 80088de:	7afa      	ldrb	r2, [r7, #11]
 80088e0:	4611      	mov	r1, r2
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	4798      	blx	r3
 80088e6:	4603      	mov	r3, r0
 80088e8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80088ea:	7dfb      	ldrb	r3, [r7, #23]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80088f0:	7dfb      	ldrb	r3, [r7, #23]
 80088f2:	e000      	b.n	80088f6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3718      	adds	r7, #24
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b086      	sub	sp, #24
 8008902:	af00      	add	r7, sp, #0
 8008904:	60f8      	str	r0, [r7, #12]
 8008906:	460b      	mov	r3, r1
 8008908:	607a      	str	r2, [r7, #4]
 800890a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800890c:	7afb      	ldrb	r3, [r7, #11]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d16f      	bne.n	80089f2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	3314      	adds	r3, #20
 8008916:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800891e:	2b02      	cmp	r3, #2
 8008920:	d15a      	bne.n	80089d8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	689a      	ldr	r2, [r3, #8]
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	429a      	cmp	r2, r3
 800892c:	d914      	bls.n	8008958 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	689a      	ldr	r2, [r3, #8]
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	1ad2      	subs	r2, r2, r3
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	461a      	mov	r2, r3
 8008942:	6879      	ldr	r1, [r7, #4]
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f001 f8e6 	bl	8009b16 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800894a:	2300      	movs	r3, #0
 800894c:	2200      	movs	r2, #0
 800894e:	2100      	movs	r1, #0
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f001 fdf1 	bl	800a538 <USBD_LL_PrepareReceive>
 8008956:	e03f      	b.n	80089d8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	68da      	ldr	r2, [r3, #12]
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	429a      	cmp	r2, r3
 8008962:	d11c      	bne.n	800899e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	685a      	ldr	r2, [r3, #4]
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800896c:	429a      	cmp	r2, r3
 800896e:	d316      	bcc.n	800899e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	685a      	ldr	r2, [r3, #4]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800897a:	429a      	cmp	r2, r3
 800897c:	d20f      	bcs.n	800899e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800897e:	2200      	movs	r2, #0
 8008980:	2100      	movs	r1, #0
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f001 f8c7 	bl	8009b16 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008990:	2300      	movs	r3, #0
 8008992:	2200      	movs	r2, #0
 8008994:	2100      	movs	r1, #0
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f001 fdce 	bl	800a538 <USBD_LL_PrepareReceive>
 800899c:	e01c      	b.n	80089d8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d10f      	bne.n	80089ca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d009      	beq.n	80089ca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80089ca:	2180      	movs	r1, #128	@ 0x80
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f001 fd09 	bl	800a3e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	f001 f8f1 	bl	8009bba <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d03a      	beq.n	8008a58 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f7ff fe42 	bl	800866c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80089f0:	e032      	b.n	8008a58 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80089f2:	7afb      	ldrb	r3, [r7, #11]
 80089f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	4619      	mov	r1, r3
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f000 f985 	bl	8008d0c <USBD_CoreFindEP>
 8008a02:	4603      	mov	r3, r0
 8008a04:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a06:	7dfb      	ldrb	r3, [r7, #23]
 8008a08:	2bff      	cmp	r3, #255	@ 0xff
 8008a0a:	d025      	beq.n	8008a58 <USBD_LL_DataInStage+0x15a>
 8008a0c:	7dfb      	ldrb	r3, [r7, #23]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d122      	bne.n	8008a58 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b03      	cmp	r3, #3
 8008a1c:	d11c      	bne.n	8008a58 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008a1e:	7dfa      	ldrb	r2, [r7, #23]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	32ae      	adds	r2, #174	@ 0xae
 8008a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d014      	beq.n	8008a58 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008a2e:	7dfa      	ldrb	r2, [r7, #23]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008a36:	7dfa      	ldrb	r2, [r7, #23]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	32ae      	adds	r2, #174	@ 0xae
 8008a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	7afa      	ldrb	r2, [r7, #11]
 8008a44:	4611      	mov	r1, r2
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	4798      	blx	r3
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008a4e:	7dbb      	ldrb	r3, [r7, #22]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d001      	beq.n	8008a58 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008a54:	7dbb      	ldrb	r3, [r7, #22]
 8008a56:	e000      	b.n	8008a5a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3718      	adds	r7, #24
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b084      	sub	sp, #16
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d014      	beq.n	8008ac8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00e      	beq.n	8008ac8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	6852      	ldr	r2, [r2, #4]
 8008ab6:	b2d2      	uxtb	r2, r2
 8008ab8:	4611      	mov	r1, r2
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	4798      	blx	r3
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d001      	beq.n	8008ac8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ac8:	2340      	movs	r3, #64	@ 0x40
 8008aca:	2200      	movs	r2, #0
 8008acc:	2100      	movs	r1, #0
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f001 fc43 	bl	800a35a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2240      	movs	r2, #64	@ 0x40
 8008ae0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ae4:	2340      	movs	r3, #64	@ 0x40
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	2180      	movs	r1, #128	@ 0x80
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f001 fc35 	bl	800a35a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2240      	movs	r2, #64	@ 0x40
 8008afa:	621a      	str	r2, [r3, #32]

  return ret;
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008b06:	b480      	push	{r7}
 8008b08:	b083      	sub	sp, #12
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	460b      	mov	r3, r1
 8008b10:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	78fa      	ldrb	r2, [r7, #3]
 8008b16:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	370c      	adds	r7, #12
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr

08008b26 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008b26:	b480      	push	{r7}
 8008b28:	b083      	sub	sp, #12
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b04      	cmp	r3, #4
 8008b38:	d006      	beq.n	8008b48 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b40:	b2da      	uxtb	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2204      	movs	r2, #4
 8008b4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	370c      	adds	r7, #12
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b083      	sub	sp, #12
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b04      	cmp	r3, #4
 8008b70:	d106      	bne.n	8008b80 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008b78:	b2da      	uxtb	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b082      	sub	sp, #8
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b03      	cmp	r3, #3
 8008ba0:	d110      	bne.n	8008bc4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00b      	beq.n	8008bc4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d005      	beq.n	8008bc4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bbe:	69db      	ldr	r3, [r3, #28]
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3708      	adds	r7, #8
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b082      	sub	sp, #8
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	32ae      	adds	r2, #174	@ 0xae
 8008be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d101      	bne.n	8008bf0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008bec:	2303      	movs	r3, #3
 8008bee:	e01c      	b.n	8008c2a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	2b03      	cmp	r3, #3
 8008bfa:	d115      	bne.n	8008c28 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	32ae      	adds	r2, #174	@ 0xae
 8008c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c0a:	6a1b      	ldr	r3, [r3, #32]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00b      	beq.n	8008c28 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	32ae      	adds	r2, #174	@ 0xae
 8008c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
 8008c20:	78fa      	ldrb	r2, [r7, #3]
 8008c22:	4611      	mov	r1, r2
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b082      	sub	sp, #8
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	32ae      	adds	r2, #174	@ 0xae
 8008c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d101      	bne.n	8008c54 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008c50:	2303      	movs	r3, #3
 8008c52:	e01c      	b.n	8008c8e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	2b03      	cmp	r3, #3
 8008c5e:	d115      	bne.n	8008c8c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	32ae      	adds	r2, #174	@ 0xae
 8008c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00b      	beq.n	8008c8c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	32ae      	adds	r2, #174	@ 0xae
 8008c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c84:	78fa      	ldrb	r2, [r7, #3]
 8008c86:	4611      	mov	r1, r2
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008c96:	b480      	push	{r7}
 8008c98:	b083      	sub	sp, #12
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00e      	beq.n	8008ce8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	6852      	ldr	r2, [r2, #4]
 8008cd6:	b2d2      	uxtb	r2, r2
 8008cd8:	4611      	mov	r1, r2
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	4798      	blx	r3
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008cf2:	b480      	push	{r7}
 8008cf4:	b083      	sub	sp, #12
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008cfe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	460b      	mov	r3, r1
 8008d16:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008d18:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	370c      	adds	r7, #12
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr

08008d26 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b086      	sub	sp, #24
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	460b      	mov	r3, r1
 8008d30:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	885b      	ldrh	r3, [r3, #2]
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	7812      	ldrb	r2, [r2, #0]
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d91f      	bls.n	8008d8c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008d52:	e013      	b.n	8008d7c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008d54:	f107 030a 	add.w	r3, r7, #10
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6978      	ldr	r0, [r7, #20]
 8008d5c:	f000 f81b 	bl	8008d96 <USBD_GetNextDesc>
 8008d60:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	785b      	ldrb	r3, [r3, #1]
 8008d66:	2b05      	cmp	r3, #5
 8008d68:	d108      	bne.n	8008d7c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	789b      	ldrb	r3, [r3, #2]
 8008d72:	78fa      	ldrb	r2, [r7, #3]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d008      	beq.n	8008d8a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	885b      	ldrh	r3, [r3, #2]
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	897b      	ldrh	r3, [r7, #10]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d8e5      	bhi.n	8008d54 <USBD_GetEpDesc+0x2e>
 8008d88:	e000      	b.n	8008d8c <USBD_GetEpDesc+0x66>
          break;
 8008d8a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008d8c:	693b      	ldr	r3, [r7, #16]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3718      	adds	r7, #24
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008d96:	b480      	push	{r7}
 8008d98:	b085      	sub	sp, #20
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
 8008d9e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	881b      	ldrh	r3, [r3, #0]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	7812      	ldrb	r2, [r2, #0]
 8008dac:	4413      	add	r3, r2
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	461a      	mov	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b087      	sub	sp, #28
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	3301      	adds	r3, #1
 8008de4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008dec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008df0:	021b      	lsls	r3, r3, #8
 8008df2:	b21a      	sxth	r2, r3
 8008df4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	b21b      	sxth	r3, r3
 8008dfc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008dfe:	89fb      	ldrh	r3, [r7, #14]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	371c      	adds	r7, #28
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e16:	2300      	movs	r3, #0
 8008e18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e22:	2b40      	cmp	r3, #64	@ 0x40
 8008e24:	d005      	beq.n	8008e32 <USBD_StdDevReq+0x26>
 8008e26:	2b40      	cmp	r3, #64	@ 0x40
 8008e28:	d857      	bhi.n	8008eda <USBD_StdDevReq+0xce>
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00f      	beq.n	8008e4e <USBD_StdDevReq+0x42>
 8008e2e:	2b20      	cmp	r3, #32
 8008e30:	d153      	bne.n	8008eda <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	32ae      	adds	r2, #174	@ 0xae
 8008e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	6839      	ldr	r1, [r7, #0]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	4798      	blx	r3
 8008e48:	4603      	mov	r3, r0
 8008e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e4c:	e04a      	b.n	8008ee4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	785b      	ldrb	r3, [r3, #1]
 8008e52:	2b09      	cmp	r3, #9
 8008e54:	d83b      	bhi.n	8008ece <USBD_StdDevReq+0xc2>
 8008e56:	a201      	add	r2, pc, #4	@ (adr r2, 8008e5c <USBD_StdDevReq+0x50>)
 8008e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5c:	08008eb1 	.word	0x08008eb1
 8008e60:	08008ec5 	.word	0x08008ec5
 8008e64:	08008ecf 	.word	0x08008ecf
 8008e68:	08008ebb 	.word	0x08008ebb
 8008e6c:	08008ecf 	.word	0x08008ecf
 8008e70:	08008e8f 	.word	0x08008e8f
 8008e74:	08008e85 	.word	0x08008e85
 8008e78:	08008ecf 	.word	0x08008ecf
 8008e7c:	08008ea7 	.word	0x08008ea7
 8008e80:	08008e99 	.word	0x08008e99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fa3c 	bl	8009304 <USBD_GetDescriptor>
          break;
 8008e8c:	e024      	b.n	8008ed8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fbcb 	bl	800962c <USBD_SetAddress>
          break;
 8008e96:	e01f      	b.n	8008ed8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008e98:	6839      	ldr	r1, [r7, #0]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fc0a 	bl	80096b4 <USBD_SetConfig>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	73fb      	strb	r3, [r7, #15]
          break;
 8008ea4:	e018      	b.n	8008ed8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008ea6:	6839      	ldr	r1, [r7, #0]
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fcad 	bl	8009808 <USBD_GetConfig>
          break;
 8008eae:	e013      	b.n	8008ed8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008eb0:	6839      	ldr	r1, [r7, #0]
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fcde 	bl	8009874 <USBD_GetStatus>
          break;
 8008eb8:	e00e      	b.n	8008ed8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008eba:	6839      	ldr	r1, [r7, #0]
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 fd0d 	bl	80098dc <USBD_SetFeature>
          break;
 8008ec2:	e009      	b.n	8008ed8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ec4:	6839      	ldr	r1, [r7, #0]
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fd31 	bl	800992e <USBD_ClrFeature>
          break;
 8008ecc:	e004      	b.n	8008ed8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fd88 	bl	80099e6 <USBD_CtlError>
          break;
 8008ed6:	bf00      	nop
      }
      break;
 8008ed8:	e004      	b.n	8008ee4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008eda:	6839      	ldr	r1, [r7, #0]
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 fd82 	bl	80099e6 <USBD_CtlError>
      break;
 8008ee2:	bf00      	nop
  }

  return ret;
 8008ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop

08008ef0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008efa:	2300      	movs	r3, #0
 8008efc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f06:	2b40      	cmp	r3, #64	@ 0x40
 8008f08:	d005      	beq.n	8008f16 <USBD_StdItfReq+0x26>
 8008f0a:	2b40      	cmp	r3, #64	@ 0x40
 8008f0c:	d852      	bhi.n	8008fb4 <USBD_StdItfReq+0xc4>
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <USBD_StdItfReq+0x26>
 8008f12:	2b20      	cmp	r3, #32
 8008f14:	d14e      	bne.n	8008fb4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d840      	bhi.n	8008fa6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	889b      	ldrh	r3, [r3, #4]
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d836      	bhi.n	8008f9c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	889b      	ldrh	r3, [r3, #4]
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	4619      	mov	r1, r3
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f7ff fedb 	bl	8008cf2 <USBD_CoreFindIF>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f40:	7bbb      	ldrb	r3, [r7, #14]
 8008f42:	2bff      	cmp	r3, #255	@ 0xff
 8008f44:	d01d      	beq.n	8008f82 <USBD_StdItfReq+0x92>
 8008f46:	7bbb      	ldrb	r3, [r7, #14]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d11a      	bne.n	8008f82 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008f4c:	7bba      	ldrb	r2, [r7, #14]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	32ae      	adds	r2, #174	@ 0xae
 8008f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00f      	beq.n	8008f7c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008f5c:	7bba      	ldrb	r2, [r7, #14]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008f64:	7bba      	ldrb	r2, [r7, #14]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	32ae      	adds	r2, #174	@ 0xae
 8008f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	6839      	ldr	r1, [r7, #0]
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	4798      	blx	r3
 8008f76:	4603      	mov	r3, r0
 8008f78:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f7a:	e004      	b.n	8008f86 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f80:	e001      	b.n	8008f86 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008f82:	2303      	movs	r3, #3
 8008f84:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	88db      	ldrh	r3, [r3, #6]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d110      	bne.n	8008fb0 <USBD_StdItfReq+0xc0>
 8008f8e:	7bfb      	ldrb	r3, [r7, #15]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d10d      	bne.n	8008fb0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fdfd 	bl	8009b94 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f9a:	e009      	b.n	8008fb0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008f9c:	6839      	ldr	r1, [r7, #0]
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fd21 	bl	80099e6 <USBD_CtlError>
          break;
 8008fa4:	e004      	b.n	8008fb0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 fd1c 	bl	80099e6 <USBD_CtlError>
          break;
 8008fae:	e000      	b.n	8008fb2 <USBD_StdItfReq+0xc2>
          break;
 8008fb0:	bf00      	nop
      }
      break;
 8008fb2:	e004      	b.n	8008fbe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008fb4:	6839      	ldr	r1, [r7, #0]
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fd15 	bl	80099e6 <USBD_CtlError>
      break;
 8008fbc:	bf00      	nop
  }

  return ret;
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	889b      	ldrh	r3, [r3, #4]
 8008fda:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008fe4:	2b40      	cmp	r3, #64	@ 0x40
 8008fe6:	d007      	beq.n	8008ff8 <USBD_StdEPReq+0x30>
 8008fe8:	2b40      	cmp	r3, #64	@ 0x40
 8008fea:	f200 817f 	bhi.w	80092ec <USBD_StdEPReq+0x324>
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d02a      	beq.n	8009048 <USBD_StdEPReq+0x80>
 8008ff2:	2b20      	cmp	r3, #32
 8008ff4:	f040 817a 	bne.w	80092ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ff8:	7bbb      	ldrb	r3, [r7, #14]
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f7ff fe85 	bl	8008d0c <USBD_CoreFindEP>
 8009002:	4603      	mov	r3, r0
 8009004:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009006:	7b7b      	ldrb	r3, [r7, #13]
 8009008:	2bff      	cmp	r3, #255	@ 0xff
 800900a:	f000 8174 	beq.w	80092f6 <USBD_StdEPReq+0x32e>
 800900e:	7b7b      	ldrb	r3, [r7, #13]
 8009010:	2b00      	cmp	r3, #0
 8009012:	f040 8170 	bne.w	80092f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009016:	7b7a      	ldrb	r2, [r7, #13]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800901e:	7b7a      	ldrb	r2, [r7, #13]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	32ae      	adds	r2, #174	@ 0xae
 8009024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	2b00      	cmp	r3, #0
 800902c:	f000 8163 	beq.w	80092f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009030:	7b7a      	ldrb	r2, [r7, #13]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	32ae      	adds	r2, #174	@ 0xae
 8009036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	6839      	ldr	r1, [r7, #0]
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	4798      	blx	r3
 8009042:	4603      	mov	r3, r0
 8009044:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009046:	e156      	b.n	80092f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	785b      	ldrb	r3, [r3, #1]
 800904c:	2b03      	cmp	r3, #3
 800904e:	d008      	beq.n	8009062 <USBD_StdEPReq+0x9a>
 8009050:	2b03      	cmp	r3, #3
 8009052:	f300 8145 	bgt.w	80092e0 <USBD_StdEPReq+0x318>
 8009056:	2b00      	cmp	r3, #0
 8009058:	f000 809b 	beq.w	8009192 <USBD_StdEPReq+0x1ca>
 800905c:	2b01      	cmp	r3, #1
 800905e:	d03c      	beq.n	80090da <USBD_StdEPReq+0x112>
 8009060:	e13e      	b.n	80092e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b02      	cmp	r3, #2
 800906c:	d002      	beq.n	8009074 <USBD_StdEPReq+0xac>
 800906e:	2b03      	cmp	r3, #3
 8009070:	d016      	beq.n	80090a0 <USBD_StdEPReq+0xd8>
 8009072:	e02c      	b.n	80090ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009074:	7bbb      	ldrb	r3, [r7, #14]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00d      	beq.n	8009096 <USBD_StdEPReq+0xce>
 800907a:	7bbb      	ldrb	r3, [r7, #14]
 800907c:	2b80      	cmp	r3, #128	@ 0x80
 800907e:	d00a      	beq.n	8009096 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009080:	7bbb      	ldrb	r3, [r7, #14]
 8009082:	4619      	mov	r1, r3
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f001 f9ad 	bl	800a3e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800908a:	2180      	movs	r1, #128	@ 0x80
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f001 f9a9 	bl	800a3e4 <USBD_LL_StallEP>
 8009092:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009094:	e020      	b.n	80090d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009096:	6839      	ldr	r1, [r7, #0]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fca4 	bl	80099e6 <USBD_CtlError>
              break;
 800909e:	e01b      	b.n	80090d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	885b      	ldrh	r3, [r3, #2]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d10e      	bne.n	80090c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80090a8:	7bbb      	ldrb	r3, [r7, #14]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00b      	beq.n	80090c6 <USBD_StdEPReq+0xfe>
 80090ae:	7bbb      	ldrb	r3, [r7, #14]
 80090b0:	2b80      	cmp	r3, #128	@ 0x80
 80090b2:	d008      	beq.n	80090c6 <USBD_StdEPReq+0xfe>
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	88db      	ldrh	r3, [r3, #6]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d104      	bne.n	80090c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80090bc:	7bbb      	ldrb	r3, [r7, #14]
 80090be:	4619      	mov	r1, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f001 f98f 	bl	800a3e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fd64 	bl	8009b94 <USBD_CtlSendStatus>

              break;
 80090cc:	e004      	b.n	80090d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fc88 	bl	80099e6 <USBD_CtlError>
              break;
 80090d6:	bf00      	nop
          }
          break;
 80090d8:	e107      	b.n	80092ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d002      	beq.n	80090ec <USBD_StdEPReq+0x124>
 80090e6:	2b03      	cmp	r3, #3
 80090e8:	d016      	beq.n	8009118 <USBD_StdEPReq+0x150>
 80090ea:	e04b      	b.n	8009184 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090ec:	7bbb      	ldrb	r3, [r7, #14]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00d      	beq.n	800910e <USBD_StdEPReq+0x146>
 80090f2:	7bbb      	ldrb	r3, [r7, #14]
 80090f4:	2b80      	cmp	r3, #128	@ 0x80
 80090f6:	d00a      	beq.n	800910e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80090f8:	7bbb      	ldrb	r3, [r7, #14]
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f001 f971 	bl	800a3e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009102:	2180      	movs	r1, #128	@ 0x80
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f001 f96d 	bl	800a3e4 <USBD_LL_StallEP>
 800910a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800910c:	e040      	b.n	8009190 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800910e:	6839      	ldr	r1, [r7, #0]
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fc68 	bl	80099e6 <USBD_CtlError>
              break;
 8009116:	e03b      	b.n	8009190 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	885b      	ldrh	r3, [r3, #2]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d136      	bne.n	800918e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009120:	7bbb      	ldrb	r3, [r7, #14]
 8009122:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009126:	2b00      	cmp	r3, #0
 8009128:	d004      	beq.n	8009134 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800912a:	7bbb      	ldrb	r3, [r7, #14]
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f001 f977 	bl	800a422 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fd2d 	bl	8009b94 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800913a:	7bbb      	ldrb	r3, [r7, #14]
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7ff fde4 	bl	8008d0c <USBD_CoreFindEP>
 8009144:	4603      	mov	r3, r0
 8009146:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009148:	7b7b      	ldrb	r3, [r7, #13]
 800914a:	2bff      	cmp	r3, #255	@ 0xff
 800914c:	d01f      	beq.n	800918e <USBD_StdEPReq+0x1c6>
 800914e:	7b7b      	ldrb	r3, [r7, #13]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d11c      	bne.n	800918e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009154:	7b7a      	ldrb	r2, [r7, #13]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800915c:	7b7a      	ldrb	r2, [r7, #13]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	32ae      	adds	r2, #174	@ 0xae
 8009162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d010      	beq.n	800918e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800916c:	7b7a      	ldrb	r2, [r7, #13]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	32ae      	adds	r2, #174	@ 0xae
 8009172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	6839      	ldr	r1, [r7, #0]
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	4798      	blx	r3
 800917e:	4603      	mov	r3, r0
 8009180:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009182:	e004      	b.n	800918e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fc2d 	bl	80099e6 <USBD_CtlError>
              break;
 800918c:	e000      	b.n	8009190 <USBD_StdEPReq+0x1c8>
              break;
 800918e:	bf00      	nop
          }
          break;
 8009190:	e0ab      	b.n	80092ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b02      	cmp	r3, #2
 800919c:	d002      	beq.n	80091a4 <USBD_StdEPReq+0x1dc>
 800919e:	2b03      	cmp	r3, #3
 80091a0:	d032      	beq.n	8009208 <USBD_StdEPReq+0x240>
 80091a2:	e097      	b.n	80092d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091a4:	7bbb      	ldrb	r3, [r7, #14]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d007      	beq.n	80091ba <USBD_StdEPReq+0x1f2>
 80091aa:	7bbb      	ldrb	r3, [r7, #14]
 80091ac:	2b80      	cmp	r3, #128	@ 0x80
 80091ae:	d004      	beq.n	80091ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80091b0:	6839      	ldr	r1, [r7, #0]
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fc17 	bl	80099e6 <USBD_CtlError>
                break;
 80091b8:	e091      	b.n	80092de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	da0b      	bge.n	80091da <USBD_StdEPReq+0x212>
 80091c2:	7bbb      	ldrb	r3, [r7, #14]
 80091c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80091c8:	4613      	mov	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	4413      	add	r3, r2
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	3310      	adds	r3, #16
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	4413      	add	r3, r2
 80091d6:	3304      	adds	r3, #4
 80091d8:	e00b      	b.n	80091f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80091da:	7bbb      	ldrb	r3, [r7, #14]
 80091dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091e0:	4613      	mov	r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	4413      	add	r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	4413      	add	r3, r2
 80091f0:	3304      	adds	r3, #4
 80091f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	2200      	movs	r2, #0
 80091f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	2202      	movs	r2, #2
 80091fe:	4619      	mov	r1, r3
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 fc6d 	bl	8009ae0 <USBD_CtlSendData>
              break;
 8009206:	e06a      	b.n	80092de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009208:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800920c:	2b00      	cmp	r3, #0
 800920e:	da11      	bge.n	8009234 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009210:	7bbb      	ldrb	r3, [r7, #14]
 8009212:	f003 020f 	and.w	r2, r3, #15
 8009216:	6879      	ldr	r1, [r7, #4]
 8009218:	4613      	mov	r3, r2
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	4413      	add	r3, r2
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	440b      	add	r3, r1
 8009222:	3324      	adds	r3, #36	@ 0x24
 8009224:	881b      	ldrh	r3, [r3, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d117      	bne.n	800925a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 fbda 	bl	80099e6 <USBD_CtlError>
                  break;
 8009232:	e054      	b.n	80092de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009234:	7bbb      	ldrb	r3, [r7, #14]
 8009236:	f003 020f 	and.w	r2, r3, #15
 800923a:	6879      	ldr	r1, [r7, #4]
 800923c:	4613      	mov	r3, r2
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	4413      	add	r3, r2
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	440b      	add	r3, r1
 8009246:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800924a:	881b      	ldrh	r3, [r3, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d104      	bne.n	800925a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 fbc7 	bl	80099e6 <USBD_CtlError>
                  break;
 8009258:	e041      	b.n	80092de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800925a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800925e:	2b00      	cmp	r3, #0
 8009260:	da0b      	bge.n	800927a <USBD_StdEPReq+0x2b2>
 8009262:	7bbb      	ldrb	r3, [r7, #14]
 8009264:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009268:	4613      	mov	r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4413      	add	r3, r2
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	3310      	adds	r3, #16
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	4413      	add	r3, r2
 8009276:	3304      	adds	r3, #4
 8009278:	e00b      	b.n	8009292 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800927a:	7bbb      	ldrb	r3, [r7, #14]
 800927c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009280:	4613      	mov	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4413      	add	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	4413      	add	r3, r2
 8009290:	3304      	adds	r3, #4
 8009292:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009294:	7bbb      	ldrb	r3, [r7, #14]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d002      	beq.n	80092a0 <USBD_StdEPReq+0x2d8>
 800929a:	7bbb      	ldrb	r3, [r7, #14]
 800929c:	2b80      	cmp	r3, #128	@ 0x80
 800929e:	d103      	bne.n	80092a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	2200      	movs	r2, #0
 80092a4:	601a      	str	r2, [r3, #0]
 80092a6:	e00e      	b.n	80092c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80092a8:	7bbb      	ldrb	r3, [r7, #14]
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f001 f8d7 	bl	800a460 <USBD_LL_IsStallEP>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d003      	beq.n	80092c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	2201      	movs	r2, #1
 80092bc:	601a      	str	r2, [r3, #0]
 80092be:	e002      	b.n	80092c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	2200      	movs	r2, #0
 80092c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	2202      	movs	r2, #2
 80092ca:	4619      	mov	r1, r3
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 fc07 	bl	8009ae0 <USBD_CtlSendData>
              break;
 80092d2:	e004      	b.n	80092de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80092d4:	6839      	ldr	r1, [r7, #0]
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fb85 	bl	80099e6 <USBD_CtlError>
              break;
 80092dc:	bf00      	nop
          }
          break;
 80092de:	e004      	b.n	80092ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80092e0:	6839      	ldr	r1, [r7, #0]
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 fb7f 	bl	80099e6 <USBD_CtlError>
          break;
 80092e8:	bf00      	nop
      }
      break;
 80092ea:	e005      	b.n	80092f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80092ec:	6839      	ldr	r1, [r7, #0]
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fb79 	bl	80099e6 <USBD_CtlError>
      break;
 80092f4:	e000      	b.n	80092f8 <USBD_StdEPReq+0x330>
      break;
 80092f6:	bf00      	nop
  }

  return ret;
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
	...

08009304 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800930e:	2300      	movs	r3, #0
 8009310:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009312:	2300      	movs	r3, #0
 8009314:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009316:	2300      	movs	r3, #0
 8009318:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	885b      	ldrh	r3, [r3, #2]
 800931e:	0a1b      	lsrs	r3, r3, #8
 8009320:	b29b      	uxth	r3, r3
 8009322:	3b01      	subs	r3, #1
 8009324:	2b0e      	cmp	r3, #14
 8009326:	f200 8152 	bhi.w	80095ce <USBD_GetDescriptor+0x2ca>
 800932a:	a201      	add	r2, pc, #4	@ (adr r2, 8009330 <USBD_GetDescriptor+0x2c>)
 800932c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009330:	080093a1 	.word	0x080093a1
 8009334:	080093b9 	.word	0x080093b9
 8009338:	080093f9 	.word	0x080093f9
 800933c:	080095cf 	.word	0x080095cf
 8009340:	080095cf 	.word	0x080095cf
 8009344:	0800956f 	.word	0x0800956f
 8009348:	0800959b 	.word	0x0800959b
 800934c:	080095cf 	.word	0x080095cf
 8009350:	080095cf 	.word	0x080095cf
 8009354:	080095cf 	.word	0x080095cf
 8009358:	080095cf 	.word	0x080095cf
 800935c:	080095cf 	.word	0x080095cf
 8009360:	080095cf 	.word	0x080095cf
 8009364:	080095cf 	.word	0x080095cf
 8009368:	0800936d 	.word	0x0800936d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009372:	69db      	ldr	r3, [r3, #28]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00b      	beq.n	8009390 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800937e:	69db      	ldr	r3, [r3, #28]
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	7c12      	ldrb	r2, [r2, #16]
 8009384:	f107 0108 	add.w	r1, r7, #8
 8009388:	4610      	mov	r0, r2
 800938a:	4798      	blx	r3
 800938c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800938e:	e126      	b.n	80095de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fb27 	bl	80099e6 <USBD_CtlError>
        err++;
 8009398:	7afb      	ldrb	r3, [r7, #11]
 800939a:	3301      	adds	r3, #1
 800939c:	72fb      	strb	r3, [r7, #11]
      break;
 800939e:	e11e      	b.n	80095de <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	7c12      	ldrb	r2, [r2, #16]
 80093ac:	f107 0108 	add.w	r1, r7, #8
 80093b0:	4610      	mov	r0, r2
 80093b2:	4798      	blx	r3
 80093b4:	60f8      	str	r0, [r7, #12]
      break;
 80093b6:	e112      	b.n	80095de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	7c1b      	ldrb	r3, [r3, #16]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10d      	bne.n	80093dc <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093c8:	f107 0208 	add.w	r2, r7, #8
 80093cc:	4610      	mov	r0, r2
 80093ce:	4798      	blx	r3
 80093d0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	3301      	adds	r3, #1
 80093d6:	2202      	movs	r2, #2
 80093d8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80093da:	e100      	b.n	80095de <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e4:	f107 0208 	add.w	r2, r7, #8
 80093e8:	4610      	mov	r0, r2
 80093ea:	4798      	blx	r3
 80093ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	3301      	adds	r3, #1
 80093f2:	2202      	movs	r2, #2
 80093f4:	701a      	strb	r2, [r3, #0]
      break;
 80093f6:	e0f2      	b.n	80095de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	885b      	ldrh	r3, [r3, #2]
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2b05      	cmp	r3, #5
 8009400:	f200 80ac 	bhi.w	800955c <USBD_GetDescriptor+0x258>
 8009404:	a201      	add	r2, pc, #4	@ (adr r2, 800940c <USBD_GetDescriptor+0x108>)
 8009406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800940a:	bf00      	nop
 800940c:	08009425 	.word	0x08009425
 8009410:	08009459 	.word	0x08009459
 8009414:	0800948d 	.word	0x0800948d
 8009418:	080094c1 	.word	0x080094c1
 800941c:	080094f5 	.word	0x080094f5
 8009420:	08009529 	.word	0x08009529
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00b      	beq.n	8009448 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	7c12      	ldrb	r2, [r2, #16]
 800943c:	f107 0108 	add.w	r1, r7, #8
 8009440:	4610      	mov	r0, r2
 8009442:	4798      	blx	r3
 8009444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009446:	e091      	b.n	800956c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 facb 	bl	80099e6 <USBD_CtlError>
            err++;
 8009450:	7afb      	ldrb	r3, [r7, #11]
 8009452:	3301      	adds	r3, #1
 8009454:	72fb      	strb	r3, [r7, #11]
          break;
 8009456:	e089      	b.n	800956c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00b      	beq.n	800947c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	7c12      	ldrb	r2, [r2, #16]
 8009470:	f107 0108 	add.w	r1, r7, #8
 8009474:	4610      	mov	r0, r2
 8009476:	4798      	blx	r3
 8009478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800947a:	e077      	b.n	800956c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800947c:	6839      	ldr	r1, [r7, #0]
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fab1 	bl	80099e6 <USBD_CtlError>
            err++;
 8009484:	7afb      	ldrb	r3, [r7, #11]
 8009486:	3301      	adds	r3, #1
 8009488:	72fb      	strb	r3, [r7, #11]
          break;
 800948a:	e06f      	b.n	800956c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00b      	beq.n	80094b0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	7c12      	ldrb	r2, [r2, #16]
 80094a4:	f107 0108 	add.w	r1, r7, #8
 80094a8:	4610      	mov	r0, r2
 80094aa:	4798      	blx	r3
 80094ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094ae:	e05d      	b.n	800956c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fa97 	bl	80099e6 <USBD_CtlError>
            err++;
 80094b8:	7afb      	ldrb	r3, [r7, #11]
 80094ba:	3301      	adds	r3, #1
 80094bc:	72fb      	strb	r3, [r7, #11]
          break;
 80094be:	e055      	b.n	800956c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00b      	beq.n	80094e4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	7c12      	ldrb	r2, [r2, #16]
 80094d8:	f107 0108 	add.w	r1, r7, #8
 80094dc:	4610      	mov	r0, r2
 80094de:	4798      	blx	r3
 80094e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094e2:	e043      	b.n	800956c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094e4:	6839      	ldr	r1, [r7, #0]
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 fa7d 	bl	80099e6 <USBD_CtlError>
            err++;
 80094ec:	7afb      	ldrb	r3, [r7, #11]
 80094ee:	3301      	adds	r3, #1
 80094f0:	72fb      	strb	r3, [r7, #11]
          break;
 80094f2:	e03b      	b.n	800956c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094fa:	695b      	ldr	r3, [r3, #20]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00b      	beq.n	8009518 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009506:	695b      	ldr	r3, [r3, #20]
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	7c12      	ldrb	r2, [r2, #16]
 800950c:	f107 0108 	add.w	r1, r7, #8
 8009510:	4610      	mov	r0, r2
 8009512:	4798      	blx	r3
 8009514:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009516:	e029      	b.n	800956c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009518:	6839      	ldr	r1, [r7, #0]
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fa63 	bl	80099e6 <USBD_CtlError>
            err++;
 8009520:	7afb      	ldrb	r3, [r7, #11]
 8009522:	3301      	adds	r3, #1
 8009524:	72fb      	strb	r3, [r7, #11]
          break;
 8009526:	e021      	b.n	800956c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800952e:	699b      	ldr	r3, [r3, #24]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00b      	beq.n	800954c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800953a:	699b      	ldr	r3, [r3, #24]
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	7c12      	ldrb	r2, [r2, #16]
 8009540:	f107 0108 	add.w	r1, r7, #8
 8009544:	4610      	mov	r0, r2
 8009546:	4798      	blx	r3
 8009548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800954a:	e00f      	b.n	800956c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800954c:	6839      	ldr	r1, [r7, #0]
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 fa49 	bl	80099e6 <USBD_CtlError>
            err++;
 8009554:	7afb      	ldrb	r3, [r7, #11]
 8009556:	3301      	adds	r3, #1
 8009558:	72fb      	strb	r3, [r7, #11]
          break;
 800955a:	e007      	b.n	800956c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800955c:	6839      	ldr	r1, [r7, #0]
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 fa41 	bl	80099e6 <USBD_CtlError>
          err++;
 8009564:	7afb      	ldrb	r3, [r7, #11]
 8009566:	3301      	adds	r3, #1
 8009568:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800956a:	bf00      	nop
      }
      break;
 800956c:	e037      	b.n	80095de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	7c1b      	ldrb	r3, [r3, #16]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d109      	bne.n	800958a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800957c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800957e:	f107 0208 	add.w	r2, r7, #8
 8009582:	4610      	mov	r0, r2
 8009584:	4798      	blx	r3
 8009586:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009588:	e029      	b.n	80095de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800958a:	6839      	ldr	r1, [r7, #0]
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fa2a 	bl	80099e6 <USBD_CtlError>
        err++;
 8009592:	7afb      	ldrb	r3, [r7, #11]
 8009594:	3301      	adds	r3, #1
 8009596:	72fb      	strb	r3, [r7, #11]
      break;
 8009598:	e021      	b.n	80095de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	7c1b      	ldrb	r3, [r3, #16]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10d      	bne.n	80095be <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095aa:	f107 0208 	add.w	r2, r7, #8
 80095ae:	4610      	mov	r0, r2
 80095b0:	4798      	blx	r3
 80095b2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	3301      	adds	r3, #1
 80095b8:	2207      	movs	r2, #7
 80095ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095bc:	e00f      	b.n	80095de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80095be:	6839      	ldr	r1, [r7, #0]
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fa10 	bl	80099e6 <USBD_CtlError>
        err++;
 80095c6:	7afb      	ldrb	r3, [r7, #11]
 80095c8:	3301      	adds	r3, #1
 80095ca:	72fb      	strb	r3, [r7, #11]
      break;
 80095cc:	e007      	b.n	80095de <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80095ce:	6839      	ldr	r1, [r7, #0]
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 fa08 	bl	80099e6 <USBD_CtlError>
      err++;
 80095d6:	7afb      	ldrb	r3, [r7, #11]
 80095d8:	3301      	adds	r3, #1
 80095da:	72fb      	strb	r3, [r7, #11]
      break;
 80095dc:	bf00      	nop
  }

  if (err != 0U)
 80095de:	7afb      	ldrb	r3, [r7, #11]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d11e      	bne.n	8009622 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	88db      	ldrh	r3, [r3, #6]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d016      	beq.n	800961a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80095ec:	893b      	ldrh	r3, [r7, #8]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00e      	beq.n	8009610 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	88da      	ldrh	r2, [r3, #6]
 80095f6:	893b      	ldrh	r3, [r7, #8]
 80095f8:	4293      	cmp	r3, r2
 80095fa:	bf28      	it	cs
 80095fc:	4613      	movcs	r3, r2
 80095fe:	b29b      	uxth	r3, r3
 8009600:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009602:	893b      	ldrh	r3, [r7, #8]
 8009604:	461a      	mov	r2, r3
 8009606:	68f9      	ldr	r1, [r7, #12]
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fa69 	bl	8009ae0 <USBD_CtlSendData>
 800960e:	e009      	b.n	8009624 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009610:	6839      	ldr	r1, [r7, #0]
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 f9e7 	bl	80099e6 <USBD_CtlError>
 8009618:	e004      	b.n	8009624 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 faba 	bl	8009b94 <USBD_CtlSendStatus>
 8009620:	e000      	b.n	8009624 <USBD_GetDescriptor+0x320>
    return;
 8009622:	bf00      	nop
  }
}
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop

0800962c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	889b      	ldrh	r3, [r3, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d131      	bne.n	80096a2 <USBD_SetAddress+0x76>
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	88db      	ldrh	r3, [r3, #6]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d12d      	bne.n	80096a2 <USBD_SetAddress+0x76>
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	885b      	ldrh	r3, [r3, #2]
 800964a:	2b7f      	cmp	r3, #127	@ 0x7f
 800964c:	d829      	bhi.n	80096a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	885b      	ldrh	r3, [r3, #2]
 8009652:	b2db      	uxtb	r3, r3
 8009654:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009658:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009660:	b2db      	uxtb	r3, r3
 8009662:	2b03      	cmp	r3, #3
 8009664:	d104      	bne.n	8009670 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009666:	6839      	ldr	r1, [r7, #0]
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 f9bc 	bl	80099e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800966e:	e01d      	b.n	80096ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	7bfa      	ldrb	r2, [r7, #15]
 8009674:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009678:	7bfb      	ldrb	r3, [r7, #15]
 800967a:	4619      	mov	r1, r3
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 ff1b 	bl	800a4b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 fa86 	bl	8009b94 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009688:	7bfb      	ldrb	r3, [r7, #15]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d004      	beq.n	8009698 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2202      	movs	r2, #2
 8009692:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009696:	e009      	b.n	80096ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096a0:	e004      	b.n	80096ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f99e 	bl	80099e6 <USBD_CtlError>
  }
}
 80096aa:	bf00      	nop
 80096ac:	bf00      	nop
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	885b      	ldrh	r3, [r3, #2]
 80096c6:	b2da      	uxtb	r2, r3
 80096c8:	4b4e      	ldr	r3, [pc, #312]	@ (8009804 <USBD_SetConfig+0x150>)
 80096ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80096cc:	4b4d      	ldr	r3, [pc, #308]	@ (8009804 <USBD_SetConfig+0x150>)
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d905      	bls.n	80096e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80096d4:	6839      	ldr	r1, [r7, #0]
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f985 	bl	80099e6 <USBD_CtlError>
    return USBD_FAIL;
 80096dc:	2303      	movs	r3, #3
 80096de:	e08c      	b.n	80097fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d002      	beq.n	80096f2 <USBD_SetConfig+0x3e>
 80096ec:	2b03      	cmp	r3, #3
 80096ee:	d029      	beq.n	8009744 <USBD_SetConfig+0x90>
 80096f0:	e075      	b.n	80097de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80096f2:	4b44      	ldr	r3, [pc, #272]	@ (8009804 <USBD_SetConfig+0x150>)
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d020      	beq.n	800973c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80096fa:	4b42      	ldr	r3, [pc, #264]	@ (8009804 <USBD_SetConfig+0x150>)
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	461a      	mov	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009704:	4b3f      	ldr	r3, [pc, #252]	@ (8009804 <USBD_SetConfig+0x150>)
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	4619      	mov	r1, r3
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7fe ffb9 	bl	8008682 <USBD_SetClassConfig>
 8009710:	4603      	mov	r3, r0
 8009712:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009714:	7bfb      	ldrb	r3, [r7, #15]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d008      	beq.n	800972c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800971a:	6839      	ldr	r1, [r7, #0]
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 f962 	bl	80099e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2202      	movs	r2, #2
 8009726:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800972a:	e065      	b.n	80097f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 fa31 	bl	8009b94 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2203      	movs	r2, #3
 8009736:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800973a:	e05d      	b.n	80097f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 fa29 	bl	8009b94 <USBD_CtlSendStatus>
      break;
 8009742:	e059      	b.n	80097f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009744:	4b2f      	ldr	r3, [pc, #188]	@ (8009804 <USBD_SetConfig+0x150>)
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d112      	bne.n	8009772 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2202      	movs	r2, #2
 8009750:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009754:	4b2b      	ldr	r3, [pc, #172]	@ (8009804 <USBD_SetConfig+0x150>)
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	461a      	mov	r2, r3
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800975e:	4b29      	ldr	r3, [pc, #164]	@ (8009804 <USBD_SetConfig+0x150>)
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	4619      	mov	r1, r3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f7fe ffa8 	bl	80086ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 fa12 	bl	8009b94 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009770:	e042      	b.n	80097f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009772:	4b24      	ldr	r3, [pc, #144]	@ (8009804 <USBD_SetConfig+0x150>)
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	461a      	mov	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	429a      	cmp	r2, r3
 800977e:	d02a      	beq.n	80097d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	b2db      	uxtb	r3, r3
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f7fe ff96 	bl	80086ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800978e:	4b1d      	ldr	r3, [pc, #116]	@ (8009804 <USBD_SetConfig+0x150>)
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	461a      	mov	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009798:	4b1a      	ldr	r3, [pc, #104]	@ (8009804 <USBD_SetConfig+0x150>)
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	4619      	mov	r1, r3
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f7fe ff6f 	bl	8008682 <USBD_SetClassConfig>
 80097a4:	4603      	mov	r3, r0
 80097a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00f      	beq.n	80097ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80097ae:	6839      	ldr	r1, [r7, #0]
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 f918 	bl	80099e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	4619      	mov	r1, r3
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f7fe ff7b 	bl	80086ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2202      	movs	r2, #2
 80097c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80097cc:	e014      	b.n	80097f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f9e0 	bl	8009b94 <USBD_CtlSendStatus>
      break;
 80097d4:	e010      	b.n	80097f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 f9dc 	bl	8009b94 <USBD_CtlSendStatus>
      break;
 80097dc:	e00c      	b.n	80097f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80097de:	6839      	ldr	r1, [r7, #0]
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 f900 	bl	80099e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80097e6:	4b07      	ldr	r3, [pc, #28]	@ (8009804 <USBD_SetConfig+0x150>)
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	4619      	mov	r1, r3
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f7fe ff64 	bl	80086ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80097f2:	2303      	movs	r3, #3
 80097f4:	73fb      	strb	r3, [r7, #15]
      break;
 80097f6:	bf00      	nop
  }

  return ret;
 80097f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	200005b4 	.word	0x200005b4

08009808 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	88db      	ldrh	r3, [r3, #6]
 8009816:	2b01      	cmp	r3, #1
 8009818:	d004      	beq.n	8009824 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 f8e2 	bl	80099e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009822:	e023      	b.n	800986c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800982a:	b2db      	uxtb	r3, r3
 800982c:	2b02      	cmp	r3, #2
 800982e:	dc02      	bgt.n	8009836 <USBD_GetConfig+0x2e>
 8009830:	2b00      	cmp	r3, #0
 8009832:	dc03      	bgt.n	800983c <USBD_GetConfig+0x34>
 8009834:	e015      	b.n	8009862 <USBD_GetConfig+0x5a>
 8009836:	2b03      	cmp	r3, #3
 8009838:	d00b      	beq.n	8009852 <USBD_GetConfig+0x4a>
 800983a:	e012      	b.n	8009862 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	3308      	adds	r3, #8
 8009846:	2201      	movs	r2, #1
 8009848:	4619      	mov	r1, r3
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 f948 	bl	8009ae0 <USBD_CtlSendData>
        break;
 8009850:	e00c      	b.n	800986c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	3304      	adds	r3, #4
 8009856:	2201      	movs	r2, #1
 8009858:	4619      	mov	r1, r3
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f940 	bl	8009ae0 <USBD_CtlSendData>
        break;
 8009860:	e004      	b.n	800986c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009862:	6839      	ldr	r1, [r7, #0]
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 f8be 	bl	80099e6 <USBD_CtlError>
        break;
 800986a:	bf00      	nop
}
 800986c:	bf00      	nop
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009884:	b2db      	uxtb	r3, r3
 8009886:	3b01      	subs	r3, #1
 8009888:	2b02      	cmp	r3, #2
 800988a:	d81e      	bhi.n	80098ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	88db      	ldrh	r3, [r3, #6]
 8009890:	2b02      	cmp	r3, #2
 8009892:	d004      	beq.n	800989e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009894:	6839      	ldr	r1, [r7, #0]
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 f8a5 	bl	80099e6 <USBD_CtlError>
        break;
 800989c:	e01a      	b.n	80098d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2201      	movs	r2, #1
 80098a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d005      	beq.n	80098ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	f043 0202 	orr.w	r2, r3, #2
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	330c      	adds	r3, #12
 80098be:	2202      	movs	r2, #2
 80098c0:	4619      	mov	r1, r3
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 f90c 	bl	8009ae0 <USBD_CtlSendData>
      break;
 80098c8:	e004      	b.n	80098d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80098ca:	6839      	ldr	r1, [r7, #0]
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f88a 	bl	80099e6 <USBD_CtlError>
      break;
 80098d2:	bf00      	nop
  }
}
 80098d4:	bf00      	nop
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	885b      	ldrh	r3, [r3, #2]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d107      	bne.n	80098fe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f94c 	bl	8009b94 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80098fc:	e013      	b.n	8009926 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	885b      	ldrh	r3, [r3, #2]
 8009902:	2b02      	cmp	r3, #2
 8009904:	d10b      	bne.n	800991e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	889b      	ldrh	r3, [r3, #4]
 800990a:	0a1b      	lsrs	r3, r3, #8
 800990c:	b29b      	uxth	r3, r3
 800990e:	b2da      	uxtb	r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 f93c 	bl	8009b94 <USBD_CtlSendStatus>
}
 800991c:	e003      	b.n	8009926 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800991e:	6839      	ldr	r1, [r7, #0]
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f860 	bl	80099e6 <USBD_CtlError>
}
 8009926:	bf00      	nop
 8009928:	3708      	adds	r7, #8
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b082      	sub	sp, #8
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
 8009936:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800993e:	b2db      	uxtb	r3, r3
 8009940:	3b01      	subs	r3, #1
 8009942:	2b02      	cmp	r3, #2
 8009944:	d80b      	bhi.n	800995e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	885b      	ldrh	r3, [r3, #2]
 800994a:	2b01      	cmp	r3, #1
 800994c:	d10c      	bne.n	8009968 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f91c 	bl	8009b94 <USBD_CtlSendStatus>
      }
      break;
 800995c:	e004      	b.n	8009968 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800995e:	6839      	ldr	r1, [r7, #0]
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 f840 	bl	80099e6 <USBD_CtlError>
      break;
 8009966:	e000      	b.n	800996a <USBD_ClrFeature+0x3c>
      break;
 8009968:	bf00      	nop
  }
}
 800996a:	bf00      	nop
 800996c:	3708      	adds	r7, #8
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b084      	sub	sp, #16
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	781a      	ldrb	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	3301      	adds	r3, #1
 800998c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	781a      	ldrb	r2, [r3, #0]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	3301      	adds	r3, #1
 800999a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f7ff fa16 	bl	8008dce <SWAPBYTE>
 80099a2:	4603      	mov	r3, r0
 80099a4:	461a      	mov	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	3301      	adds	r3, #1
 80099ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	3301      	adds	r3, #1
 80099b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f7ff fa09 	bl	8008dce <SWAPBYTE>
 80099bc:	4603      	mov	r3, r0
 80099be:	461a      	mov	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	3301      	adds	r3, #1
 80099c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	3301      	adds	r3, #1
 80099ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f7ff f9fc 	bl	8008dce <SWAPBYTE>
 80099d6:	4603      	mov	r3, r0
 80099d8:	461a      	mov	r2, r3
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	80da      	strh	r2, [r3, #6]
}
 80099de:	bf00      	nop
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b082      	sub	sp, #8
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80099f0:	2180      	movs	r1, #128	@ 0x80
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fcf6 	bl	800a3e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80099f8:	2100      	movs	r1, #0
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fcf2 	bl	800a3e4 <USBD_LL_StallEP>
}
 8009a00:	bf00      	nop
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b086      	sub	sp, #24
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009a14:	2300      	movs	r3, #0
 8009a16:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d042      	beq.n	8009aa4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009a22:	6938      	ldr	r0, [r7, #16]
 8009a24:	f000 f842 	bl	8009aac <USBD_GetLen>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	005b      	lsls	r3, r3, #1
 8009a2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a32:	d808      	bhi.n	8009a46 <USBD_GetString+0x3e>
 8009a34:	6938      	ldr	r0, [r7, #16]
 8009a36:	f000 f839 	bl	8009aac <USBD_GetLen>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	005b      	lsls	r3, r3, #1
 8009a42:	b29a      	uxth	r2, r3
 8009a44:	e001      	b.n	8009a4a <USBD_GetString+0x42>
 8009a46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009a4e:	7dfb      	ldrb	r3, [r7, #23]
 8009a50:	68ba      	ldr	r2, [r7, #8]
 8009a52:	4413      	add	r3, r2
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	7812      	ldrb	r2, [r2, #0]
 8009a58:	701a      	strb	r2, [r3, #0]
  idx++;
 8009a5a:	7dfb      	ldrb	r3, [r7, #23]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009a60:	7dfb      	ldrb	r3, [r7, #23]
 8009a62:	68ba      	ldr	r2, [r7, #8]
 8009a64:	4413      	add	r3, r2
 8009a66:	2203      	movs	r2, #3
 8009a68:	701a      	strb	r2, [r3, #0]
  idx++;
 8009a6a:	7dfb      	ldrb	r3, [r7, #23]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009a70:	e013      	b.n	8009a9a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009a72:	7dfb      	ldrb	r3, [r7, #23]
 8009a74:	68ba      	ldr	r2, [r7, #8]
 8009a76:	4413      	add	r3, r2
 8009a78:	693a      	ldr	r2, [r7, #16]
 8009a7a:	7812      	ldrb	r2, [r2, #0]
 8009a7c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	3301      	adds	r3, #1
 8009a82:	613b      	str	r3, [r7, #16]
    idx++;
 8009a84:	7dfb      	ldrb	r3, [r7, #23]
 8009a86:	3301      	adds	r3, #1
 8009a88:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009a8a:	7dfb      	ldrb	r3, [r7, #23]
 8009a8c:	68ba      	ldr	r2, [r7, #8]
 8009a8e:	4413      	add	r3, r2
 8009a90:	2200      	movs	r2, #0
 8009a92:	701a      	strb	r2, [r3, #0]
    idx++;
 8009a94:	7dfb      	ldrb	r3, [r7, #23]
 8009a96:	3301      	adds	r3, #1
 8009a98:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1e7      	bne.n	8009a72 <USBD_GetString+0x6a>
 8009aa2:	e000      	b.n	8009aa6 <USBD_GetString+0x9e>
    return;
 8009aa4:	bf00      	nop
  }
}
 8009aa6:	3718      	adds	r7, #24
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009abc:	e005      	b.n	8009aca <USBD_GetLen+0x1e>
  {
    len++;
 8009abe:	7bfb      	ldrb	r3, [r7, #15]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1f5      	bne.n	8009abe <USBD_GetLen+0x12>
  }

  return len;
 8009ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3714      	adds	r7, #20
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2202      	movs	r2, #2
 8009af0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	2100      	movs	r1, #0
 8009b06:	68f8      	ldr	r0, [r7, #12]
 8009b08:	f000 fcf5 	bl	800a4f6 <USBD_LL_Transmit>

  return USBD_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b084      	sub	sp, #16
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	60f8      	str	r0, [r7, #12]
 8009b1e:	60b9      	str	r1, [r7, #8]
 8009b20:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	68ba      	ldr	r2, [r7, #8]
 8009b26:	2100      	movs	r1, #0
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f000 fce4 	bl	800a4f6 <USBD_LL_Transmit>

  return USBD_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2203      	movs	r2, #3
 8009b48:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	68ba      	ldr	r2, [r7, #8]
 8009b60:	2100      	movs	r1, #0
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f000 fce8 	bl	800a538 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b084      	sub	sp, #16
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	60f8      	str	r0, [r7, #12]
 8009b7a:	60b9      	str	r1, [r7, #8]
 8009b7c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	68ba      	ldr	r2, [r7, #8]
 8009b82:	2100      	movs	r1, #0
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f000 fcd7 	bl	800a538 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2204      	movs	r2, #4
 8009ba0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	2100      	movs	r1, #0
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fca3 	bl	800a4f6 <USBD_LL_Transmit>

  return USBD_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b082      	sub	sp, #8
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2205      	movs	r2, #5
 8009bc6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bca:	2300      	movs	r3, #0
 8009bcc:	2200      	movs	r2, #0
 8009bce:	2100      	movs	r1, #0
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fcb1 	bl	800a538 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009be4:	2200      	movs	r2, #0
 8009be6:	4912      	ldr	r1, [pc, #72]	@ (8009c30 <MX_USB_DEVICE_Init+0x50>)
 8009be8:	4812      	ldr	r0, [pc, #72]	@ (8009c34 <MX_USB_DEVICE_Init+0x54>)
 8009bea:	f7fe fccd 	bl	8008588 <USBD_Init>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d001      	beq.n	8009bf8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009bf4:	f7f7 fa86 	bl	8001104 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009bf8:	490f      	ldr	r1, [pc, #60]	@ (8009c38 <MX_USB_DEVICE_Init+0x58>)
 8009bfa:	480e      	ldr	r0, [pc, #56]	@ (8009c34 <MX_USB_DEVICE_Init+0x54>)
 8009bfc:	f7fe fcf4 	bl	80085e8 <USBD_RegisterClass>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d001      	beq.n	8009c0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009c06:	f7f7 fa7d 	bl	8001104 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009c0a:	490c      	ldr	r1, [pc, #48]	@ (8009c3c <MX_USB_DEVICE_Init+0x5c>)
 8009c0c:	4809      	ldr	r0, [pc, #36]	@ (8009c34 <MX_USB_DEVICE_Init+0x54>)
 8009c0e:	f7fe fc2b 	bl	8008468 <USBD_CDC_RegisterInterface>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d001      	beq.n	8009c1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009c18:	f7f7 fa74 	bl	8001104 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009c1c:	4805      	ldr	r0, [pc, #20]	@ (8009c34 <MX_USB_DEVICE_Init+0x54>)
 8009c1e:	f7fe fd19 	bl	8008654 <USBD_Start>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d001      	beq.n	8009c2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009c28:	f7f7 fa6c 	bl	8001104 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009c2c:	bf00      	nop
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	2000031c 	.word	0x2000031c
 8009c34:	200005b8 	.word	0x200005b8
 8009c38:	20000288 	.word	0x20000288
 8009c3c:	20000308 	.word	0x20000308

08009c40 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009c44:	2200      	movs	r2, #0
 8009c46:	4905      	ldr	r1, [pc, #20]	@ (8009c5c <CDC_Init_FS+0x1c>)
 8009c48:	4805      	ldr	r0, [pc, #20]	@ (8009c60 <CDC_Init_FS+0x20>)
 8009c4a:	f7fe fc27 	bl	800849c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009c4e:	4905      	ldr	r1, [pc, #20]	@ (8009c64 <CDC_Init_FS+0x24>)
 8009c50:	4803      	ldr	r0, [pc, #12]	@ (8009c60 <CDC_Init_FS+0x20>)
 8009c52:	f7fe fc45 	bl	80084e0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009c56:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	20001094 	.word	0x20001094
 8009c60:	200005b8 	.word	0x200005b8
 8009c64:	20000894 	.word	0x20000894

08009c68 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009c6c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	4603      	mov	r3, r0
 8009c80:	6039      	str	r1, [r7, #0]
 8009c82:	71fb      	strb	r3, [r7, #7]
 8009c84:	4613      	mov	r3, r2
 8009c86:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009c88:	79fb      	ldrb	r3, [r7, #7]
 8009c8a:	2b23      	cmp	r3, #35	@ 0x23
 8009c8c:	d84a      	bhi.n	8009d24 <CDC_Control_FS+0xac>
 8009c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c94 <CDC_Control_FS+0x1c>)
 8009c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c94:	08009d25 	.word	0x08009d25
 8009c98:	08009d25 	.word	0x08009d25
 8009c9c:	08009d25 	.word	0x08009d25
 8009ca0:	08009d25 	.word	0x08009d25
 8009ca4:	08009d25 	.word	0x08009d25
 8009ca8:	08009d25 	.word	0x08009d25
 8009cac:	08009d25 	.word	0x08009d25
 8009cb0:	08009d25 	.word	0x08009d25
 8009cb4:	08009d25 	.word	0x08009d25
 8009cb8:	08009d25 	.word	0x08009d25
 8009cbc:	08009d25 	.word	0x08009d25
 8009cc0:	08009d25 	.word	0x08009d25
 8009cc4:	08009d25 	.word	0x08009d25
 8009cc8:	08009d25 	.word	0x08009d25
 8009ccc:	08009d25 	.word	0x08009d25
 8009cd0:	08009d25 	.word	0x08009d25
 8009cd4:	08009d25 	.word	0x08009d25
 8009cd8:	08009d25 	.word	0x08009d25
 8009cdc:	08009d25 	.word	0x08009d25
 8009ce0:	08009d25 	.word	0x08009d25
 8009ce4:	08009d25 	.word	0x08009d25
 8009ce8:	08009d25 	.word	0x08009d25
 8009cec:	08009d25 	.word	0x08009d25
 8009cf0:	08009d25 	.word	0x08009d25
 8009cf4:	08009d25 	.word	0x08009d25
 8009cf8:	08009d25 	.word	0x08009d25
 8009cfc:	08009d25 	.word	0x08009d25
 8009d00:	08009d25 	.word	0x08009d25
 8009d04:	08009d25 	.word	0x08009d25
 8009d08:	08009d25 	.word	0x08009d25
 8009d0c:	08009d25 	.word	0x08009d25
 8009d10:	08009d25 	.word	0x08009d25
 8009d14:	08009d25 	.word	0x08009d25
 8009d18:	08009d25 	.word	0x08009d25
 8009d1c:	08009d25 	.word	0x08009d25
 8009d20:	08009d25 	.word	0x08009d25
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009d24:	bf00      	nop
  }

  return (USBD_OK);
 8009d26:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009d3e:	6879      	ldr	r1, [r7, #4]
 8009d40:	4805      	ldr	r0, [pc, #20]	@ (8009d58 <CDC_Receive_FS+0x24>)
 8009d42:	f7fe fbcd 	bl	80084e0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009d46:	4804      	ldr	r0, [pc, #16]	@ (8009d58 <CDC_Receive_FS+0x24>)
 8009d48:	f7fe fbe8 	bl	800851c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009d4c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	200005b8 	.word	0x200005b8

08009d5c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b087      	sub	sp, #28
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	4613      	mov	r3, r2
 8009d68:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009d6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	371c      	adds	r7, #28
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
	...

08009d80 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	4603      	mov	r3, r0
 8009d88:	6039      	str	r1, [r7, #0]
 8009d8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	2212      	movs	r2, #18
 8009d90:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009d92:	4b03      	ldr	r3, [pc, #12]	@ (8009da0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	2000033c 	.word	0x2000033c

08009da4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	4603      	mov	r3, r0
 8009dac:	6039      	str	r1, [r7, #0]
 8009dae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	2204      	movs	r2, #4
 8009db4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009db6:	4b03      	ldr	r3, [pc, #12]	@ (8009dc4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr
 8009dc4:	2000035c 	.word	0x2000035c

08009dc8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	4603      	mov	r3, r0
 8009dd0:	6039      	str	r1, [r7, #0]
 8009dd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009dd4:	79fb      	ldrb	r3, [r7, #7]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d105      	bne.n	8009de6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009dda:	683a      	ldr	r2, [r7, #0]
 8009ddc:	4907      	ldr	r1, [pc, #28]	@ (8009dfc <USBD_FS_ProductStrDescriptor+0x34>)
 8009dde:	4808      	ldr	r0, [pc, #32]	@ (8009e00 <USBD_FS_ProductStrDescriptor+0x38>)
 8009de0:	f7ff fe12 	bl	8009a08 <USBD_GetString>
 8009de4:	e004      	b.n	8009df0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009de6:	683a      	ldr	r2, [r7, #0]
 8009de8:	4904      	ldr	r1, [pc, #16]	@ (8009dfc <USBD_FS_ProductStrDescriptor+0x34>)
 8009dea:	4805      	ldr	r0, [pc, #20]	@ (8009e00 <USBD_FS_ProductStrDescriptor+0x38>)
 8009dec:	f7ff fe0c 	bl	8009a08 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009df0:	4b02      	ldr	r3, [pc, #8]	@ (8009dfc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3708      	adds	r7, #8
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	20001894 	.word	0x20001894
 8009e00:	0800aa3c 	.word	0x0800aa3c

08009e04 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	6039      	str	r1, [r7, #0]
 8009e0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009e10:	683a      	ldr	r2, [r7, #0]
 8009e12:	4904      	ldr	r1, [pc, #16]	@ (8009e24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009e14:	4804      	ldr	r0, [pc, #16]	@ (8009e28 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009e16:	f7ff fdf7 	bl	8009a08 <USBD_GetString>
  return USBD_StrDesc;
 8009e1a:	4b02      	ldr	r3, [pc, #8]	@ (8009e24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	20001894 	.word	0x20001894
 8009e28:	0800aa54 	.word	0x0800aa54

08009e2c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	4603      	mov	r3, r0
 8009e34:	6039      	str	r1, [r7, #0]
 8009e36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	221a      	movs	r2, #26
 8009e3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009e3e:	f000 f855 	bl	8009eec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009e42:	4b02      	ldr	r3, [pc, #8]	@ (8009e4c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3708      	adds	r7, #8
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	20000360 	.word	0x20000360

08009e50 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	4603      	mov	r3, r0
 8009e58:	6039      	str	r1, [r7, #0]
 8009e5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009e5c:	79fb      	ldrb	r3, [r7, #7]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d105      	bne.n	8009e6e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	4907      	ldr	r1, [pc, #28]	@ (8009e84 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e66:	4808      	ldr	r0, [pc, #32]	@ (8009e88 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e68:	f7ff fdce 	bl	8009a08 <USBD_GetString>
 8009e6c:	e004      	b.n	8009e78 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e6e:	683a      	ldr	r2, [r7, #0]
 8009e70:	4904      	ldr	r1, [pc, #16]	@ (8009e84 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e72:	4805      	ldr	r0, [pc, #20]	@ (8009e88 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e74:	f7ff fdc8 	bl	8009a08 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e78:	4b02      	ldr	r3, [pc, #8]	@ (8009e84 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3708      	adds	r7, #8
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	20001894 	.word	0x20001894
 8009e88:	0800aa68 	.word	0x0800aa68

08009e8c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	4603      	mov	r3, r0
 8009e94:	6039      	str	r1, [r7, #0]
 8009e96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e98:	79fb      	ldrb	r3, [r7, #7]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d105      	bne.n	8009eaa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e9e:	683a      	ldr	r2, [r7, #0]
 8009ea0:	4907      	ldr	r1, [pc, #28]	@ (8009ec0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ea2:	4808      	ldr	r0, [pc, #32]	@ (8009ec4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ea4:	f7ff fdb0 	bl	8009a08 <USBD_GetString>
 8009ea8:	e004      	b.n	8009eb4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009eaa:	683a      	ldr	r2, [r7, #0]
 8009eac:	4904      	ldr	r1, [pc, #16]	@ (8009ec0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009eae:	4805      	ldr	r0, [pc, #20]	@ (8009ec4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009eb0:	f7ff fdaa 	bl	8009a08 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009eb4:	4b02      	ldr	r3, [pc, #8]	@ (8009ec0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3708      	adds	r7, #8
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	20001894 	.word	0x20001894
 8009ec4:	0800aa74 	.word	0x0800aa74

08009ec8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	4603      	mov	r3, r0
 8009ed0:	6039      	str	r1, [r7, #0]
 8009ed2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	220c      	movs	r2, #12
 8009ed8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009eda:	4b03      	ldr	r3, [pc, #12]	@ (8009ee8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	370c      	adds	r7, #12
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr
 8009ee8:	20000350 	.word	0x20000350

08009eec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8009f30 <Get_SerialNum+0x44>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8009f34 <Get_SerialNum+0x48>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009efe:	4b0e      	ldr	r3, [pc, #56]	@ (8009f38 <Get_SerialNum+0x4c>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009f04:	68fa      	ldr	r2, [r7, #12]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4413      	add	r3, r2
 8009f0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d009      	beq.n	8009f26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009f12:	2208      	movs	r2, #8
 8009f14:	4909      	ldr	r1, [pc, #36]	@ (8009f3c <Get_SerialNum+0x50>)
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f000 f814 	bl	8009f44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009f1c:	2204      	movs	r2, #4
 8009f1e:	4908      	ldr	r1, [pc, #32]	@ (8009f40 <Get_SerialNum+0x54>)
 8009f20:	68b8      	ldr	r0, [r7, #8]
 8009f22:	f000 f80f 	bl	8009f44 <IntToUnicode>
  }
}
 8009f26:	bf00      	nop
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	1ff0f420 	.word	0x1ff0f420
 8009f34:	1ff0f424 	.word	0x1ff0f424
 8009f38:	1ff0f428 	.word	0x1ff0f428
 8009f3c:	20000362 	.word	0x20000362
 8009f40:	20000372 	.word	0x20000372

08009f44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b087      	sub	sp, #28
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	4613      	mov	r3, r2
 8009f50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009f52:	2300      	movs	r3, #0
 8009f54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009f56:	2300      	movs	r3, #0
 8009f58:	75fb      	strb	r3, [r7, #23]
 8009f5a:	e027      	b.n	8009fac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	0f1b      	lsrs	r3, r3, #28
 8009f60:	2b09      	cmp	r3, #9
 8009f62:	d80b      	bhi.n	8009f7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	0f1b      	lsrs	r3, r3, #28
 8009f68:	b2da      	uxtb	r2, r3
 8009f6a:	7dfb      	ldrb	r3, [r7, #23]
 8009f6c:	005b      	lsls	r3, r3, #1
 8009f6e:	4619      	mov	r1, r3
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	440b      	add	r3, r1
 8009f74:	3230      	adds	r2, #48	@ 0x30
 8009f76:	b2d2      	uxtb	r2, r2
 8009f78:	701a      	strb	r2, [r3, #0]
 8009f7a:	e00a      	b.n	8009f92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	0f1b      	lsrs	r3, r3, #28
 8009f80:	b2da      	uxtb	r2, r3
 8009f82:	7dfb      	ldrb	r3, [r7, #23]
 8009f84:	005b      	lsls	r3, r3, #1
 8009f86:	4619      	mov	r1, r3
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	440b      	add	r3, r1
 8009f8c:	3237      	adds	r2, #55	@ 0x37
 8009f8e:	b2d2      	uxtb	r2, r2
 8009f90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	011b      	lsls	r3, r3, #4
 8009f96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009f98:	7dfb      	ldrb	r3, [r7, #23]
 8009f9a:	005b      	lsls	r3, r3, #1
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009fa6:	7dfb      	ldrb	r3, [r7, #23]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	75fb      	strb	r3, [r7, #23]
 8009fac:	7dfa      	ldrb	r2, [r7, #23]
 8009fae:	79fb      	ldrb	r3, [r7, #7]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d3d3      	bcc.n	8009f5c <IntToUnicode+0x18>
  }
}
 8009fb4:	bf00      	nop
 8009fb6:	bf00      	nop
 8009fb8:	371c      	adds	r7, #28
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
	...

08009fc4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b0ac      	sub	sp, #176	@ 0xb0
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fcc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	601a      	str	r2, [r3, #0]
 8009fd4:	605a      	str	r2, [r3, #4]
 8009fd6:	609a      	str	r2, [r3, #8]
 8009fd8:	60da      	str	r2, [r3, #12]
 8009fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009fdc:	f107 0318 	add.w	r3, r7, #24
 8009fe0:	2284      	movs	r2, #132	@ 0x84
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 fc19 	bl	800a81c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ff2:	d151      	bne.n	800a098 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009ff4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009ff8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a000:	f107 0318 	add.w	r3, r7, #24
 800a004:	4618      	mov	r0, r3
 800a006:	f7fa f905 	bl	8004214 <HAL_RCCEx_PeriphCLKConfig>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d001      	beq.n	800a014 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800a010:	f7f7 f878 	bl	8001104 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a014:	4b22      	ldr	r3, [pc, #136]	@ (800a0a0 <HAL_PCD_MspInit+0xdc>)
 800a016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a018:	4a21      	ldr	r2, [pc, #132]	@ (800a0a0 <HAL_PCD_MspInit+0xdc>)
 800a01a:	f043 0301 	orr.w	r3, r3, #1
 800a01e:	6313      	str	r3, [r2, #48]	@ 0x30
 800a020:	4b1f      	ldr	r3, [pc, #124]	@ (800a0a0 <HAL_PCD_MspInit+0xdc>)
 800a022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a024:	f003 0301 	and.w	r3, r3, #1
 800a028:	617b      	str	r3, [r7, #20]
 800a02a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a02c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a030:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a034:	2302      	movs	r3, #2
 800a036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a03a:	2300      	movs	r3, #0
 800a03c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a040:	2303      	movs	r3, #3
 800a042:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a046:	230a      	movs	r3, #10
 800a048:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a04c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800a050:	4619      	mov	r1, r3
 800a052:	4814      	ldr	r0, [pc, #80]	@ (800a0a4 <HAL_PCD_MspInit+0xe0>)
 800a054:	f7f7 ffec 	bl	8002030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a058:	4b11      	ldr	r3, [pc, #68]	@ (800a0a0 <HAL_PCD_MspInit+0xdc>)
 800a05a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a05c:	4a10      	ldr	r2, [pc, #64]	@ (800a0a0 <HAL_PCD_MspInit+0xdc>)
 800a05e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a062:	6353      	str	r3, [r2, #52]	@ 0x34
 800a064:	4b0e      	ldr	r3, [pc, #56]	@ (800a0a0 <HAL_PCD_MspInit+0xdc>)
 800a066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a06c:	613b      	str	r3, [r7, #16]
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	4b0b      	ldr	r3, [pc, #44]	@ (800a0a0 <HAL_PCD_MspInit+0xdc>)
 800a072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a074:	4a0a      	ldr	r2, [pc, #40]	@ (800a0a0 <HAL_PCD_MspInit+0xdc>)
 800a076:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a07a:	6453      	str	r3, [r2, #68]	@ 0x44
 800a07c:	4b08      	ldr	r3, [pc, #32]	@ (800a0a0 <HAL_PCD_MspInit+0xdc>)
 800a07e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a080:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a084:	60fb      	str	r3, [r7, #12]
 800a086:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a088:	2200      	movs	r2, #0
 800a08a:	2100      	movs	r1, #0
 800a08c:	2043      	movs	r0, #67	@ 0x43
 800a08e:	f7f7 fd30 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a092:	2043      	movs	r0, #67	@ 0x43
 800a094:	f7f7 fd49 	bl	8001b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a098:	bf00      	nop
 800a09a:	37b0      	adds	r7, #176	@ 0xb0
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	40023800 	.word	0x40023800
 800a0a4:	40020000 	.word	0x40020000

0800a0a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a0bc:	4619      	mov	r1, r3
 800a0be:	4610      	mov	r0, r2
 800a0c0:	f7fe fb15 	bl	80086ee <USBD_LL_SetupStage>
}
 800a0c4:	bf00      	nop
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800a0de:	78fa      	ldrb	r2, [r7, #3]
 800a0e0:	6879      	ldr	r1, [r7, #4]
 800a0e2:	4613      	mov	r3, r2
 800a0e4:	00db      	lsls	r3, r3, #3
 800a0e6:	4413      	add	r3, r2
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	440b      	add	r3, r1
 800a0ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	78fb      	ldrb	r3, [r7, #3]
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	f7fe fb4f 	bl	8008798 <USBD_LL_DataOutStage>
}
 800a0fa:	bf00      	nop
 800a0fc:	3708      	adds	r7, #8
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b082      	sub	sp, #8
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
 800a10a:	460b      	mov	r3, r1
 800a10c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800a114:	78fa      	ldrb	r2, [r7, #3]
 800a116:	6879      	ldr	r1, [r7, #4]
 800a118:	4613      	mov	r3, r2
 800a11a:	00db      	lsls	r3, r3, #3
 800a11c:	4413      	add	r3, r2
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	440b      	add	r3, r1
 800a122:	3320      	adds	r3, #32
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	78fb      	ldrb	r3, [r7, #3]
 800a128:	4619      	mov	r1, r3
 800a12a:	f7fe fbe8 	bl	80088fe <USBD_LL_DataInStage>
}
 800a12e:	bf00      	nop
 800a130:	3708      	adds	r7, #8
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a136:	b580      	push	{r7, lr}
 800a138:	b082      	sub	sp, #8
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a144:	4618      	mov	r0, r3
 800a146:	f7fe fd22 	bl	8008b8e <USBD_LL_SOF>
}
 800a14a:	bf00      	nop
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b084      	sub	sp, #16
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a15a:	2301      	movs	r3, #1
 800a15c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	79db      	ldrb	r3, [r3, #7]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d102      	bne.n	800a16c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a166:	2300      	movs	r3, #0
 800a168:	73fb      	strb	r3, [r7, #15]
 800a16a:	e008      	b.n	800a17e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	79db      	ldrb	r3, [r3, #7]
 800a170:	2b02      	cmp	r3, #2
 800a172:	d102      	bne.n	800a17a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a174:	2301      	movs	r3, #1
 800a176:	73fb      	strb	r3, [r7, #15]
 800a178:	e001      	b.n	800a17e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a17a:	f7f6 ffc3 	bl	8001104 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a184:	7bfa      	ldrb	r2, [r7, #15]
 800a186:	4611      	mov	r1, r2
 800a188:	4618      	mov	r0, r3
 800a18a:	f7fe fcbc 	bl	8008b06 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a194:	4618      	mov	r0, r3
 800a196:	f7fe fc64 	bl	8008a62 <USBD_LL_Reset>
}
 800a19a:	bf00      	nop
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
	...

0800a1a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7fe fcb7 	bl	8008b26 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	6812      	ldr	r2, [r2, #0]
 800a1c6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a1ca:	f043 0301 	orr.w	r3, r3, #1
 800a1ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	7adb      	ldrb	r3, [r3, #11]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d005      	beq.n	800a1e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a1d8:	4b04      	ldr	r3, [pc, #16]	@ (800a1ec <HAL_PCD_SuspendCallback+0x48>)
 800a1da:	691b      	ldr	r3, [r3, #16]
 800a1dc:	4a03      	ldr	r2, [pc, #12]	@ (800a1ec <HAL_PCD_SuspendCallback+0x48>)
 800a1de:	f043 0306 	orr.w	r3, r3, #6
 800a1e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a1e4:	bf00      	nop
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	e000ed00 	.word	0xe000ed00

0800a1f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7fe fcad 	bl	8008b5e <USBD_LL_Resume>
}
 800a204:	bf00      	nop
 800a206:	3708      	adds	r7, #8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	460b      	mov	r3, r1
 800a216:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a21e:	78fa      	ldrb	r2, [r7, #3]
 800a220:	4611      	mov	r1, r2
 800a222:	4618      	mov	r0, r3
 800a224:	f7fe fd05 	bl	8008c32 <USBD_LL_IsoOUTIncomplete>
}
 800a228:	bf00      	nop
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	460b      	mov	r3, r1
 800a23a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a242:	78fa      	ldrb	r2, [r7, #3]
 800a244:	4611      	mov	r1, r2
 800a246:	4618      	mov	r0, r3
 800a248:	f7fe fcc1 	bl	8008bce <USBD_LL_IsoINIncomplete>
}
 800a24c:	bf00      	nop
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a262:	4618      	mov	r0, r3
 800a264:	f7fe fd17 	bl	8008c96 <USBD_LL_DevConnected>
}
 800a268:	bf00      	nop
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a27e:	4618      	mov	r0, r3
 800a280:	f7fe fd14 	bl	8008cac <USBD_LL_DevDisconnected>
}
 800a284:	bf00      	nop
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d13c      	bne.n	800a316 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a29c:	4a20      	ldr	r2, [pc, #128]	@ (800a320 <USBD_LL_Init+0x94>)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4a1e      	ldr	r2, [pc, #120]	@ (800a320 <USBD_LL_Init+0x94>)
 800a2a8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a2ac:	4b1c      	ldr	r3, [pc, #112]	@ (800a320 <USBD_LL_Init+0x94>)
 800a2ae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a2b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a2b4:	4b1a      	ldr	r3, [pc, #104]	@ (800a320 <USBD_LL_Init+0x94>)
 800a2b6:	2206      	movs	r2, #6
 800a2b8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a2ba:	4b19      	ldr	r3, [pc, #100]	@ (800a320 <USBD_LL_Init+0x94>)
 800a2bc:	2202      	movs	r2, #2
 800a2be:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a2c0:	4b17      	ldr	r3, [pc, #92]	@ (800a320 <USBD_LL_Init+0x94>)
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a2c6:	4b16      	ldr	r3, [pc, #88]	@ (800a320 <USBD_LL_Init+0x94>)
 800a2c8:	2202      	movs	r2, #2
 800a2ca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a2cc:	4b14      	ldr	r3, [pc, #80]	@ (800a320 <USBD_LL_Init+0x94>)
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a2d2:	4b13      	ldr	r3, [pc, #76]	@ (800a320 <USBD_LL_Init+0x94>)
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a2d8:	4b11      	ldr	r3, [pc, #68]	@ (800a320 <USBD_LL_Init+0x94>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a2de:	4b10      	ldr	r3, [pc, #64]	@ (800a320 <USBD_LL_Init+0x94>)
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a2e4:	4b0e      	ldr	r3, [pc, #56]	@ (800a320 <USBD_LL_Init+0x94>)
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a2ea:	480d      	ldr	r0, [pc, #52]	@ (800a320 <USBD_LL_Init+0x94>)
 800a2ec:	f7f8 f865 	bl	80023ba <HAL_PCD_Init>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d001      	beq.n	800a2fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a2f6:	f7f6 ff05 	bl	8001104 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a2fa:	2180      	movs	r1, #128	@ 0x80
 800a2fc:	4808      	ldr	r0, [pc, #32]	@ (800a320 <USBD_LL_Init+0x94>)
 800a2fe:	f7f9 fab0 	bl	8003862 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a302:	2240      	movs	r2, #64	@ 0x40
 800a304:	2100      	movs	r1, #0
 800a306:	4806      	ldr	r0, [pc, #24]	@ (800a320 <USBD_LL_Init+0x94>)
 800a308:	f7f9 fa64 	bl	80037d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a30c:	2280      	movs	r2, #128	@ 0x80
 800a30e:	2101      	movs	r1, #1
 800a310:	4803      	ldr	r0, [pc, #12]	@ (800a320 <USBD_LL_Init+0x94>)
 800a312:	f7f9 fa5f 	bl	80037d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3708      	adds	r7, #8
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	20001a94 	.word	0x20001a94

0800a324 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a32c:	2300      	movs	r3, #0
 800a32e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a330:	2300      	movs	r3, #0
 800a332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7f8 f953 	bl	80025e6 <HAL_PCD_Start>
 800a340:	4603      	mov	r3, r0
 800a342:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a344:	7bfb      	ldrb	r3, [r7, #15]
 800a346:	4618      	mov	r0, r3
 800a348:	f000 f97e 	bl	800a648 <USBD_Get_USB_Status>
 800a34c:	4603      	mov	r3, r0
 800a34e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a350:	7bbb      	ldrb	r3, [r7, #14]
}
 800a352:	4618      	mov	r0, r3
 800a354:	3710      	adds	r7, #16
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b084      	sub	sp, #16
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
 800a362:	4608      	mov	r0, r1
 800a364:	4611      	mov	r1, r2
 800a366:	461a      	mov	r2, r3
 800a368:	4603      	mov	r3, r0
 800a36a:	70fb      	strb	r3, [r7, #3]
 800a36c:	460b      	mov	r3, r1
 800a36e:	70bb      	strb	r3, [r7, #2]
 800a370:	4613      	mov	r3, r2
 800a372:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a374:	2300      	movs	r3, #0
 800a376:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a378:	2300      	movs	r3, #0
 800a37a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a382:	78bb      	ldrb	r3, [r7, #2]
 800a384:	883a      	ldrh	r2, [r7, #0]
 800a386:	78f9      	ldrb	r1, [r7, #3]
 800a388:	f7f8 fe41 	bl	800300e <HAL_PCD_EP_Open>
 800a38c:	4603      	mov	r3, r0
 800a38e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a390:	7bfb      	ldrb	r3, [r7, #15]
 800a392:	4618      	mov	r0, r3
 800a394:	f000 f958 	bl	800a648 <USBD_Get_USB_Status>
 800a398:	4603      	mov	r3, r0
 800a39a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a39c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b084      	sub	sp, #16
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a3c0:	78fa      	ldrb	r2, [r7, #3]
 800a3c2:	4611      	mov	r1, r2
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7f8 fe8a 	bl	80030de <HAL_PCD_EP_Close>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3ce:	7bfb      	ldrb	r3, [r7, #15]
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f000 f939 	bl	800a648 <USBD_Get_USB_Status>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3da:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3710      	adds	r7, #16
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a3fe:	78fa      	ldrb	r2, [r7, #3]
 800a400:	4611      	mov	r1, r2
 800a402:	4618      	mov	r0, r3
 800a404:	f7f8 ff42 	bl	800328c <HAL_PCD_EP_SetStall>
 800a408:	4603      	mov	r3, r0
 800a40a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a40c:	7bfb      	ldrb	r3, [r7, #15]
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 f91a 	bl	800a648 <USBD_Get_USB_Status>
 800a414:	4603      	mov	r3, r0
 800a416:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a418:	7bbb      	ldrb	r3, [r7, #14]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b084      	sub	sp, #16
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	460b      	mov	r3, r1
 800a42c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a42e:	2300      	movs	r3, #0
 800a430:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a432:	2300      	movs	r3, #0
 800a434:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a43c:	78fa      	ldrb	r2, [r7, #3]
 800a43e:	4611      	mov	r1, r2
 800a440:	4618      	mov	r0, r3
 800a442:	f7f8 ff86 	bl	8003352 <HAL_PCD_EP_ClrStall>
 800a446:	4603      	mov	r3, r0
 800a448:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a44a:	7bfb      	ldrb	r3, [r7, #15]
 800a44c:	4618      	mov	r0, r3
 800a44e:	f000 f8fb 	bl	800a648 <USBD_Get_USB_Status>
 800a452:	4603      	mov	r3, r0
 800a454:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a456:	7bbb      	ldrb	r3, [r7, #14]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3710      	adds	r7, #16
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a460:	b480      	push	{r7}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	460b      	mov	r3, r1
 800a46a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a472:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a474:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	da0b      	bge.n	800a494 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a47c:	78fb      	ldrb	r3, [r7, #3]
 800a47e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a482:	68f9      	ldr	r1, [r7, #12]
 800a484:	4613      	mov	r3, r2
 800a486:	00db      	lsls	r3, r3, #3
 800a488:	4413      	add	r3, r2
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	440b      	add	r3, r1
 800a48e:	3316      	adds	r3, #22
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	e00b      	b.n	800a4ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a494:	78fb      	ldrb	r3, [r7, #3]
 800a496:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a49a:	68f9      	ldr	r1, [r7, #12]
 800a49c:	4613      	mov	r3, r2
 800a49e:	00db      	lsls	r3, r3, #3
 800a4a0:	4413      	add	r3, r2
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	440b      	add	r3, r1
 800a4a6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a4aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3714      	adds	r7, #20
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a4d2:	78fa      	ldrb	r2, [r7, #3]
 800a4d4:	4611      	mov	r1, r2
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7f8 fd75 	bl	8002fc6 <HAL_PCD_SetAddress>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4e0:	7bfb      	ldrb	r3, [r7, #15]
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f000 f8b0 	bl	800a648 <USBD_Get_USB_Status>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b086      	sub	sp, #24
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	60f8      	str	r0, [r7, #12]
 800a4fe:	607a      	str	r2, [r7, #4]
 800a500:	603b      	str	r3, [r7, #0]
 800a502:	460b      	mov	r3, r1
 800a504:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a506:	2300      	movs	r3, #0
 800a508:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a50a:	2300      	movs	r3, #0
 800a50c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a514:	7af9      	ldrb	r1, [r7, #11]
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	f7f8 fe7d 	bl	8003218 <HAL_PCD_EP_Transmit>
 800a51e:	4603      	mov	r3, r0
 800a520:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a522:	7dfb      	ldrb	r3, [r7, #23]
 800a524:	4618      	mov	r0, r3
 800a526:	f000 f88f 	bl	800a648 <USBD_Get_USB_Status>
 800a52a:	4603      	mov	r3, r0
 800a52c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a52e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a530:	4618      	mov	r0, r3
 800a532:	3718      	adds	r7, #24
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b086      	sub	sp, #24
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	607a      	str	r2, [r7, #4]
 800a542:	603b      	str	r3, [r7, #0]
 800a544:	460b      	mov	r3, r1
 800a546:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a548:	2300      	movs	r3, #0
 800a54a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a54c:	2300      	movs	r3, #0
 800a54e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a556:	7af9      	ldrb	r1, [r7, #11]
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	f7f8 fe09 	bl	8003172 <HAL_PCD_EP_Receive>
 800a560:	4603      	mov	r3, r0
 800a562:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a564:	7dfb      	ldrb	r3, [r7, #23]
 800a566:	4618      	mov	r0, r3
 800a568:	f000 f86e 	bl	800a648 <USBD_Get_USB_Status>
 800a56c:	4603      	mov	r3, r0
 800a56e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a570:	7dbb      	ldrb	r3, [r7, #22]
}
 800a572:	4618      	mov	r0, r3
 800a574:	3718      	adds	r7, #24
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b082      	sub	sp, #8
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
 800a582:	460b      	mov	r3, r1
 800a584:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a58c:	78fa      	ldrb	r2, [r7, #3]
 800a58e:	4611      	mov	r1, r2
 800a590:	4618      	mov	r0, r3
 800a592:	f7f8 fe29 	bl	80031e8 <HAL_PCD_EP_GetRxCount>
 800a596:	4603      	mov	r3, r0
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a5ac:	78fb      	ldrb	r3, [r7, #3]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d002      	beq.n	800a5b8 <HAL_PCDEx_LPM_Callback+0x18>
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d01f      	beq.n	800a5f6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a5b6:	e03b      	b.n	800a630 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	7adb      	ldrb	r3, [r3, #11]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d007      	beq.n	800a5d0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a5c0:	f000 f83c 	bl	800a63c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5c4:	4b1c      	ldr	r3, [pc, #112]	@ (800a638 <HAL_PCDEx_LPM_Callback+0x98>)
 800a5c6:	691b      	ldr	r3, [r3, #16]
 800a5c8:	4a1b      	ldr	r2, [pc, #108]	@ (800a638 <HAL_PCDEx_LPM_Callback+0x98>)
 800a5ca:	f023 0306 	bic.w	r3, r3, #6
 800a5ce:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	6812      	ldr	r2, [r2, #0]
 800a5de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a5e2:	f023 0301 	bic.w	r3, r3, #1
 800a5e6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7fe fab5 	bl	8008b5e <USBD_LL_Resume>
    break;
 800a5f4:	e01c      	b.n	800a630 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	6812      	ldr	r2, [r2, #0]
 800a604:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a608:	f043 0301 	orr.w	r3, r3, #1
 800a60c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a614:	4618      	mov	r0, r3
 800a616:	f7fe fa86 	bl	8008b26 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	7adb      	ldrb	r3, [r3, #11]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d005      	beq.n	800a62e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a622:	4b05      	ldr	r3, [pc, #20]	@ (800a638 <HAL_PCDEx_LPM_Callback+0x98>)
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	4a04      	ldr	r2, [pc, #16]	@ (800a638 <HAL_PCDEx_LPM_Callback+0x98>)
 800a628:	f043 0306 	orr.w	r3, r3, #6
 800a62c:	6113      	str	r3, [r2, #16]
    break;
 800a62e:	bf00      	nop
}
 800a630:	bf00      	nop
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	e000ed00 	.word	0xe000ed00

0800a63c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a640:	f7f6 f83e 	bl	80006c0 <SystemClock_Config>
}
 800a644:	bf00      	nop
 800a646:	bd80      	pop	{r7, pc}

0800a648 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	4603      	mov	r3, r0
 800a650:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a652:	2300      	movs	r3, #0
 800a654:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a656:	79fb      	ldrb	r3, [r7, #7]
 800a658:	2b03      	cmp	r3, #3
 800a65a:	d817      	bhi.n	800a68c <USBD_Get_USB_Status+0x44>
 800a65c:	a201      	add	r2, pc, #4	@ (adr r2, 800a664 <USBD_Get_USB_Status+0x1c>)
 800a65e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a662:	bf00      	nop
 800a664:	0800a675 	.word	0x0800a675
 800a668:	0800a67b 	.word	0x0800a67b
 800a66c:	0800a681 	.word	0x0800a681
 800a670:	0800a687 	.word	0x0800a687
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a674:	2300      	movs	r3, #0
 800a676:	73fb      	strb	r3, [r7, #15]
    break;
 800a678:	e00b      	b.n	800a692 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a67a:	2303      	movs	r3, #3
 800a67c:	73fb      	strb	r3, [r7, #15]
    break;
 800a67e:	e008      	b.n	800a692 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a680:	2301      	movs	r3, #1
 800a682:	73fb      	strb	r3, [r7, #15]
    break;
 800a684:	e005      	b.n	800a692 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a686:	2303      	movs	r3, #3
 800a688:	73fb      	strb	r3, [r7, #15]
    break;
 800a68a:	e002      	b.n	800a692 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a68c:	2303      	movs	r3, #3
 800a68e:	73fb      	strb	r3, [r7, #15]
    break;
 800a690:	bf00      	nop
  }
  return usb_status;
 800a692:	7bfb      	ldrb	r3, [r7, #15]
}
 800a694:	4618      	mov	r0, r3
 800a696:	3714      	adds	r7, #20
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <malloc>:
 800a6a0:	4b02      	ldr	r3, [pc, #8]	@ (800a6ac <malloc+0xc>)
 800a6a2:	4601      	mov	r1, r0
 800a6a4:	6818      	ldr	r0, [r3, #0]
 800a6a6:	f000 b82d 	b.w	800a704 <_malloc_r>
 800a6aa:	bf00      	nop
 800a6ac:	2000037c 	.word	0x2000037c

0800a6b0 <free>:
 800a6b0:	4b02      	ldr	r3, [pc, #8]	@ (800a6bc <free+0xc>)
 800a6b2:	4601      	mov	r1, r0
 800a6b4:	6818      	ldr	r0, [r3, #0]
 800a6b6:	f000 b907 	b.w	800a8c8 <_free_r>
 800a6ba:	bf00      	nop
 800a6bc:	2000037c 	.word	0x2000037c

0800a6c0 <sbrk_aligned>:
 800a6c0:	b570      	push	{r4, r5, r6, lr}
 800a6c2:	4e0f      	ldr	r6, [pc, #60]	@ (800a700 <sbrk_aligned+0x40>)
 800a6c4:	460c      	mov	r4, r1
 800a6c6:	6831      	ldr	r1, [r6, #0]
 800a6c8:	4605      	mov	r5, r0
 800a6ca:	b911      	cbnz	r1, 800a6d2 <sbrk_aligned+0x12>
 800a6cc:	f000 f8c0 	bl	800a850 <_sbrk_r>
 800a6d0:	6030      	str	r0, [r6, #0]
 800a6d2:	4621      	mov	r1, r4
 800a6d4:	4628      	mov	r0, r5
 800a6d6:	f000 f8bb 	bl	800a850 <_sbrk_r>
 800a6da:	1c43      	adds	r3, r0, #1
 800a6dc:	d103      	bne.n	800a6e6 <sbrk_aligned+0x26>
 800a6de:	f04f 34ff 	mov.w	r4, #4294967295
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	bd70      	pop	{r4, r5, r6, pc}
 800a6e6:	1cc4      	adds	r4, r0, #3
 800a6e8:	f024 0403 	bic.w	r4, r4, #3
 800a6ec:	42a0      	cmp	r0, r4
 800a6ee:	d0f8      	beq.n	800a6e2 <sbrk_aligned+0x22>
 800a6f0:	1a21      	subs	r1, r4, r0
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	f000 f8ac 	bl	800a850 <_sbrk_r>
 800a6f8:	3001      	adds	r0, #1
 800a6fa:	d1f2      	bne.n	800a6e2 <sbrk_aligned+0x22>
 800a6fc:	e7ef      	b.n	800a6de <sbrk_aligned+0x1e>
 800a6fe:	bf00      	nop
 800a700:	20001f74 	.word	0x20001f74

0800a704 <_malloc_r>:
 800a704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a708:	1ccd      	adds	r5, r1, #3
 800a70a:	f025 0503 	bic.w	r5, r5, #3
 800a70e:	3508      	adds	r5, #8
 800a710:	2d0c      	cmp	r5, #12
 800a712:	bf38      	it	cc
 800a714:	250c      	movcc	r5, #12
 800a716:	2d00      	cmp	r5, #0
 800a718:	4606      	mov	r6, r0
 800a71a:	db01      	blt.n	800a720 <_malloc_r+0x1c>
 800a71c:	42a9      	cmp	r1, r5
 800a71e:	d904      	bls.n	800a72a <_malloc_r+0x26>
 800a720:	230c      	movs	r3, #12
 800a722:	6033      	str	r3, [r6, #0]
 800a724:	2000      	movs	r0, #0
 800a726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a72a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a800 <_malloc_r+0xfc>
 800a72e:	f000 f869 	bl	800a804 <__malloc_lock>
 800a732:	f8d8 3000 	ldr.w	r3, [r8]
 800a736:	461c      	mov	r4, r3
 800a738:	bb44      	cbnz	r4, 800a78c <_malloc_r+0x88>
 800a73a:	4629      	mov	r1, r5
 800a73c:	4630      	mov	r0, r6
 800a73e:	f7ff ffbf 	bl	800a6c0 <sbrk_aligned>
 800a742:	1c43      	adds	r3, r0, #1
 800a744:	4604      	mov	r4, r0
 800a746:	d158      	bne.n	800a7fa <_malloc_r+0xf6>
 800a748:	f8d8 4000 	ldr.w	r4, [r8]
 800a74c:	4627      	mov	r7, r4
 800a74e:	2f00      	cmp	r7, #0
 800a750:	d143      	bne.n	800a7da <_malloc_r+0xd6>
 800a752:	2c00      	cmp	r4, #0
 800a754:	d04b      	beq.n	800a7ee <_malloc_r+0xea>
 800a756:	6823      	ldr	r3, [r4, #0]
 800a758:	4639      	mov	r1, r7
 800a75a:	4630      	mov	r0, r6
 800a75c:	eb04 0903 	add.w	r9, r4, r3
 800a760:	f000 f876 	bl	800a850 <_sbrk_r>
 800a764:	4581      	cmp	r9, r0
 800a766:	d142      	bne.n	800a7ee <_malloc_r+0xea>
 800a768:	6821      	ldr	r1, [r4, #0]
 800a76a:	1a6d      	subs	r5, r5, r1
 800a76c:	4629      	mov	r1, r5
 800a76e:	4630      	mov	r0, r6
 800a770:	f7ff ffa6 	bl	800a6c0 <sbrk_aligned>
 800a774:	3001      	adds	r0, #1
 800a776:	d03a      	beq.n	800a7ee <_malloc_r+0xea>
 800a778:	6823      	ldr	r3, [r4, #0]
 800a77a:	442b      	add	r3, r5
 800a77c:	6023      	str	r3, [r4, #0]
 800a77e:	f8d8 3000 	ldr.w	r3, [r8]
 800a782:	685a      	ldr	r2, [r3, #4]
 800a784:	bb62      	cbnz	r2, 800a7e0 <_malloc_r+0xdc>
 800a786:	f8c8 7000 	str.w	r7, [r8]
 800a78a:	e00f      	b.n	800a7ac <_malloc_r+0xa8>
 800a78c:	6822      	ldr	r2, [r4, #0]
 800a78e:	1b52      	subs	r2, r2, r5
 800a790:	d420      	bmi.n	800a7d4 <_malloc_r+0xd0>
 800a792:	2a0b      	cmp	r2, #11
 800a794:	d917      	bls.n	800a7c6 <_malloc_r+0xc2>
 800a796:	1961      	adds	r1, r4, r5
 800a798:	42a3      	cmp	r3, r4
 800a79a:	6025      	str	r5, [r4, #0]
 800a79c:	bf18      	it	ne
 800a79e:	6059      	strne	r1, [r3, #4]
 800a7a0:	6863      	ldr	r3, [r4, #4]
 800a7a2:	bf08      	it	eq
 800a7a4:	f8c8 1000 	streq.w	r1, [r8]
 800a7a8:	5162      	str	r2, [r4, r5]
 800a7aa:	604b      	str	r3, [r1, #4]
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	f000 f82f 	bl	800a810 <__malloc_unlock>
 800a7b2:	f104 000b 	add.w	r0, r4, #11
 800a7b6:	1d23      	adds	r3, r4, #4
 800a7b8:	f020 0007 	bic.w	r0, r0, #7
 800a7bc:	1ac2      	subs	r2, r0, r3
 800a7be:	bf1c      	itt	ne
 800a7c0:	1a1b      	subne	r3, r3, r0
 800a7c2:	50a3      	strne	r3, [r4, r2]
 800a7c4:	e7af      	b.n	800a726 <_malloc_r+0x22>
 800a7c6:	6862      	ldr	r2, [r4, #4]
 800a7c8:	42a3      	cmp	r3, r4
 800a7ca:	bf0c      	ite	eq
 800a7cc:	f8c8 2000 	streq.w	r2, [r8]
 800a7d0:	605a      	strne	r2, [r3, #4]
 800a7d2:	e7eb      	b.n	800a7ac <_malloc_r+0xa8>
 800a7d4:	4623      	mov	r3, r4
 800a7d6:	6864      	ldr	r4, [r4, #4]
 800a7d8:	e7ae      	b.n	800a738 <_malloc_r+0x34>
 800a7da:	463c      	mov	r4, r7
 800a7dc:	687f      	ldr	r7, [r7, #4]
 800a7de:	e7b6      	b.n	800a74e <_malloc_r+0x4a>
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	42a3      	cmp	r3, r4
 800a7e6:	d1fb      	bne.n	800a7e0 <_malloc_r+0xdc>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	6053      	str	r3, [r2, #4]
 800a7ec:	e7de      	b.n	800a7ac <_malloc_r+0xa8>
 800a7ee:	230c      	movs	r3, #12
 800a7f0:	6033      	str	r3, [r6, #0]
 800a7f2:	4630      	mov	r0, r6
 800a7f4:	f000 f80c 	bl	800a810 <__malloc_unlock>
 800a7f8:	e794      	b.n	800a724 <_malloc_r+0x20>
 800a7fa:	6005      	str	r5, [r0, #0]
 800a7fc:	e7d6      	b.n	800a7ac <_malloc_r+0xa8>
 800a7fe:	bf00      	nop
 800a800:	20001f78 	.word	0x20001f78

0800a804 <__malloc_lock>:
 800a804:	4801      	ldr	r0, [pc, #4]	@ (800a80c <__malloc_lock+0x8>)
 800a806:	f000 b85d 	b.w	800a8c4 <__retarget_lock_acquire_recursive>
 800a80a:	bf00      	nop
 800a80c:	200020b8 	.word	0x200020b8

0800a810 <__malloc_unlock>:
 800a810:	4801      	ldr	r0, [pc, #4]	@ (800a818 <__malloc_unlock+0x8>)
 800a812:	f000 b858 	b.w	800a8c6 <__retarget_lock_release_recursive>
 800a816:	bf00      	nop
 800a818:	200020b8 	.word	0x200020b8

0800a81c <memset>:
 800a81c:	4402      	add	r2, r0
 800a81e:	4603      	mov	r3, r0
 800a820:	4293      	cmp	r3, r2
 800a822:	d100      	bne.n	800a826 <memset+0xa>
 800a824:	4770      	bx	lr
 800a826:	f803 1b01 	strb.w	r1, [r3], #1
 800a82a:	e7f9      	b.n	800a820 <memset+0x4>

0800a82c <strncmp>:
 800a82c:	b510      	push	{r4, lr}
 800a82e:	b16a      	cbz	r2, 800a84c <strncmp+0x20>
 800a830:	3901      	subs	r1, #1
 800a832:	1884      	adds	r4, r0, r2
 800a834:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a838:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d103      	bne.n	800a848 <strncmp+0x1c>
 800a840:	42a0      	cmp	r0, r4
 800a842:	d001      	beq.n	800a848 <strncmp+0x1c>
 800a844:	2a00      	cmp	r2, #0
 800a846:	d1f5      	bne.n	800a834 <strncmp+0x8>
 800a848:	1ad0      	subs	r0, r2, r3
 800a84a:	bd10      	pop	{r4, pc}
 800a84c:	4610      	mov	r0, r2
 800a84e:	e7fc      	b.n	800a84a <strncmp+0x1e>

0800a850 <_sbrk_r>:
 800a850:	b538      	push	{r3, r4, r5, lr}
 800a852:	4d06      	ldr	r5, [pc, #24]	@ (800a86c <_sbrk_r+0x1c>)
 800a854:	2300      	movs	r3, #0
 800a856:	4604      	mov	r4, r0
 800a858:	4608      	mov	r0, r1
 800a85a:	602b      	str	r3, [r5, #0]
 800a85c:	f7f6 fd34 	bl	80012c8 <_sbrk>
 800a860:	1c43      	adds	r3, r0, #1
 800a862:	d102      	bne.n	800a86a <_sbrk_r+0x1a>
 800a864:	682b      	ldr	r3, [r5, #0]
 800a866:	b103      	cbz	r3, 800a86a <_sbrk_r+0x1a>
 800a868:	6023      	str	r3, [r4, #0]
 800a86a:	bd38      	pop	{r3, r4, r5, pc}
 800a86c:	200020b4 	.word	0x200020b4

0800a870 <__errno>:
 800a870:	4b01      	ldr	r3, [pc, #4]	@ (800a878 <__errno+0x8>)
 800a872:	6818      	ldr	r0, [r3, #0]
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	2000037c 	.word	0x2000037c

0800a87c <__libc_init_array>:
 800a87c:	b570      	push	{r4, r5, r6, lr}
 800a87e:	4d0d      	ldr	r5, [pc, #52]	@ (800a8b4 <__libc_init_array+0x38>)
 800a880:	4c0d      	ldr	r4, [pc, #52]	@ (800a8b8 <__libc_init_array+0x3c>)
 800a882:	1b64      	subs	r4, r4, r5
 800a884:	10a4      	asrs	r4, r4, #2
 800a886:	2600      	movs	r6, #0
 800a888:	42a6      	cmp	r6, r4
 800a88a:	d109      	bne.n	800a8a0 <__libc_init_array+0x24>
 800a88c:	4d0b      	ldr	r5, [pc, #44]	@ (800a8bc <__libc_init_array+0x40>)
 800a88e:	4c0c      	ldr	r4, [pc, #48]	@ (800a8c0 <__libc_init_array+0x44>)
 800a890:	f000 f864 	bl	800a95c <_init>
 800a894:	1b64      	subs	r4, r4, r5
 800a896:	10a4      	asrs	r4, r4, #2
 800a898:	2600      	movs	r6, #0
 800a89a:	42a6      	cmp	r6, r4
 800a89c:	d105      	bne.n	800a8aa <__libc_init_array+0x2e>
 800a89e:	bd70      	pop	{r4, r5, r6, pc}
 800a8a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8a4:	4798      	blx	r3
 800a8a6:	3601      	adds	r6, #1
 800a8a8:	e7ee      	b.n	800a888 <__libc_init_array+0xc>
 800a8aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ae:	4798      	blx	r3
 800a8b0:	3601      	adds	r6, #1
 800a8b2:	e7f2      	b.n	800a89a <__libc_init_array+0x1e>
 800a8b4:	0800aaa4 	.word	0x0800aaa4
 800a8b8:	0800aaa4 	.word	0x0800aaa4
 800a8bc:	0800aaa4 	.word	0x0800aaa4
 800a8c0:	0800aaa8 	.word	0x0800aaa8

0800a8c4 <__retarget_lock_acquire_recursive>:
 800a8c4:	4770      	bx	lr

0800a8c6 <__retarget_lock_release_recursive>:
 800a8c6:	4770      	bx	lr

0800a8c8 <_free_r>:
 800a8c8:	b538      	push	{r3, r4, r5, lr}
 800a8ca:	4605      	mov	r5, r0
 800a8cc:	2900      	cmp	r1, #0
 800a8ce:	d041      	beq.n	800a954 <_free_r+0x8c>
 800a8d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8d4:	1f0c      	subs	r4, r1, #4
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	bfb8      	it	lt
 800a8da:	18e4      	addlt	r4, r4, r3
 800a8dc:	f7ff ff92 	bl	800a804 <__malloc_lock>
 800a8e0:	4a1d      	ldr	r2, [pc, #116]	@ (800a958 <_free_r+0x90>)
 800a8e2:	6813      	ldr	r3, [r2, #0]
 800a8e4:	b933      	cbnz	r3, 800a8f4 <_free_r+0x2c>
 800a8e6:	6063      	str	r3, [r4, #4]
 800a8e8:	6014      	str	r4, [r2, #0]
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8f0:	f7ff bf8e 	b.w	800a810 <__malloc_unlock>
 800a8f4:	42a3      	cmp	r3, r4
 800a8f6:	d908      	bls.n	800a90a <_free_r+0x42>
 800a8f8:	6820      	ldr	r0, [r4, #0]
 800a8fa:	1821      	adds	r1, r4, r0
 800a8fc:	428b      	cmp	r3, r1
 800a8fe:	bf01      	itttt	eq
 800a900:	6819      	ldreq	r1, [r3, #0]
 800a902:	685b      	ldreq	r3, [r3, #4]
 800a904:	1809      	addeq	r1, r1, r0
 800a906:	6021      	streq	r1, [r4, #0]
 800a908:	e7ed      	b.n	800a8e6 <_free_r+0x1e>
 800a90a:	461a      	mov	r2, r3
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	b10b      	cbz	r3, 800a914 <_free_r+0x4c>
 800a910:	42a3      	cmp	r3, r4
 800a912:	d9fa      	bls.n	800a90a <_free_r+0x42>
 800a914:	6811      	ldr	r1, [r2, #0]
 800a916:	1850      	adds	r0, r2, r1
 800a918:	42a0      	cmp	r0, r4
 800a91a:	d10b      	bne.n	800a934 <_free_r+0x6c>
 800a91c:	6820      	ldr	r0, [r4, #0]
 800a91e:	4401      	add	r1, r0
 800a920:	1850      	adds	r0, r2, r1
 800a922:	4283      	cmp	r3, r0
 800a924:	6011      	str	r1, [r2, #0]
 800a926:	d1e0      	bne.n	800a8ea <_free_r+0x22>
 800a928:	6818      	ldr	r0, [r3, #0]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	6053      	str	r3, [r2, #4]
 800a92e:	4408      	add	r0, r1
 800a930:	6010      	str	r0, [r2, #0]
 800a932:	e7da      	b.n	800a8ea <_free_r+0x22>
 800a934:	d902      	bls.n	800a93c <_free_r+0x74>
 800a936:	230c      	movs	r3, #12
 800a938:	602b      	str	r3, [r5, #0]
 800a93a:	e7d6      	b.n	800a8ea <_free_r+0x22>
 800a93c:	6820      	ldr	r0, [r4, #0]
 800a93e:	1821      	adds	r1, r4, r0
 800a940:	428b      	cmp	r3, r1
 800a942:	bf04      	itt	eq
 800a944:	6819      	ldreq	r1, [r3, #0]
 800a946:	685b      	ldreq	r3, [r3, #4]
 800a948:	6063      	str	r3, [r4, #4]
 800a94a:	bf04      	itt	eq
 800a94c:	1809      	addeq	r1, r1, r0
 800a94e:	6021      	streq	r1, [r4, #0]
 800a950:	6054      	str	r4, [r2, #4]
 800a952:	e7ca      	b.n	800a8ea <_free_r+0x22>
 800a954:	bd38      	pop	{r3, r4, r5, pc}
 800a956:	bf00      	nop
 800a958:	20001f78 	.word	0x20001f78

0800a95c <_init>:
 800a95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a95e:	bf00      	nop
 800a960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a962:	bc08      	pop	{r3}
 800a964:	469e      	mov	lr, r3
 800a966:	4770      	bx	lr

0800a968 <_fini>:
 800a968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a96a:	bf00      	nop
 800a96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a96e:	bc08      	pop	{r3}
 800a970:	469e      	mov	lr, r3
 800a972:	4770      	bx	lr
