
STM32_Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b5c  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08003d24  08003d24  00004d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e64  08003e64  0000512c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003e64  08003e64  00004e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e6c  08003e6c  0000512c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e6c  08003e6c  00004e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e70  08003e70  00004e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000012c  20000000  08003e74  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000012c  08003fa0  0000512c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08003fa0  000052e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000512c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e545  00000000  00000000  0000515c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eaa  00000000  00000000  000136a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00015550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ef  00000000  00000000  00016200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026731  00000000  00000000  00016bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104aa  00000000  00000000  0003d320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2179  00000000  00000000  0004d7ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f943  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f8  00000000  00000000  0013f988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00142e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000012c 	.word	0x2000012c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003d0c 	.word	0x08003d0c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000130 	.word	0x20000130
 8000204:	08003d0c 	.word	0x08003d0c

08000208 <strcmp>:
 8000208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000210:	2a01      	cmp	r2, #1
 8000212:	bf28      	it	cs
 8000214:	429a      	cmpcs	r2, r3
 8000216:	d0f7      	beq.n	8000208 <strcmp>
 8000218:	1ad0      	subs	r0, r2, r3
 800021a:	4770      	bx	lr

0800021c <strlen>:
 800021c:	4603      	mov	r3, r0
 800021e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000222:	2a00      	cmp	r2, #0
 8000224:	d1fb      	bne.n	800021e <strlen+0x2>
 8000226:	1a18      	subs	r0, r3, r0
 8000228:	3801      	subs	r0, #1
 800022a:	4770      	bx	lr

0800022c <__aeabi_uldivmod>:
 800022c:	b953      	cbnz	r3, 8000244 <__aeabi_uldivmod+0x18>
 800022e:	b94a      	cbnz	r2, 8000244 <__aeabi_uldivmod+0x18>
 8000230:	2900      	cmp	r1, #0
 8000232:	bf08      	it	eq
 8000234:	2800      	cmpeq	r0, #0
 8000236:	bf1c      	itt	ne
 8000238:	f04f 31ff 	movne.w	r1, #4294967295
 800023c:	f04f 30ff 	movne.w	r0, #4294967295
 8000240:	f000 b988 	b.w	8000554 <__aeabi_idiv0>
 8000244:	f1ad 0c08 	sub.w	ip, sp, #8
 8000248:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000258:	b004      	add	sp, #16
 800025a:	4770      	bx	lr

0800025c <__udivmoddi4>:
 800025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000260:	9d08      	ldr	r5, [sp, #32]
 8000262:	468e      	mov	lr, r1
 8000264:	4604      	mov	r4, r0
 8000266:	4688      	mov	r8, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14a      	bne.n	8000302 <__udivmoddi4+0xa6>
 800026c:	428a      	cmp	r2, r1
 800026e:	4617      	mov	r7, r2
 8000270:	d962      	bls.n	8000338 <__udivmoddi4+0xdc>
 8000272:	fab2 f682 	clz	r6, r2
 8000276:	b14e      	cbz	r6, 800028c <__udivmoddi4+0x30>
 8000278:	f1c6 0320 	rsb	r3, r6, #32
 800027c:	fa01 f806 	lsl.w	r8, r1, r6
 8000280:	fa20 f303 	lsr.w	r3, r0, r3
 8000284:	40b7      	lsls	r7, r6
 8000286:	ea43 0808 	orr.w	r8, r3, r8
 800028a:	40b4      	lsls	r4, r6
 800028c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000290:	fa1f fc87 	uxth.w	ip, r7
 8000294:	fbb8 f1fe 	udiv	r1, r8, lr
 8000298:	0c23      	lsrs	r3, r4, #16
 800029a:	fb0e 8811 	mls	r8, lr, r1, r8
 800029e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a2:	fb01 f20c 	mul.w	r2, r1, ip
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0x62>
 80002aa:	18fb      	adds	r3, r7, r3
 80002ac:	f101 30ff 	add.w	r0, r1, #4294967295
 80002b0:	f080 80ea 	bcs.w	8000488 <__udivmoddi4+0x22c>
 80002b4:	429a      	cmp	r2, r3
 80002b6:	f240 80e7 	bls.w	8000488 <__udivmoddi4+0x22c>
 80002ba:	3902      	subs	r1, #2
 80002bc:	443b      	add	r3, r7
 80002be:	1a9a      	subs	r2, r3, r2
 80002c0:	b2a3      	uxth	r3, r4
 80002c2:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c6:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ce:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d2:	459c      	cmp	ip, r3
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0x8e>
 80002d6:	18fb      	adds	r3, r7, r3
 80002d8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002dc:	f080 80d6 	bcs.w	800048c <__udivmoddi4+0x230>
 80002e0:	459c      	cmp	ip, r3
 80002e2:	f240 80d3 	bls.w	800048c <__udivmoddi4+0x230>
 80002e6:	443b      	add	r3, r7
 80002e8:	3802      	subs	r0, #2
 80002ea:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ee:	eba3 030c 	sub.w	r3, r3, ip
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0xa2>
 80002f6:	40f3      	lsrs	r3, r6
 80002f8:	2200      	movs	r2, #0
 80002fa:	e9c5 3200 	strd	r3, r2, [r5]
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d905      	bls.n	8000312 <__udivmoddi4+0xb6>
 8000306:	b10d      	cbz	r5, 800030c <__udivmoddi4+0xb0>
 8000308:	e9c5 0100 	strd	r0, r1, [r5]
 800030c:	2100      	movs	r1, #0
 800030e:	4608      	mov	r0, r1
 8000310:	e7f5      	b.n	80002fe <__udivmoddi4+0xa2>
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d146      	bne.n	80003a8 <__udivmoddi4+0x14c>
 800031a:	4573      	cmp	r3, lr
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xc8>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 8105 	bhi.w	800052e <__udivmoddi4+0x2d2>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb6e 0203 	sbc.w	r2, lr, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4690      	mov	r8, r2
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e5      	beq.n	80002fe <__udivmoddi4+0xa2>
 8000332:	e9c5 4800 	strd	r4, r8, [r5]
 8000336:	e7e2      	b.n	80002fe <__udivmoddi4+0xa2>
 8000338:	2a00      	cmp	r2, #0
 800033a:	f000 8090 	beq.w	800045e <__udivmoddi4+0x202>
 800033e:	fab2 f682 	clz	r6, r2
 8000342:	2e00      	cmp	r6, #0
 8000344:	f040 80a4 	bne.w	8000490 <__udivmoddi4+0x234>
 8000348:	1a8a      	subs	r2, r1, r2
 800034a:	0c03      	lsrs	r3, r0, #16
 800034c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000350:	b280      	uxth	r0, r0
 8000352:	b2bc      	uxth	r4, r7
 8000354:	2101      	movs	r1, #1
 8000356:	fbb2 fcfe 	udiv	ip, r2, lr
 800035a:	fb0e 221c 	mls	r2, lr, ip, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb04 f20c 	mul.w	r2, r4, ip
 8000366:	429a      	cmp	r2, r3
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x11e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x11c>
 8000372:	429a      	cmp	r2, r3
 8000374:	f200 80e0 	bhi.w	8000538 <__udivmoddi4+0x2dc>
 8000378:	46c4      	mov	ip, r8
 800037a:	1a9b      	subs	r3, r3, r2
 800037c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000380:	fb0e 3312 	mls	r3, lr, r2, r3
 8000384:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000388:	fb02 f404 	mul.w	r4, r2, r4
 800038c:	429c      	cmp	r4, r3
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x144>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f102 30ff 	add.w	r0, r2, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x142>
 8000398:	429c      	cmp	r4, r3
 800039a:	f200 80ca 	bhi.w	8000532 <__udivmoddi4+0x2d6>
 800039e:	4602      	mov	r2, r0
 80003a0:	1b1b      	subs	r3, r3, r4
 80003a2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003a6:	e7a5      	b.n	80002f4 <__udivmoddi4+0x98>
 80003a8:	f1c1 0620 	rsb	r6, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 f706 	lsr.w	r7, r2, r6
 80003b2:	431f      	orrs	r7, r3
 80003b4:	fa0e f401 	lsl.w	r4, lr, r1
 80003b8:	fa20 f306 	lsr.w	r3, r0, r6
 80003bc:	fa2e fe06 	lsr.w	lr, lr, r6
 80003c0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fa00 f801 	lsl.w	r8, r0, r1
 80003ca:	fa1f fc87 	uxth.w	ip, r7
 80003ce:	fbbe f0f9 	udiv	r0, lr, r9
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb09 ee10 	mls	lr, r9, r0, lr
 80003d8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003dc:	fb00 fe0c 	mul.w	lr, r0, ip
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x1a0>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ee:	f080 809c 	bcs.w	800052a <__udivmoddi4+0x2ce>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f240 8099 	bls.w	800052a <__udivmoddi4+0x2ce>
 80003f8:	3802      	subs	r0, #2
 80003fa:	443c      	add	r4, r7
 80003fc:	eba4 040e 	sub.w	r4, r4, lr
 8000400:	fa1f fe83 	uxth.w	lr, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000410:	fb03 fc0c 	mul.w	ip, r3, ip
 8000414:	45a4      	cmp	ip, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1ce>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f103 3eff 	add.w	lr, r3, #4294967295
 800041e:	f080 8082 	bcs.w	8000526 <__udivmoddi4+0x2ca>
 8000422:	45a4      	cmp	ip, r4
 8000424:	d97f      	bls.n	8000526 <__udivmoddi4+0x2ca>
 8000426:	3b02      	subs	r3, #2
 8000428:	443c      	add	r4, r7
 800042a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800042e:	eba4 040c 	sub.w	r4, r4, ip
 8000432:	fba0 ec02 	umull	lr, ip, r0, r2
 8000436:	4564      	cmp	r4, ip
 8000438:	4673      	mov	r3, lr
 800043a:	46e1      	mov	r9, ip
 800043c:	d362      	bcc.n	8000504 <__udivmoddi4+0x2a8>
 800043e:	d05f      	beq.n	8000500 <__udivmoddi4+0x2a4>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x1fe>
 8000442:	ebb8 0203 	subs.w	r2, r8, r3
 8000446:	eb64 0409 	sbc.w	r4, r4, r9
 800044a:	fa04 f606 	lsl.w	r6, r4, r6
 800044e:	fa22 f301 	lsr.w	r3, r2, r1
 8000452:	431e      	orrs	r6, r3
 8000454:	40cc      	lsrs	r4, r1
 8000456:	e9c5 6400 	strd	r6, r4, [r5]
 800045a:	2100      	movs	r1, #0
 800045c:	e74f      	b.n	80002fe <__udivmoddi4+0xa2>
 800045e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000462:	0c01      	lsrs	r1, r0, #16
 8000464:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000468:	b280      	uxth	r0, r0
 800046a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800046e:	463b      	mov	r3, r7
 8000470:	4638      	mov	r0, r7
 8000472:	463c      	mov	r4, r7
 8000474:	46b8      	mov	r8, r7
 8000476:	46be      	mov	lr, r7
 8000478:	2620      	movs	r6, #32
 800047a:	fbb1 f1f7 	udiv	r1, r1, r7
 800047e:	eba2 0208 	sub.w	r2, r2, r8
 8000482:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000486:	e766      	b.n	8000356 <__udivmoddi4+0xfa>
 8000488:	4601      	mov	r1, r0
 800048a:	e718      	b.n	80002be <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e72c      	b.n	80002ea <__udivmoddi4+0x8e>
 8000490:	f1c6 0220 	rsb	r2, r6, #32
 8000494:	fa2e f302 	lsr.w	r3, lr, r2
 8000498:	40b7      	lsls	r7, r6
 800049a:	40b1      	lsls	r1, r6
 800049c:	fa20 f202 	lsr.w	r2, r0, r2
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	430a      	orrs	r2, r1
 80004a6:	fbb3 f8fe 	udiv	r8, r3, lr
 80004aa:	b2bc      	uxth	r4, r7
 80004ac:	fb0e 3318 	mls	r3, lr, r8, r3
 80004b0:	0c11      	lsrs	r1, r2, #16
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb08 f904 	mul.w	r9, r8, r4
 80004ba:	40b0      	lsls	r0, r6
 80004bc:	4589      	cmp	r9, r1
 80004be:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004c2:	b280      	uxth	r0, r0
 80004c4:	d93e      	bls.n	8000544 <__udivmoddi4+0x2e8>
 80004c6:	1879      	adds	r1, r7, r1
 80004c8:	f108 3cff 	add.w	ip, r8, #4294967295
 80004cc:	d201      	bcs.n	80004d2 <__udivmoddi4+0x276>
 80004ce:	4589      	cmp	r9, r1
 80004d0:	d81f      	bhi.n	8000512 <__udivmoddi4+0x2b6>
 80004d2:	eba1 0109 	sub.w	r1, r1, r9
 80004d6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004da:	fb09 f804 	mul.w	r8, r9, r4
 80004de:	fb0e 1119 	mls	r1, lr, r9, r1
 80004e2:	b292      	uxth	r2, r2
 80004e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d229      	bcs.n	8000540 <__udivmoddi4+0x2e4>
 80004ec:	18ba      	adds	r2, r7, r2
 80004ee:	f109 31ff 	add.w	r1, r9, #4294967295
 80004f2:	d2c4      	bcs.n	800047e <__udivmoddi4+0x222>
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d2c2      	bcs.n	800047e <__udivmoddi4+0x222>
 80004f8:	f1a9 0102 	sub.w	r1, r9, #2
 80004fc:	443a      	add	r2, r7
 80004fe:	e7be      	b.n	800047e <__udivmoddi4+0x222>
 8000500:	45f0      	cmp	r8, lr
 8000502:	d29d      	bcs.n	8000440 <__udivmoddi4+0x1e4>
 8000504:	ebbe 0302 	subs.w	r3, lr, r2
 8000508:	eb6c 0c07 	sbc.w	ip, ip, r7
 800050c:	3801      	subs	r0, #1
 800050e:	46e1      	mov	r9, ip
 8000510:	e796      	b.n	8000440 <__udivmoddi4+0x1e4>
 8000512:	eba7 0909 	sub.w	r9, r7, r9
 8000516:	4449      	add	r1, r9
 8000518:	f1a8 0c02 	sub.w	ip, r8, #2
 800051c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000520:	fb09 f804 	mul.w	r8, r9, r4
 8000524:	e7db      	b.n	80004de <__udivmoddi4+0x282>
 8000526:	4673      	mov	r3, lr
 8000528:	e77f      	b.n	800042a <__udivmoddi4+0x1ce>
 800052a:	4650      	mov	r0, sl
 800052c:	e766      	b.n	80003fc <__udivmoddi4+0x1a0>
 800052e:	4608      	mov	r0, r1
 8000530:	e6fd      	b.n	800032e <__udivmoddi4+0xd2>
 8000532:	443b      	add	r3, r7
 8000534:	3a02      	subs	r2, #2
 8000536:	e733      	b.n	80003a0 <__udivmoddi4+0x144>
 8000538:	f1ac 0c02 	sub.w	ip, ip, #2
 800053c:	443b      	add	r3, r7
 800053e:	e71c      	b.n	800037a <__udivmoddi4+0x11e>
 8000540:	4649      	mov	r1, r9
 8000542:	e79c      	b.n	800047e <__udivmoddi4+0x222>
 8000544:	eba1 0109 	sub.w	r1, r1, r9
 8000548:	46c4      	mov	ip, r8
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	e7c4      	b.n	80004de <__udivmoddi4+0x282>

08000554 <__aeabi_idiv0>:
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop

08000558 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	f107 030c 	add.w	r3, r7, #12
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <MX_GPIO_Init+0x78>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	4a17      	ldr	r2, [pc, #92]	@ (80005d0 <MX_GPIO_Init+0x78>)
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	6313      	str	r3, [r2, #48]	@ 0x30
 800057a:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <MX_GPIO_Init+0x78>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000586:	4b12      	ldr	r3, [pc, #72]	@ (80005d0 <MX_GPIO_Init+0x78>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a11      	ldr	r2, [pc, #68]	@ (80005d0 <MX_GPIO_Init+0x78>)
 800058c:	f043 0308 	orr.w	r3, r3, #8
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
 8000592:	4b0f      	ldr	r3, [pc, #60]	@ (80005d0 <MX_GPIO_Init+0x78>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0308 	and.w	r3, r3, #8
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led1_Pin|led3_Pin|led2_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80005a4:	480b      	ldr	r0, [pc, #44]	@ (80005d4 <MX_GPIO_Init+0x7c>)
 80005a6:	f001 f9ff 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led1_Pin led3_Pin led2_Pin */
  GPIO_InitStruct.Pin = led1_Pin|led3_Pin|led2_Pin;
 80005aa:	f244 0381 	movw	r3, #16513	@ 0x4081
 80005ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	4619      	mov	r1, r3
 80005c2:	4804      	ldr	r0, [pc, #16]	@ (80005d4 <MX_GPIO_Init+0x7c>)
 80005c4:	f001 f844 	bl	8001650 <HAL_GPIO_Init>

}
 80005c8:	bf00      	nop
 80005ca:	3720      	adds	r7, #32
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40020400 	.word	0x40020400

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005de:	f000 fbf3 	bl	8000dc8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fe7a 	bl	80012da <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f8ed 	bl	80007c4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f7ff ffb5 	bl	8000558 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ee:	f000 fdbb 	bl	8001168 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80005f2:	f000 fc81 	bl	8000ef8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005f6:	f000 fcd3 	bl	8000fa0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005fa:	f000 fd1f 	bl	800103c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  linear_buf_reset(&linear_buf);
 80005fe:	4866      	ldr	r0, [pc, #408]	@ (8000798 <main+0x1c0>)
 8000600:	f000 f93c 	bl	800087c <linear_buf_reset>
  HAL_UART_Transmit(&huart3, msg, strlen((char*)msg), HAL_MAX_DELAY);
 8000604:	4865      	ldr	r0, [pc, #404]	@ (800079c <main+0x1c4>)
 8000606:	f7ff fe09 	bl	800021c <strlen>
 800060a:	4603      	mov	r3, r0
 800060c:	b29a      	uxth	r2, r3
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	4962      	ldr	r1, [pc, #392]	@ (800079c <main+0x1c4>)
 8000614:	4862      	ldr	r0, [pc, #392]	@ (80007a0 <main+0x1c8>)
 8000616:	f002 fdb9 	bl	800318c <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t rx_char;
  while (1)
  {
    if (HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY) {
 800061a:	4861      	ldr	r0, [pc, #388]	@ (80007a0 <main+0x1c8>)
 800061c:	f002 ff07 	bl	800342e <HAL_UART_GetState>
 8000620:	4603      	mov	r3, r0
 8000622:	2b20      	cmp	r3, #32
 8000624:	d166      	bne.n	80006f4 <main+0x11c>
      if (HAL_UART_Receive(&huart3, &rx_char, 1, 0) == HAL_OK) {
 8000626:	1df9      	adds	r1, r7, #7
 8000628:	2300      	movs	r3, #0
 800062a:	2201      	movs	r2, #1
 800062c:	485c      	ldr	r0, [pc, #368]	@ (80007a0 <main+0x1c8>)
 800062e:	f002 fe36 	bl	800329e <HAL_UART_Receive>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d15d      	bne.n	80006f4 <main+0x11c>
        if (chenillard_running && chenillard_int_mode && (rx_char == 'n' || rx_char == 'N')) {
 8000638:	4b5a      	ldr	r3, [pc, #360]	@ (80007a4 <main+0x1cc>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2b00      	cmp	r3, #0
 8000640:	d023      	beq.n	800068a <main+0xb2>
 8000642:	4b59      	ldr	r3, [pc, #356]	@ (80007a8 <main+0x1d0>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	2b00      	cmp	r3, #0
 800064a:	d01e      	beq.n	800068a <main+0xb2>
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	2b6e      	cmp	r3, #110	@ 0x6e
 8000650:	d002      	beq.n	8000658 <main+0x80>
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b4e      	cmp	r3, #78	@ 0x4e
 8000656:	d118      	bne.n	800068a <main+0xb2>
          // Exécuter un pas du chenillard en mode interruption manuelle
          if (current_chenillard == 1) {
 8000658:	4b54      	ldr	r3, [pc, #336]	@ (80007ac <main+0x1d4>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2b01      	cmp	r3, #1
 8000660:	d102      	bne.n	8000668 <main+0x90>
            chenillard1_next_step();
 8000662:	f000 f95f 	bl	8000924 <chenillard1_next_step>
          } else if (current_chenillard == 2) {
            chenillard2_next_step();
          } else if (current_chenillard == 3) {
            chenillard3_next_step();
          }
          continue; // Retour au début de la boucle pour attendre le prochain caractère
 8000666:	e094      	b.n	8000792 <main+0x1ba>
          } else if (current_chenillard == 2) {
 8000668:	4b50      	ldr	r3, [pc, #320]	@ (80007ac <main+0x1d4>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b02      	cmp	r3, #2
 8000670:	d102      	bne.n	8000678 <main+0xa0>
            chenillard2_next_step();
 8000672:	f000 f9b1 	bl	80009d8 <chenillard2_next_step>
          continue; // Retour au début de la boucle pour attendre le prochain caractère
 8000676:	e08c      	b.n	8000792 <main+0x1ba>
          } else if (current_chenillard == 3) {
 8000678:	4b4c      	ldr	r3, [pc, #304]	@ (80007ac <main+0x1d4>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b03      	cmp	r3, #3
 8000680:	f040 8087 	bne.w	8000792 <main+0x1ba>
            chenillard3_next_step();
 8000684:	f000 f9d0 	bl	8000a28 <chenillard3_next_step>
          continue; // Retour au début de la boucle pour attendre le prochain caractère
 8000688:	e083      	b.n	8000792 <main+0x1ba>
        } else if (rx_char == '\r' || rx_char == '\n') {
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2b0d      	cmp	r3, #13
 800068e:	d002      	beq.n	8000696 <main+0xbe>
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	2b0a      	cmp	r3, #10
 8000694:	d111      	bne.n	80006ba <main+0xe2>
          process_command((char*)linear_buf.buffer);
 8000696:	4846      	ldr	r0, [pc, #280]	@ (80007b0 <main+0x1d8>)
 8000698:	f000 f9da 	bl	8000a50 <process_command>
          linear_buf_reset(&linear_buf);
 800069c:	483e      	ldr	r0, [pc, #248]	@ (8000798 <main+0x1c0>)
 800069e:	f000 f8ed 	bl	800087c <linear_buf_reset>
          HAL_UART_Transmit(&huart3, msg, strlen((char*)msg), HAL_MAX_DELAY); // Réafficher l'invite
 80006a2:	483e      	ldr	r0, [pc, #248]	@ (800079c <main+0x1c4>)
 80006a4:	f7ff fdba 	bl	800021c <strlen>
 80006a8:	4603      	mov	r3, r0
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	f04f 33ff 	mov.w	r3, #4294967295
 80006b0:	493a      	ldr	r1, [pc, #232]	@ (800079c <main+0x1c4>)
 80006b2:	483b      	ldr	r0, [pc, #236]	@ (80007a0 <main+0x1c8>)
 80006b4:	f002 fd6a 	bl	800318c <HAL_UART_Transmit>
 80006b8:	e01c      	b.n	80006f4 <main+0x11c>
        } else {
          if (linear_buf_insert_char(&linear_buf, rx_char) != 0) {
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	4619      	mov	r1, r3
 80006be:	4836      	ldr	r0, [pc, #216]	@ (8000798 <main+0x1c0>)
 80006c0:	f000 f8ee 	bl	80008a0 <linear_buf_insert_char>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d014      	beq.n	80006f4 <main+0x11c>
            HAL_UART_Transmit(&huart3, (uint8_t*)"Buffer overflow!\r\n", strlen("Buffer overflow!\r\n"), HAL_MAX_DELAY);
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
 80006ce:	2212      	movs	r2, #18
 80006d0:	4938      	ldr	r1, [pc, #224]	@ (80007b4 <main+0x1dc>)
 80006d2:	4833      	ldr	r0, [pc, #204]	@ (80007a0 <main+0x1c8>)
 80006d4:	f002 fd5a 	bl	800318c <HAL_UART_Transmit>
            linear_buf_reset(&linear_buf);
 80006d8:	482f      	ldr	r0, [pc, #188]	@ (8000798 <main+0x1c0>)
 80006da:	f000 f8cf 	bl	800087c <linear_buf_reset>
            HAL_UART_Transmit(&huart3, msg, strlen((char*)msg), HAL_MAX_DELAY); // Réafficher l'invite
 80006de:	482f      	ldr	r0, [pc, #188]	@ (800079c <main+0x1c4>)
 80006e0:	f7ff fd9c 	bl	800021c <strlen>
 80006e4:	4603      	mov	r3, r0
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ec:	492b      	ldr	r1, [pc, #172]	@ (800079c <main+0x1c4>)
 80006ee:	482c      	ldr	r0, [pc, #176]	@ (80007a0 <main+0x1c8>)
 80006f0:	f002 fd4c 	bl	800318c <HAL_UART_Transmit>
        }
      }
    }

    // Exécution automatique des chenillards (si pas en mode interruption)
    if (chenillard_running && !chenillard_int_mode) {
 80006f4:	4b2b      	ldr	r3, [pc, #172]	@ (80007a4 <main+0x1cc>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d08d      	beq.n	800061a <main+0x42>
 80006fe:	4b2a      	ldr	r3, [pc, #168]	@ (80007a8 <main+0x1d0>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	b2db      	uxtb	r3, r3
 8000704:	2b00      	cmp	r3, #0
 8000706:	d188      	bne.n	800061a <main+0x42>
      if (current_chenillard == 1) {
 8000708:	4b28      	ldr	r3, [pc, #160]	@ (80007ac <main+0x1d4>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b2db      	uxtb	r3, r3
 800070e:	2b01      	cmp	r3, #1
 8000710:	d110      	bne.n	8000734 <main+0x15c>
        static uint32_t last_tick1 = 0;
        if (HAL_GetTick() - last_tick1 >= 200) {
 8000712:	f000 fe33 	bl	800137c <HAL_GetTick>
 8000716:	4602      	mov	r2, r0
 8000718:	4b27      	ldr	r3, [pc, #156]	@ (80007b8 <main+0x1e0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	2bc7      	cmp	r3, #199	@ 0xc7
 8000720:	f67f af7b 	bls.w	800061a <main+0x42>
          chenillard1_next_step();
 8000724:	f000 f8fe 	bl	8000924 <chenillard1_next_step>
          last_tick1 = HAL_GetTick();
 8000728:	f000 fe28 	bl	800137c <HAL_GetTick>
 800072c:	4603      	mov	r3, r0
 800072e:	4a22      	ldr	r2, [pc, #136]	@ (80007b8 <main+0x1e0>)
 8000730:	6013      	str	r3, [r2, #0]
 8000732:	e772      	b.n	800061a <main+0x42>
        }
      } else if (current_chenillard == 2) {
 8000734:	4b1d      	ldr	r3, [pc, #116]	@ (80007ac <main+0x1d4>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b02      	cmp	r3, #2
 800073c:	d111      	bne.n	8000762 <main+0x18a>
        static uint32_t last_tick2 = 0;
        if (HAL_GetTick() - last_tick2 >= 300) {
 800073e:	f000 fe1d 	bl	800137c <HAL_GetTick>
 8000742:	4602      	mov	r2, r0
 8000744:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <main+0x1e4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800074e:	f4ff af64 	bcc.w	800061a <main+0x42>
          chenillard2_next_step();
 8000752:	f000 f941 	bl	80009d8 <chenillard2_next_step>
          last_tick2 = HAL_GetTick();
 8000756:	f000 fe11 	bl	800137c <HAL_GetTick>
 800075a:	4603      	mov	r3, r0
 800075c:	4a17      	ldr	r2, [pc, #92]	@ (80007bc <main+0x1e4>)
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	e75b      	b.n	800061a <main+0x42>
        }
      } else if (current_chenillard == 3) {
 8000762:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <main+0x1d4>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b03      	cmp	r3, #3
 800076a:	f47f af56 	bne.w	800061a <main+0x42>
        static uint32_t last_tick3 = 0;
        if (HAL_GetTick() - last_tick3 >= 500) {
 800076e:	f000 fe05 	bl	800137c <HAL_GetTick>
 8000772:	4602      	mov	r2, r0
 8000774:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <main+0x1e8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800077e:	f4ff af4c 	bcc.w	800061a <main+0x42>
          chenillard3_next_step();
 8000782:	f000 f951 	bl	8000a28 <chenillard3_next_step>
          last_tick3 = HAL_GetTick();
 8000786:	f000 fdf9 	bl	800137c <HAL_GetTick>
 800078a:	4603      	mov	r3, r0
 800078c:	4a0c      	ldr	r2, [pc, #48]	@ (80007c0 <main+0x1e8>)
 800078e:	6013      	str	r3, [r2, #0]
 8000790:	e743      	b.n	800061a <main+0x42>
          continue; // Retour au début de la boucle pour attendre le prochain caractère
 8000792:	bf00      	nop
    if (HAL_UART_GetState(&huart3) == HAL_UART_STATE_READY) {
 8000794:	e741      	b.n	800061a <main+0x42>
 8000796:	bf00      	nop
 8000798:	20000148 	.word	0x20000148
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000254 	.word	0x20000254
 80007a4:	2000015d 	.word	0x2000015d
 80007a8:	2000015f 	.word	0x2000015f
 80007ac:	2000015e 	.word	0x2000015e
 80007b0:	20000149 	.word	0x20000149
 80007b4:	08003e38 	.word	0x08003e38
 80007b8:	20000160 	.word	0x20000160
 80007bc:	20000164 	.word	0x20000164
 80007c0:	20000168 	.word	0x20000168

080007c4 <SystemClock_Config>:
/**
  * @brief  System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b094      	sub	sp, #80	@ 0x50
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	2230      	movs	r2, #48	@ 0x30
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f003 fa6e 	bl	8003cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e8:	4b22      	ldr	r3, [pc, #136]	@ (8000874 <SystemClock_Config+0xb0>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ec:	4a21      	ldr	r2, [pc, #132]	@ (8000874 <SystemClock_Config+0xb0>)
 80007ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000874 <SystemClock_Config+0xb0>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000800:	4b1d      	ldr	r3, [pc, #116]	@ (8000878 <SystemClock_Config+0xb4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000808:	4a1b      	ldr	r2, [pc, #108]	@ (8000878 <SystemClock_Config+0xb4>)
 800080a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800080e:	6013      	str	r3, [r2, #0]
 8000810:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <SystemClock_Config+0xb4>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800081c:	2302      	movs	r3, #2
 800081e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000820:	2301      	movs	r3, #1
 8000822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000824:	2310      	movs	r3, #16
 8000826:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000828:	2300      	movs	r3, #0
 800082a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	f107 0320 	add.w	r3, r7, #32
 8000830:	4618      	mov	r0, r3
 8000832:	f001 f8ed 	bl	8001a10 <HAL_RCC_OscConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800083c:	f000 faf0 	bl	8000e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000840:	230f      	movs	r3, #15
 8000842:	60fb      	str	r3, [r7, #12]
                              RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000844:	2300      	movs	r3, #0
 8000846:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f001 fb7c 	bl	8001f58 <HAL_RCC_ClockConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000866:	f000 fadb 	bl	8000e20 <Error_Handler>
  }
}
 800086a:	bf00      	nop
 800086c:	3750      	adds	r7, #80	@ 0x50
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800
 8000878:	40007000 	.word	0x40007000

0800087c <linear_buf_reset>:

/* USER CODE BEGIN 4 */
void linear_buf_reset(struct linear_buf_t *lb) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  lb->current_index = 0;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
  memset(lb->buffer, 0, sizeof(lb->buffer));
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3301      	adds	r3, #1
 800088e:	2214      	movs	r2, #20
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f003 fa0e 	bl	8003cb4 <memset>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <linear_buf_insert_char>:

int linear_buf_insert_char(struct linear_buf_t *lb, uint8_t c) {
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	70fb      	strb	r3, [r7, #3]
  if (lb->current_index >= MAX_BUFFER_SIZE - 1) {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b12      	cmp	r3, #18
 80008b2:	d902      	bls.n	80008ba <linear_buf_insert_char+0x1a>
    return -1;
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
 80008b8:	e012      	b.n	80008e0 <linear_buf_insert_char+0x40>
  }
  lb->buffer[lb->current_index++] = c;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	1c5a      	adds	r2, r3, #1
 80008c0:	b2d1      	uxtb	r1, r2
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	7011      	strb	r1, [r2, #0]
 80008c6:	461a      	mov	r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4413      	add	r3, r2
 80008cc:	78fa      	ldrb	r2, [r7, #3]
 80008ce:	705a      	strb	r2, [r3, #1]
  lb->buffer[lb->current_index] = '\0';
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	461a      	mov	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	2200      	movs	r2, #0
 80008dc:	705a      	strb	r2, [r3, #1]
  return 0;
 80008de:	2300      	movs	r3, #0
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <stop_chenillard>:

void stop_chenillard(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  chenillard_running = 0;
 80008f0:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <stop_chenillard+0x28>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	701a      	strb	r2, [r3, #0]
  current_chenillard = 0;
 80008f6:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <stop_chenillard+0x2c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
  chenillard_int_mode = 0;
 80008fc:	4b07      	ldr	r3, [pc, #28]	@ (800091c <stop_chenillard+0x30>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOB, led1_Pin | led2_Pin | led3_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000908:	4805      	ldr	r0, [pc, #20]	@ (8000920 <stop_chenillard+0x34>)
 800090a:	f001 f84d 	bl	80019a8 <HAL_GPIO_WritePin>
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2000015d 	.word	0x2000015d
 8000918:	2000015e 	.word	0x2000015e
 800091c:	2000015f 	.word	0x2000015f
 8000920:	40020400 	.word	0x40020400

08000924 <chenillard1_next_step>:

void chenillard1_next_step(void) {
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  static uint8_t step = 0;
  switch (step) {
 8000928:	4b29      	ldr	r3, [pc, #164]	@ (80009d0 <chenillard1_next_step+0xac>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b03      	cmp	r3, #3
 800092e:	d83b      	bhi.n	80009a8 <chenillard1_next_step+0x84>
 8000930:	a201      	add	r2, pc, #4	@ (adr r2, 8000938 <chenillard1_next_step+0x14>)
 8000932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000936:	bf00      	nop
 8000938:	08000949 	.word	0x08000949
 800093c:	08000961 	.word	0x08000961
 8000940:	08000979 	.word	0x08000979
 8000944:	08000991 	.word	0x08000991
    case 0:
      HAL_GPIO_WritePin(GPIOB, led1_Pin, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2101      	movs	r1, #1
 800094c:	4821      	ldr	r0, [pc, #132]	@ (80009d4 <chenillard1_next_step+0xb0>)
 800094e:	f001 f82b 	bl	80019a8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, led2_Pin | led3_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000958:	481e      	ldr	r0, [pc, #120]	@ (80009d4 <chenillard1_next_step+0xb0>)
 800095a:	f001 f825 	bl	80019a8 <HAL_GPIO_WritePin>
      break;
 800095e:	e027      	b.n	80009b0 <chenillard1_next_step+0x8c>
    case 1:
      HAL_GPIO_WritePin(GPIOB, led2_Pin, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	2180      	movs	r1, #128	@ 0x80
 8000964:	481b      	ldr	r0, [pc, #108]	@ (80009d4 <chenillard1_next_step+0xb0>)
 8000966:	f001 f81f 	bl	80019a8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, led1_Pin | led3_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000970:	4818      	ldr	r0, [pc, #96]	@ (80009d4 <chenillard1_next_step+0xb0>)
 8000972:	f001 f819 	bl	80019a8 <HAL_GPIO_WritePin>
      break;
 8000976:	e01b      	b.n	80009b0 <chenillard1_next_step+0x8c>
    case 2:
      HAL_GPIO_WritePin(GPIOB, led3_Pin, GPIO_PIN_SET);
 8000978:	2201      	movs	r2, #1
 800097a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800097e:	4815      	ldr	r0, [pc, #84]	@ (80009d4 <chenillard1_next_step+0xb0>)
 8000980:	f001 f812 	bl	80019a8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, led1_Pin | led2_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2181      	movs	r1, #129	@ 0x81
 8000988:	4812      	ldr	r0, [pc, #72]	@ (80009d4 <chenillard1_next_step+0xb0>)
 800098a:	f001 f80d 	bl	80019a8 <HAL_GPIO_WritePin>
      break;
 800098e:	e00f      	b.n	80009b0 <chenillard1_next_step+0x8c>
    case 3:
      HAL_GPIO_WritePin(GPIOB, led2_Pin, GPIO_PIN_SET);
 8000990:	2201      	movs	r2, #1
 8000992:	2180      	movs	r1, #128	@ 0x80
 8000994:	480f      	ldr	r0, [pc, #60]	@ (80009d4 <chenillard1_next_step+0xb0>)
 8000996:	f001 f807 	bl	80019a8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, led1_Pin | led3_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f244 0101 	movw	r1, #16385	@ 0x4001
 80009a0:	480c      	ldr	r0, [pc, #48]	@ (80009d4 <chenillard1_next_step+0xb0>)
 80009a2:	f001 f801 	bl	80019a8 <HAL_GPIO_WritePin>
      break;
 80009a6:	e003      	b.n	80009b0 <chenillard1_next_step+0x8c>
    default:
      step = 0;
 80009a8:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <chenillard1_next_step+0xac>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
      break;
 80009ae:	bf00      	nop
  }
  step = (step + 1) % 4;
 80009b0:	4b07      	ldr	r3, [pc, #28]	@ (80009d0 <chenillard1_next_step+0xac>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	3301      	adds	r3, #1
 80009b6:	425a      	negs	r2, r3
 80009b8:	f003 0303 	and.w	r3, r3, #3
 80009bc:	f002 0203 	and.w	r2, r2, #3
 80009c0:	bf58      	it	pl
 80009c2:	4253      	negpl	r3, r2
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4b02      	ldr	r3, [pc, #8]	@ (80009d0 <chenillard1_next_step+0xac>)
 80009c8:	701a      	strb	r2, [r3, #0]
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	2000016c 	.word	0x2000016c
 80009d4:	40020400 	.word	0x40020400

080009d8 <chenillard2_next_step>:

void chenillard2_next_step(void) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  static uint8_t state = 0;
  HAL_GPIO_WritePin(GPIOB, led1_Pin | led3_Pin, (state == 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80009dc:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <chenillard2_next_step+0x48>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	bf0c      	ite	eq
 80009e4:	2301      	moveq	r3, #1
 80009e6:	2300      	movne	r3, #0
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	461a      	mov	r2, r3
 80009ec:	f244 0101 	movw	r1, #16385	@ 0x4001
 80009f0:	480c      	ldr	r0, [pc, #48]	@ (8000a24 <chenillard2_next_step+0x4c>)
 80009f2:	f000 ffd9 	bl	80019a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, led2_Pin, (state == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80009f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <chenillard2_next_step+0x48>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	bf0c      	ite	eq
 80009fe:	2301      	moveq	r3, #1
 8000a00:	2300      	movne	r3, #0
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	461a      	mov	r2, r3
 8000a06:	2180      	movs	r1, #128	@ 0x80
 8000a08:	4806      	ldr	r0, [pc, #24]	@ (8000a24 <chenillard2_next_step+0x4c>)
 8000a0a:	f000 ffcd 	bl	80019a8 <HAL_GPIO_WritePin>
  state = 1 - state;
 8000a0e:	4b04      	ldr	r3, [pc, #16]	@ (8000a20 <chenillard2_next_step+0x48>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	f1c3 0301 	rsb	r3, r3, #1
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	4b01      	ldr	r3, [pc, #4]	@ (8000a20 <chenillard2_next_step+0x48>)
 8000a1a:	701a      	strb	r2, [r3, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000016d 	.word	0x2000016d
 8000a24:	40020400 	.word	0x40020400

08000a28 <chenillard3_next_step>:

void chenillard3_next_step(void) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOB, led1_Pin);
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	4807      	ldr	r0, [pc, #28]	@ (8000a4c <chenillard3_next_step+0x24>)
 8000a30:	f000 ffd3 	bl	80019da <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOB, led2_Pin);
 8000a34:	2180      	movs	r1, #128	@ 0x80
 8000a36:	4805      	ldr	r0, [pc, #20]	@ (8000a4c <chenillard3_next_step+0x24>)
 8000a38:	f000 ffcf 	bl	80019da <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOB, led3_Pin);
 8000a3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a40:	4802      	ldr	r0, [pc, #8]	@ (8000a4c <chenillard3_next_step+0x24>)
 8000a42:	f000 ffca 	bl	80019da <HAL_GPIO_TogglePin>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40020400 	.word	0x40020400

08000a50 <process_command>:

void process_command(char *command) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  if (strcmp(command, LED_ON_1) == 0) {
 8000a58:	4bac      	ldr	r3, [pc, #688]	@ (8000d0c <process_command+0x2bc>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff fbd2 	bl	8000208 <strcmp>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d107      	bne.n	8000a7a <process_command+0x2a>
    stop_chenillard();
 8000a6a:	f7ff ff3f 	bl	80008ec <stop_chenillard>
    HAL_GPIO_WritePin(GPIOB, led1_Pin, GPIO_PIN_SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2101      	movs	r1, #1
 8000a72:	48a7      	ldr	r0, [pc, #668]	@ (8000d10 <process_command+0x2c0>)
 8000a74:	f000 ff98 	bl	80019a8 <HAL_GPIO_WritePin>
    stop_chenillard();
    HAL_UART_Transmit(&huart3, msg_chenillard_int_off, strlen((char*)msg_chenillard_int_off), HAL_MAX_DELAY);
  } else {
    HAL_UART_Transmit(&huart3, msg2, strlen((char*)msg2), HAL_MAX_DELAY);
  }
}
 8000a78:	e19a      	b.n	8000db0 <process_command+0x360>
  } else if (strcmp(command, LED_OFF_1) == 0) {
 8000a7a:	4ba6      	ldr	r3, [pc, #664]	@ (8000d14 <process_command+0x2c4>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4619      	mov	r1, r3
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff fbc1 	bl	8000208 <strcmp>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d107      	bne.n	8000a9c <process_command+0x4c>
    stop_chenillard();
 8000a8c:	f7ff ff2e 	bl	80008ec <stop_chenillard>
    HAL_GPIO_WritePin(GPIOB, led1_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2101      	movs	r1, #1
 8000a94:	489e      	ldr	r0, [pc, #632]	@ (8000d10 <process_command+0x2c0>)
 8000a96:	f000 ff87 	bl	80019a8 <HAL_GPIO_WritePin>
}
 8000a9a:	e189      	b.n	8000db0 <process_command+0x360>
  } else if (strcmp(command, LED_ON_2) == 0) {
 8000a9c:	4b9e      	ldr	r3, [pc, #632]	@ (8000d18 <process_command+0x2c8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff fbb0 	bl	8000208 <strcmp>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d107      	bne.n	8000abe <process_command+0x6e>
    stop_chenillard();
 8000aae:	f7ff ff1d 	bl	80008ec <stop_chenillard>
    HAL_GPIO_WritePin(GPIOB, led2_Pin, GPIO_PIN_SET);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	2180      	movs	r1, #128	@ 0x80
 8000ab6:	4896      	ldr	r0, [pc, #600]	@ (8000d10 <process_command+0x2c0>)
 8000ab8:	f000 ff76 	bl	80019a8 <HAL_GPIO_WritePin>
}
 8000abc:	e178      	b.n	8000db0 <process_command+0x360>
  } else if (strcmp(command, LED_OFF_2) == 0) {
 8000abe:	4b97      	ldr	r3, [pc, #604]	@ (8000d1c <process_command+0x2cc>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff fb9f 	bl	8000208 <strcmp>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d107      	bne.n	8000ae0 <process_command+0x90>
    stop_chenillard();
 8000ad0:	f7ff ff0c 	bl	80008ec <stop_chenillard>
    HAL_GPIO_WritePin(GPIOB, led2_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2180      	movs	r1, #128	@ 0x80
 8000ad8:	488d      	ldr	r0, [pc, #564]	@ (8000d10 <process_command+0x2c0>)
 8000ada:	f000 ff65 	bl	80019a8 <HAL_GPIO_WritePin>
}
 8000ade:	e167      	b.n	8000db0 <process_command+0x360>
  } else if (strcmp(command, LED_ON_3) == 0) {
 8000ae0:	4b8f      	ldr	r3, [pc, #572]	@ (8000d20 <process_command+0x2d0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff fb8e 	bl	8000208 <strcmp>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d108      	bne.n	8000b04 <process_command+0xb4>
    stop_chenillard();
 8000af2:	f7ff fefb 	bl	80008ec <stop_chenillard>
    HAL_GPIO_WritePin(GPIOB, led3_Pin, GPIO_PIN_SET);
 8000af6:	2201      	movs	r2, #1
 8000af8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000afc:	4884      	ldr	r0, [pc, #528]	@ (8000d10 <process_command+0x2c0>)
 8000afe:	f000 ff53 	bl	80019a8 <HAL_GPIO_WritePin>
}
 8000b02:	e155      	b.n	8000db0 <process_command+0x360>
  } else if (strcmp(command, LED_OFF_3) == 0) {
 8000b04:	4b87      	ldr	r3, [pc, #540]	@ (8000d24 <process_command+0x2d4>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff fb7c 	bl	8000208 <strcmp>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d108      	bne.n	8000b28 <process_command+0xd8>
    stop_chenillard();
 8000b16:	f7ff fee9 	bl	80008ec <stop_chenillard>
    HAL_GPIO_WritePin(GPIOB, led3_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b20:	487b      	ldr	r0, [pc, #492]	@ (8000d10 <process_command+0x2c0>)
 8000b22:	f000 ff41 	bl	80019a8 <HAL_GPIO_WritePin>
}
 8000b26:	e143      	b.n	8000db0 <process_command+0x360>
  } else if (strcmp(command, CHENILLARD_ON_1) == 0) {
 8000b28:	4b7f      	ldr	r3, [pc, #508]	@ (8000d28 <process_command+0x2d8>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff fb6a 	bl	8000208 <strcmp>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d10b      	bne.n	8000b52 <process_command+0x102>
    stop_chenillard();
 8000b3a:	f7ff fed7 	bl	80008ec <stop_chenillard>
    chenillard_running = 1;
 8000b3e:	4b7b      	ldr	r3, [pc, #492]	@ (8000d2c <process_command+0x2dc>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
    current_chenillard = 1;
 8000b44:	4b7a      	ldr	r3, [pc, #488]	@ (8000d30 <process_command+0x2e0>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
    chenillard_int_mode = 0;
 8000b4a:	4b7a      	ldr	r3, [pc, #488]	@ (8000d34 <process_command+0x2e4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
}
 8000b50:	e12e      	b.n	8000db0 <process_command+0x360>
  } else if (strcmp(command, CHENILLARD_OFF_1) == 0) {
 8000b52:	4b79      	ldr	r3, [pc, #484]	@ (8000d38 <process_command+0x2e8>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4619      	mov	r1, r3
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff fb55 	bl	8000208 <strcmp>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d102      	bne.n	8000b6a <process_command+0x11a>
    stop_chenillard();
 8000b64:	f7ff fec2 	bl	80008ec <stop_chenillard>
}
 8000b68:	e122      	b.n	8000db0 <process_command+0x360>
  } else if (strcmp(command, CHENILLARD_INT_ON_1) == 0) {
 8000b6a:	4b74      	ldr	r3, [pc, #464]	@ (8000d3c <process_command+0x2ec>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff fb49 	bl	8000208 <strcmp>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d116      	bne.n	8000baa <process_command+0x15a>
    stop_chenillard();
 8000b7c:	f7ff feb6 	bl	80008ec <stop_chenillard>
    chenillard_running = 1;
 8000b80:	4b6a      	ldr	r3, [pc, #424]	@ (8000d2c <process_command+0x2dc>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
    current_chenillard = 1;
 8000b86:	4b6a      	ldr	r3, [pc, #424]	@ (8000d30 <process_command+0x2e0>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	701a      	strb	r2, [r3, #0]
    chenillard_int_mode = 1;
 8000b8c:	4b69      	ldr	r3, [pc, #420]	@ (8000d34 <process_command+0x2e4>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart3, msg_chenillard_int_on, strlen((char*)msg_chenillard_int_on), HAL_MAX_DELAY);
 8000b92:	486b      	ldr	r0, [pc, #428]	@ (8000d40 <process_command+0x2f0>)
 8000b94:	f7ff fb42 	bl	800021c <strlen>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba0:	4967      	ldr	r1, [pc, #412]	@ (8000d40 <process_command+0x2f0>)
 8000ba2:	4868      	ldr	r0, [pc, #416]	@ (8000d44 <process_command+0x2f4>)
 8000ba4:	f002 faf2 	bl	800318c <HAL_UART_Transmit>
}
 8000ba8:	e102      	b.n	8000db0 <process_command+0x360>
  } else if (strcmp(command, CHENILLARD_INT_OFF_1) == 0) {
 8000baa:	4b67      	ldr	r3, [pc, #412]	@ (8000d48 <process_command+0x2f8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4619      	mov	r1, r3
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff fb29 	bl	8000208 <strcmp>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d10d      	bne.n	8000bd8 <process_command+0x188>
    stop_chenillard();
 8000bbc:	f7ff fe96 	bl	80008ec <stop_chenillard>
    HAL_UART_Transmit(&huart3, msg_chenillard_int_off, strlen((char*)msg_chenillard_int_off), HAL_MAX_DELAY);
 8000bc0:	4862      	ldr	r0, [pc, #392]	@ (8000d4c <process_command+0x2fc>)
 8000bc2:	f7ff fb2b 	bl	800021c <strlen>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	495f      	ldr	r1, [pc, #380]	@ (8000d4c <process_command+0x2fc>)
 8000bd0:	485c      	ldr	r0, [pc, #368]	@ (8000d44 <process_command+0x2f4>)
 8000bd2:	f002 fadb 	bl	800318c <HAL_UART_Transmit>
}
 8000bd6:	e0eb      	b.n	8000db0 <process_command+0x360>
  } else if (strcmp(command, CHENILLARD_ON_2) == 0) {
 8000bd8:	4b5d      	ldr	r3, [pc, #372]	@ (8000d50 <process_command+0x300>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff fb12 	bl	8000208 <strcmp>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d10b      	bne.n	8000c02 <process_command+0x1b2>
    stop_chenillard();
 8000bea:	f7ff fe7f 	bl	80008ec <stop_chenillard>
    chenillard_running = 1;
 8000bee:	4b4f      	ldr	r3, [pc, #316]	@ (8000d2c <process_command+0x2dc>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]
    current_chenillard = 2;
 8000bf4:	4b4e      	ldr	r3, [pc, #312]	@ (8000d30 <process_command+0x2e0>)
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	701a      	strb	r2, [r3, #0]
    chenillard_int_mode = 0;
 8000bfa:	4b4e      	ldr	r3, [pc, #312]	@ (8000d34 <process_command+0x2e4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
}
 8000c00:	e0d6      	b.n	8000db0 <process_command+0x360>
  } else if (strcmp(command, CHENILLARD_OFF_2) == 0) {
 8000c02:	4b54      	ldr	r3, [pc, #336]	@ (8000d54 <process_command+0x304>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4619      	mov	r1, r3
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff fafd 	bl	8000208 <strcmp>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <process_command+0x1ca>
    stop_chenillard();
 8000c14:	f7ff fe6a 	bl	80008ec <stop_chenillard>
}
 8000c18:	e0ca      	b.n	8000db0 <process_command+0x360>
  } else if (strcmp(command, CHENILLARD_INT_ON_2) == 0) {
 8000c1a:	4b4f      	ldr	r3, [pc, #316]	@ (8000d58 <process_command+0x308>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4619      	mov	r1, r3
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff faf1 	bl	8000208 <strcmp>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d116      	bne.n	8000c5a <process_command+0x20a>
    stop_chenillard();
 8000c2c:	f7ff fe5e 	bl	80008ec <stop_chenillard>
    chenillard_running = 1;
 8000c30:	4b3e      	ldr	r3, [pc, #248]	@ (8000d2c <process_command+0x2dc>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
    current_chenillard = 2;
 8000c36:	4b3e      	ldr	r3, [pc, #248]	@ (8000d30 <process_command+0x2e0>)
 8000c38:	2202      	movs	r2, #2
 8000c3a:	701a      	strb	r2, [r3, #0]
    chenillard_int_mode = 1;
 8000c3c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d34 <process_command+0x2e4>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart3, msg_chenillard_int_on, strlen((char*)msg_chenillard_int_on), HAL_MAX_DELAY);
 8000c42:	483f      	ldr	r0, [pc, #252]	@ (8000d40 <process_command+0x2f0>)
 8000c44:	f7ff faea 	bl	800021c <strlen>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c50:	493b      	ldr	r1, [pc, #236]	@ (8000d40 <process_command+0x2f0>)
 8000c52:	483c      	ldr	r0, [pc, #240]	@ (8000d44 <process_command+0x2f4>)
 8000c54:	f002 fa9a 	bl	800318c <HAL_UART_Transmit>
}
 8000c58:	e0aa      	b.n	8000db0 <process_command+0x360>
  } else if (strcmp(command, CHENILLARD_INT_OFF_2) == 0) {
 8000c5a:	4b40      	ldr	r3, [pc, #256]	@ (8000d5c <process_command+0x30c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4619      	mov	r1, r3
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff fad1 	bl	8000208 <strcmp>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d10d      	bne.n	8000c88 <process_command+0x238>
    stop_chenillard();
 8000c6c:	f7ff fe3e 	bl	80008ec <stop_chenillard>
    HAL_UART_Transmit(&huart3, msg_chenillard_int_off, strlen((char*)msg_chenillard_int_off), HAL_MAX_DELAY);
 8000c70:	4836      	ldr	r0, [pc, #216]	@ (8000d4c <process_command+0x2fc>)
 8000c72:	f7ff fad3 	bl	800021c <strlen>
 8000c76:	4603      	mov	r3, r0
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	4933      	ldr	r1, [pc, #204]	@ (8000d4c <process_command+0x2fc>)
 8000c80:	4830      	ldr	r0, [pc, #192]	@ (8000d44 <process_command+0x2f4>)
 8000c82:	f002 fa83 	bl	800318c <HAL_UART_Transmit>
}
 8000c86:	e093      	b.n	8000db0 <process_command+0x360>
  } else if (strcmp(command, CHENILLARD_ON_3) == 0) {
 8000c88:	4b35      	ldr	r3, [pc, #212]	@ (8000d60 <process_command+0x310>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff faba 	bl	8000208 <strcmp>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10b      	bne.n	8000cb2 <process_command+0x262>
    stop_chenillard();
 8000c9a:	f7ff fe27 	bl	80008ec <stop_chenillard>
    chenillard_running = 1;
 8000c9e:	4b23      	ldr	r3, [pc, #140]	@ (8000d2c <process_command+0x2dc>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	701a      	strb	r2, [r3, #0]
    current_chenillard = 3;
 8000ca4:	4b22      	ldr	r3, [pc, #136]	@ (8000d30 <process_command+0x2e0>)
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	701a      	strb	r2, [r3, #0]
    chenillard_int_mode = 0;
 8000caa:	4b22      	ldr	r3, [pc, #136]	@ (8000d34 <process_command+0x2e4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
}
 8000cb0:	e07e      	b.n	8000db0 <process_command+0x360>
  } else if (strcmp(command, CHENILLARD_OFF_3) == 0) {
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <process_command+0x314>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff faa5 	bl	8000208 <strcmp>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <process_command+0x27a>
    stop_chenillard();
 8000cc4:	f7ff fe12 	bl	80008ec <stop_chenillard>
}
 8000cc8:	e072      	b.n	8000db0 <process_command+0x360>
  } else if (strcmp(command, CHENILLARD_INT_ON_3) == 0) {
 8000cca:	4b27      	ldr	r3, [pc, #156]	@ (8000d68 <process_command+0x318>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff fa99 	bl	8000208 <strcmp>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d147      	bne.n	8000d6c <process_command+0x31c>
    stop_chenillard();
 8000cdc:	f7ff fe06 	bl	80008ec <stop_chenillard>
    chenillard_running = 1;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <process_command+0x2dc>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
    current_chenillard = 3;
 8000ce6:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <process_command+0x2e0>)
 8000ce8:	2203      	movs	r2, #3
 8000cea:	701a      	strb	r2, [r3, #0]
    chenillard_int_mode = 1;
 8000cec:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <process_command+0x2e4>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart3, msg_chenillard_int_on, strlen((char*)msg_chenillard_int_on), HAL_MAX_DELAY);
 8000cf2:	4813      	ldr	r0, [pc, #76]	@ (8000d40 <process_command+0x2f0>)
 8000cf4:	f7ff fa92 	bl	800021c <strlen>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000d00:	490f      	ldr	r1, [pc, #60]	@ (8000d40 <process_command+0x2f0>)
 8000d02:	4810      	ldr	r0, [pc, #64]	@ (8000d44 <process_command+0x2f4>)
 8000d04:	f002 fa42 	bl	800318c <HAL_UART_Transmit>
}
 8000d08:	e052      	b.n	8000db0 <process_command+0x360>
 8000d0a:	bf00      	nop
 8000d0c:	200000d8 	.word	0x200000d8
 8000d10:	40020400 	.word	0x40020400
 8000d14:	200000dc 	.word	0x200000dc
 8000d18:	200000e0 	.word	0x200000e0
 8000d1c:	200000e4 	.word	0x200000e4
 8000d20:	200000e8 	.word	0x200000e8
 8000d24:	200000ec 	.word	0x200000ec
 8000d28:	200000f0 	.word	0x200000f0
 8000d2c:	2000015d 	.word	0x2000015d
 8000d30:	2000015e 	.word	0x2000015e
 8000d34:	2000015f 	.word	0x2000015f
 8000d38:	200000f4 	.word	0x200000f4
 8000d3c:	200000f8 	.word	0x200000f8
 8000d40:	2000006c 	.word	0x2000006c
 8000d44:	20000254 	.word	0x20000254
 8000d48:	200000fc 	.word	0x200000fc
 8000d4c:	200000b4 	.word	0x200000b4
 8000d50:	20000100 	.word	0x20000100
 8000d54:	20000104 	.word	0x20000104
 8000d58:	20000108 	.word	0x20000108
 8000d5c:	2000010c 	.word	0x2000010c
 8000d60:	20000110 	.word	0x20000110
 8000d64:	20000114 	.word	0x20000114
 8000d68:	20000118 	.word	0x20000118
  } else if (strcmp(command, CHENILLARD_INT_OFF_3) == 0) {
 8000d6c:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <process_command+0x368>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff fa48 	bl	8000208 <strcmp>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d10d      	bne.n	8000d9a <process_command+0x34a>
    stop_chenillard();
 8000d7e:	f7ff fdb5 	bl	80008ec <stop_chenillard>
    HAL_UART_Transmit(&huart3, msg_chenillard_int_off, strlen((char*)msg_chenillard_int_off), HAL_MAX_DELAY);
 8000d82:	480e      	ldr	r0, [pc, #56]	@ (8000dbc <process_command+0x36c>)
 8000d84:	f7ff fa4a 	bl	800021c <strlen>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d90:	490a      	ldr	r1, [pc, #40]	@ (8000dbc <process_command+0x36c>)
 8000d92:	480b      	ldr	r0, [pc, #44]	@ (8000dc0 <process_command+0x370>)
 8000d94:	f002 f9fa 	bl	800318c <HAL_UART_Transmit>
}
 8000d98:	e00a      	b.n	8000db0 <process_command+0x360>
    HAL_UART_Transmit(&huart3, msg2, strlen((char*)msg2), HAL_MAX_DELAY);
 8000d9a:	480a      	ldr	r0, [pc, #40]	@ (8000dc4 <process_command+0x374>)
 8000d9c:	f7ff fa3e 	bl	800021c <strlen>
 8000da0:	4603      	mov	r3, r0
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295
 8000da8:	4906      	ldr	r1, [pc, #24]	@ (8000dc4 <process_command+0x374>)
 8000daa:	4805      	ldr	r0, [pc, #20]	@ (8000dc0 <process_command+0x370>)
 8000dac:	f002 f9ee 	bl	800318c <HAL_UART_Transmit>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	2000011c 	.word	0x2000011c
 8000dbc:	200000b4 	.word	0x200000b4
 8000dc0:	20000254 	.word	0x20000254
 8000dc4:	2000004c 	.word	0x2000004c

08000dc8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000dce:	463b      	mov	r3, r7
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000dda:	f000 fbc1 	bl	8001560 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000dde:	2301      	movs	r3, #1
 8000de0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000dea:	231f      	movs	r3, #31
 8000dec:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000dee:	2387      	movs	r3, #135	@ 0x87
 8000df0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000df6:	2300      	movs	r3, #0
 8000df8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 fbdf 	bl	80015d0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e12:	2004      	movs	r0, #4
 8000e14:	f000 fbbc 	bl	8001590 <HAL_MPU_Enable>
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <Error_Handler+0x8>

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e32:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <HAL_MspInit+0x44>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e36:	4a0e      	ldr	r2, [pc, #56]	@ (8000e70 <HAL_MspInit+0x44>)
 8000e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <HAL_MspInit+0x44>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <HAL_MspInit+0x44>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4e:	4a08      	ldr	r2, [pc, #32]	@ (8000e70 <HAL_MspInit+0x44>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e56:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <HAL_MspInit+0x44>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <NMI_Handler+0x4>

08000e7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <HardFault_Handler+0x4>

08000e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <MemManage_Handler+0x4>

08000e8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <BusFault_Handler+0x4>

08000e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <UsageFault_Handler+0x4>

08000e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eca:	f000 fa43 	bl	8001354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed8:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <SystemInit+0x20>)
 8000eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ede:	4a05      	ldr	r2, [pc, #20]	@ (8000ef4 <SystemInit+0x20>)
 8000ee0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ee4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efe:	f107 0310 	add.w	r3, r7, #16
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f16:	4b20      	ldr	r3, [pc, #128]	@ (8000f98 <MX_TIM1_Init+0xa0>)
 8000f18:	4a20      	ldr	r2, [pc, #128]	@ (8000f9c <MX_TIM1_Init+0xa4>)
 8000f1a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 127;
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f98 <MX_TIM1_Init+0xa0>)
 8000f1e:	227f      	movs	r2, #127	@ 0x7f
 8000f20:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f22:	4b1d      	ldr	r3, [pc, #116]	@ (8000f98 <MX_TIM1_Init+0xa0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	@ (8000f98 <MX_TIM1_Init+0xa0>)
 8000f2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f2e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f30:	4b19      	ldr	r3, [pc, #100]	@ (8000f98 <MX_TIM1_Init+0xa0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f36:	4b18      	ldr	r3, [pc, #96]	@ (8000f98 <MX_TIM1_Init+0xa0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3c:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <MX_TIM1_Init+0xa0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f42:	4815      	ldr	r0, [pc, #84]	@ (8000f98 <MX_TIM1_Init+0xa0>)
 8000f44:	f001 fdde 	bl	8002b04 <HAL_TIM_Base_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000f4e:	f7ff ff67 	bl	8000e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480e      	ldr	r0, [pc, #56]	@ (8000f98 <MX_TIM1_Init+0xa0>)
 8000f60:	f001 fe28 	bl	8002bb4 <HAL_TIM_ConfigClockSource>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000f6a:	f7ff ff59 	bl	8000e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4806      	ldr	r0, [pc, #24]	@ (8000f98 <MX_TIM1_Init+0xa0>)
 8000f80:	f002 f828 	bl	8002fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f8a:	f7ff ff49 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	3720      	adds	r7, #32
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000170 	.word	0x20000170
 8000f9c:	40010000 	.word	0x40010000

08000fa0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa6:	f107 0310 	add.w	r3, r7, #16
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001038 <MX_TIM2_Init+0x98>)
 8000fc0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fc4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 255;
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001038 <MX_TIM2_Init+0x98>)
 8000fc8:	22ff      	movs	r2, #255	@ 0xff
 8000fca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <MX_TIM2_Init+0x98>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 62499;
 8000fd2:	4b19      	ldr	r3, [pc, #100]	@ (8001038 <MX_TIM2_Init+0x98>)
 8000fd4:	f24f 4223 	movw	r2, #62499	@ 0xf423
 8000fd8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fda:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <MX_TIM2_Init+0x98>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe0:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <MX_TIM2_Init+0x98>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fe6:	4814      	ldr	r0, [pc, #80]	@ (8001038 <MX_TIM2_Init+0x98>)
 8000fe8:	f001 fd8c 	bl	8002b04 <HAL_TIM_Base_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ff2:	f7ff ff15 	bl	8000e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ffa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	4619      	mov	r1, r3
 8001002:	480d      	ldr	r0, [pc, #52]	@ (8001038 <MX_TIM2_Init+0x98>)
 8001004:	f001 fdd6 	bl	8002bb4 <HAL_TIM_ConfigClockSource>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800100e:	f7ff ff07 	bl	8000e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	4619      	mov	r1, r3
 800101e:	4806      	ldr	r0, [pc, #24]	@ (8001038 <MX_TIM2_Init+0x98>)
 8001020:	f001 ffd8 	bl	8002fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800102a:	f7ff fef9 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	3720      	adds	r7, #32
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200001bc 	.word	0x200001bc

0800103c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800105a:	4b1e      	ldr	r3, [pc, #120]	@ (80010d4 <MX_TIM3_Init+0x98>)
 800105c:	4a1e      	ldr	r2, [pc, #120]	@ (80010d8 <MX_TIM3_Init+0x9c>)
 800105e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 735;
 8001060:	4b1c      	ldr	r3, [pc, #112]	@ (80010d4 <MX_TIM3_Init+0x98>)
 8001062:	f240 22df 	movw	r2, #735	@ 0x2df
 8001066:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001068:	4b1a      	ldr	r3, [pc, #104]	@ (80010d4 <MX_TIM3_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800106e:	4b19      	ldr	r3, [pc, #100]	@ (80010d4 <MX_TIM3_Init+0x98>)
 8001070:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001074:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001076:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <MX_TIM3_Init+0x98>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107c:	4b15      	ldr	r3, [pc, #84]	@ (80010d4 <MX_TIM3_Init+0x98>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001082:	4814      	ldr	r0, [pc, #80]	@ (80010d4 <MX_TIM3_Init+0x98>)
 8001084:	f001 fd3e 	bl	8002b04 <HAL_TIM_Base_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800108e:	f7ff fec7 	bl	8000e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001092:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001096:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4619      	mov	r1, r3
 800109e:	480d      	ldr	r0, [pc, #52]	@ (80010d4 <MX_TIM3_Init+0x98>)
 80010a0:	f001 fd88 	bl	8002bb4 <HAL_TIM_ConfigClockSource>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80010aa:	f7ff feb9 	bl	8000e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	@ (80010d4 <MX_TIM3_Init+0x98>)
 80010bc:	f001 ff8a 	bl	8002fd4 <HAL_TIMEx_MasterConfigSynchronization>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80010c6:	f7ff feab 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	3720      	adds	r7, #32
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000208 	.word	0x20000208
 80010d8:	40000400 	.word	0x40000400

080010dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010dc:	b480      	push	{r7}
 80010de:	b087      	sub	sp, #28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a1c      	ldr	r2, [pc, #112]	@ (800115c <HAL_TIM_Base_MspInit+0x80>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d10c      	bne.n	8001108 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001160 <HAL_TIM_Base_MspInit+0x84>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001160 <HAL_TIM_Base_MspInit+0x84>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010fa:	4b19      	ldr	r3, [pc, #100]	@ (8001160 <HAL_TIM_Base_MspInit+0x84>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001106:	e022      	b.n	800114e <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM2)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001110:	d10c      	bne.n	800112c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001112:	4b13      	ldr	r3, [pc, #76]	@ (8001160 <HAL_TIM_Base_MspInit+0x84>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001116:	4a12      	ldr	r2, [pc, #72]	@ (8001160 <HAL_TIM_Base_MspInit+0x84>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6413      	str	r3, [r2, #64]	@ 0x40
 800111e:	4b10      	ldr	r3, [pc, #64]	@ (8001160 <HAL_TIM_Base_MspInit+0x84>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
}
 800112a:	e010      	b.n	800114e <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0c      	ldr	r2, [pc, #48]	@ (8001164 <HAL_TIM_Base_MspInit+0x88>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d10b      	bne.n	800114e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <HAL_TIM_Base_MspInit+0x84>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	4a09      	ldr	r2, [pc, #36]	@ (8001160 <HAL_TIM_Base_MspInit+0x84>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6413      	str	r3, [r2, #64]	@ 0x40
 8001142:	4b07      	ldr	r3, [pc, #28]	@ (8001160 <HAL_TIM_Base_MspInit+0x84>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
}
 800114e:	bf00      	nop
 8001150:	371c      	adds	r7, #28
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40010000 	.word	0x40010000
 8001160:	40023800 	.word	0x40023800
 8001164:	40000400 	.word	0x40000400

08001168 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800116c:	4b14      	ldr	r3, [pc, #80]	@ (80011c0 <MX_USART3_UART_Init+0x58>)
 800116e:	4a15      	ldr	r2, [pc, #84]	@ (80011c4 <MX_USART3_UART_Init+0x5c>)
 8001170:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001172:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <MX_USART3_UART_Init+0x58>)
 8001174:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001178:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800117a:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <MX_USART3_UART_Init+0x58>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001180:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <MX_USART3_UART_Init+0x58>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001186:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <MX_USART3_UART_Init+0x58>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800118c:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <MX_USART3_UART_Init+0x58>)
 800118e:	220c      	movs	r2, #12
 8001190:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <MX_USART3_UART_Init+0x58>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001198:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <MX_USART3_UART_Init+0x58>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800119e:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <MX_USART3_UART_Init+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011a4:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <MX_USART3_UART_Init+0x58>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011aa:	4805      	ldr	r0, [pc, #20]	@ (80011c0 <MX_USART3_UART_Init+0x58>)
 80011ac:	f001 ffa0 	bl	80030f0 <HAL_UART_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80011b6:	f7ff fe33 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000254 	.word	0x20000254
 80011c4:	40004800 	.word	0x40004800

080011c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b0aa      	sub	sp, #168	@ 0xa8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	2284      	movs	r2, #132	@ 0x84
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f002 fd63 	bl	8003cb4 <memset>
  if(uartHandle->Instance==USART3)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a22      	ldr	r2, [pc, #136]	@ (800127c <HAL_UART_MspInit+0xb4>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d13c      	bne.n	8001272 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011fc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011fe:	2300      	movs	r3, #0
 8001200:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001202:	f107 0310 	add.w	r3, r7, #16
 8001206:	4618      	mov	r0, r3
 8001208:	f001 f88c 	bl	8002324 <HAL_RCCEx_PeriphCLKConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001212:	f7ff fe05 	bl	8000e20 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001216:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <HAL_UART_MspInit+0xb8>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	4a19      	ldr	r2, [pc, #100]	@ (8001280 <HAL_UART_MspInit+0xb8>)
 800121c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001220:	6413      	str	r3, [r2, #64]	@ 0x40
 8001222:	4b17      	ldr	r3, [pc, #92]	@ (8001280 <HAL_UART_MspInit+0xb8>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001226:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800122e:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <HAL_UART_MspInit+0xb8>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	4a13      	ldr	r2, [pc, #76]	@ (8001280 <HAL_UART_MspInit+0xb8>)
 8001234:	f043 0308 	orr.w	r3, r3, #8
 8001238:	6313      	str	r3, [r2, #48]	@ 0x30
 800123a:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <HAL_UART_MspInit+0xb8>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001246:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800124a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001260:	2307      	movs	r3, #7
 8001262:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001266:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	@ (8001284 <HAL_UART_MspInit+0xbc>)
 800126e:	f000 f9ef 	bl	8001650 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001272:	bf00      	nop
 8001274:	37a8      	adds	r7, #168	@ 0xa8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40004800 	.word	0x40004800
 8001280:	40023800 	.word	0x40023800
 8001284:	40020c00 	.word	0x40020c00

08001288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001288:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800128c:	f7ff fe22 	bl	8000ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001290:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001292:	490d      	ldr	r1, [pc, #52]	@ (80012c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001294:	4a0d      	ldr	r2, [pc, #52]	@ (80012cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012a8:	4c0a      	ldr	r4, [pc, #40]	@ (80012d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80012b6:	f002 fd05 	bl	8003cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ba:	f7ff f98d 	bl	80005d8 <main>
  bx  lr    
 80012be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012c0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80012c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c8:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 80012cc:	08003e74 	.word	0x08003e74
  ldr r2, =_sbss
 80012d0:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 80012d4:	200002e0 	.word	0x200002e0

080012d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d8:	e7fe      	b.n	80012d8 <ADC_IRQHandler>

080012da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012de:	2003      	movs	r0, #3
 80012e0:	f000 f90a 	bl	80014f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e4:	200f      	movs	r0, #15
 80012e6:	f000 f805 	bl	80012f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ea:	f7ff fd9f 	bl	8000e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <HAL_InitTick+0x54>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <HAL_InitTick+0x58>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800130a:	fbb3 f3f1 	udiv	r3, r3, r1
 800130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f917 	bl	8001546 <HAL_SYSTICK_Config>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e00e      	b.n	8001340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d80a      	bhi.n	800133e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001328:	2200      	movs	r2, #0
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f000 f8ed 	bl	800150e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001334:	4a06      	ldr	r2, [pc, #24]	@ (8001350 <HAL_InitTick+0x5c>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e000      	b.n	8001340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000120 	.word	0x20000120
 800134c:	20000128 	.word	0x20000128
 8001350:	20000124 	.word	0x20000124

08001354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_IncTick+0x20>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <HAL_IncTick+0x24>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a04      	ldr	r2, [pc, #16]	@ (8001378 <HAL_IncTick+0x24>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000128 	.word	0x20000128
 8001378:	200002dc 	.word	0x200002dc

0800137c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return uwTick;
 8001380:	4b03      	ldr	r3, [pc, #12]	@ (8001390 <HAL_GetTick+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	200002dc 	.word	0x200002dc

08001394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a4:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <__NVIC_SetPriorityGrouping+0x40>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013b0:	4013      	ands	r3, r2
 80013b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c2:	4a04      	ldr	r2, [pc, #16]	@ (80013d4 <__NVIC_SetPriorityGrouping+0x40>)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	60d3      	str	r3, [r2, #12]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00
 80013d8:	05fa0000 	.word	0x05fa0000

080013dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e0:	4b04      	ldr	r3, [pc, #16]	@ (80013f4 <__NVIC_GetPriorityGrouping+0x18>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	f003 0307 	and.w	r3, r3, #7
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	6039      	str	r1, [r7, #0]
 8001402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	db0a      	blt.n	8001422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	490c      	ldr	r1, [pc, #48]	@ (8001444 <__NVIC_SetPriority+0x4c>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	0112      	lsls	r2, r2, #4
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	440b      	add	r3, r1
 800141c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001420:	e00a      	b.n	8001438 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4908      	ldr	r1, [pc, #32]	@ (8001448 <__NVIC_SetPriority+0x50>)
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	3b04      	subs	r3, #4
 8001430:	0112      	lsls	r2, r2, #4
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	440b      	add	r3, r1
 8001436:	761a      	strb	r2, [r3, #24]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000e100 	.word	0xe000e100
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	@ 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f1c3 0307 	rsb	r3, r3, #7
 8001466:	2b04      	cmp	r3, #4
 8001468:	bf28      	it	cs
 800146a:	2304      	movcs	r3, #4
 800146c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3304      	adds	r3, #4
 8001472:	2b06      	cmp	r3, #6
 8001474:	d902      	bls.n	800147c <NVIC_EncodePriority+0x30>
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3b03      	subs	r3, #3
 800147a:	e000      	b.n	800147e <NVIC_EncodePriority+0x32>
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	f04f 32ff 	mov.w	r2, #4294967295
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	401a      	ands	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001494:	f04f 31ff 	mov.w	r1, #4294967295
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	43d9      	mvns	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	4313      	orrs	r3, r2
         );
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3724      	adds	r7, #36	@ 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014c4:	d301      	bcc.n	80014ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00f      	b.n	80014ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ca:	4a0a      	ldr	r2, [pc, #40]	@ (80014f4 <SysTick_Config+0x40>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d2:	210f      	movs	r1, #15
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	f7ff ff8e 	bl	80013f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014dc:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <SysTick_Config+0x40>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e2:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <SysTick_Config+0x40>)
 80014e4:	2207      	movs	r2, #7
 80014e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	e000e010 	.word	0xe000e010

080014f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff47 	bl	8001394 <__NVIC_SetPriorityGrouping>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150e:	b580      	push	{r7, lr}
 8001510:	b086      	sub	sp, #24
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
 800151a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001520:	f7ff ff5c 	bl	80013dc <__NVIC_GetPriorityGrouping>
 8001524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	6978      	ldr	r0, [r7, #20]
 800152c:	f7ff ff8e 	bl	800144c <NVIC_EncodePriority>
 8001530:	4602      	mov	r2, r0
 8001532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001536:	4611      	mov	r1, r2
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff5d 	bl	80013f8 <__NVIC_SetPriority>
}
 800153e:	bf00      	nop
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffb0 	bl	80014b4 <SysTick_Config>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001564:	f3bf 8f5f 	dmb	sy
}
 8001568:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800156a:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <HAL_MPU_Disable+0x28>)
 800156c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156e:	4a06      	ldr	r2, [pc, #24]	@ (8001588 <HAL_MPU_Disable+0x28>)
 8001570:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001574:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001576:	4b05      	ldr	r3, [pc, #20]	@ (800158c <HAL_MPU_Disable+0x2c>)
 8001578:	2200      	movs	r2, #0
 800157a:	605a      	str	r2, [r3, #4]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000ed00 	.word	0xe000ed00
 800158c:	e000ed90 	.word	0xe000ed90

08001590 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001598:	4a0b      	ldr	r2, [pc, #44]	@ (80015c8 <HAL_MPU_Enable+0x38>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80015a2:	4b0a      	ldr	r3, [pc, #40]	@ (80015cc <HAL_MPU_Enable+0x3c>)
 80015a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a6:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <HAL_MPU_Enable+0x3c>)
 80015a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ac:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80015ae:	f3bf 8f4f 	dsb	sy
}
 80015b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015b4:	f3bf 8f6f 	isb	sy
}
 80015b8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed90 	.word	0xe000ed90
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	785a      	ldrb	r2, [r3, #1]
 80015dc:	4b1b      	ldr	r3, [pc, #108]	@ (800164c <HAL_MPU_ConfigRegion+0x7c>)
 80015de:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80015e0:	4b1a      	ldr	r3, [pc, #104]	@ (800164c <HAL_MPU_ConfigRegion+0x7c>)
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	4a19      	ldr	r2, [pc, #100]	@ (800164c <HAL_MPU_ConfigRegion+0x7c>)
 80015e6:	f023 0301 	bic.w	r3, r3, #1
 80015ea:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80015ec:	4a17      	ldr	r2, [pc, #92]	@ (800164c <HAL_MPU_ConfigRegion+0x7c>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7b1b      	ldrb	r3, [r3, #12]
 80015f8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	7adb      	ldrb	r3, [r3, #11]
 80015fe:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001600:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	7a9b      	ldrb	r3, [r3, #10]
 8001606:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001608:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	7b5b      	ldrb	r3, [r3, #13]
 800160e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001610:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	7b9b      	ldrb	r3, [r3, #14]
 8001616:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001618:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	7bdb      	ldrb	r3, [r3, #15]
 800161e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001620:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	7a5b      	ldrb	r3, [r3, #9]
 8001626:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001628:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7a1b      	ldrb	r3, [r3, #8]
 800162e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001630:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	7812      	ldrb	r2, [r2, #0]
 8001636:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001638:	4a04      	ldr	r2, [pc, #16]	@ (800164c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800163a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800163c:	6113      	str	r3, [r2, #16]
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed90 	.word	0xe000ed90

08001650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	@ 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
 800166e:	e175      	b.n	800195c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001670:	2201      	movs	r2, #1
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	429a      	cmp	r2, r3
 800168a:	f040 8164 	bne.w	8001956 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	2b01      	cmp	r3, #1
 8001698:	d005      	beq.n	80016a6 <HAL_GPIO_Init+0x56>
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d130      	bne.n	8001708 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	2203      	movs	r2, #3
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016dc:	2201      	movs	r2, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 0201 	and.w	r2, r3, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b03      	cmp	r3, #3
 8001712:	d017      	beq.n	8001744 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	2203      	movs	r2, #3
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d123      	bne.n	8001798 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	08da      	lsrs	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3208      	adds	r2, #8
 8001758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	220f      	movs	r2, #15
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	08da      	lsrs	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3208      	adds	r2, #8
 8001792:	69b9      	ldr	r1, [r7, #24]
 8001794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0203 	and.w	r2, r3, #3
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 80be 	beq.w	8001956 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017da:	4b66      	ldr	r3, [pc, #408]	@ (8001974 <HAL_GPIO_Init+0x324>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017de:	4a65      	ldr	r2, [pc, #404]	@ (8001974 <HAL_GPIO_Init+0x324>)
 80017e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017e6:	4b63      	ldr	r3, [pc, #396]	@ (8001974 <HAL_GPIO_Init+0x324>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80017f2:	4a61      	ldr	r2, [pc, #388]	@ (8001978 <HAL_GPIO_Init+0x328>)
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	089b      	lsrs	r3, r3, #2
 80017f8:	3302      	adds	r3, #2
 80017fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	220f      	movs	r2, #15
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a58      	ldr	r2, [pc, #352]	@ (800197c <HAL_GPIO_Init+0x32c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d037      	beq.n	800188e <HAL_GPIO_Init+0x23e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a57      	ldr	r2, [pc, #348]	@ (8001980 <HAL_GPIO_Init+0x330>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d031      	beq.n	800188a <HAL_GPIO_Init+0x23a>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a56      	ldr	r2, [pc, #344]	@ (8001984 <HAL_GPIO_Init+0x334>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d02b      	beq.n	8001886 <HAL_GPIO_Init+0x236>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a55      	ldr	r2, [pc, #340]	@ (8001988 <HAL_GPIO_Init+0x338>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d025      	beq.n	8001882 <HAL_GPIO_Init+0x232>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a54      	ldr	r2, [pc, #336]	@ (800198c <HAL_GPIO_Init+0x33c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d01f      	beq.n	800187e <HAL_GPIO_Init+0x22e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a53      	ldr	r2, [pc, #332]	@ (8001990 <HAL_GPIO_Init+0x340>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d019      	beq.n	800187a <HAL_GPIO_Init+0x22a>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a52      	ldr	r2, [pc, #328]	@ (8001994 <HAL_GPIO_Init+0x344>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d013      	beq.n	8001876 <HAL_GPIO_Init+0x226>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a51      	ldr	r2, [pc, #324]	@ (8001998 <HAL_GPIO_Init+0x348>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d00d      	beq.n	8001872 <HAL_GPIO_Init+0x222>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a50      	ldr	r2, [pc, #320]	@ (800199c <HAL_GPIO_Init+0x34c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d007      	beq.n	800186e <HAL_GPIO_Init+0x21e>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a4f      	ldr	r2, [pc, #316]	@ (80019a0 <HAL_GPIO_Init+0x350>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d101      	bne.n	800186a <HAL_GPIO_Init+0x21a>
 8001866:	2309      	movs	r3, #9
 8001868:	e012      	b.n	8001890 <HAL_GPIO_Init+0x240>
 800186a:	230a      	movs	r3, #10
 800186c:	e010      	b.n	8001890 <HAL_GPIO_Init+0x240>
 800186e:	2308      	movs	r3, #8
 8001870:	e00e      	b.n	8001890 <HAL_GPIO_Init+0x240>
 8001872:	2307      	movs	r3, #7
 8001874:	e00c      	b.n	8001890 <HAL_GPIO_Init+0x240>
 8001876:	2306      	movs	r3, #6
 8001878:	e00a      	b.n	8001890 <HAL_GPIO_Init+0x240>
 800187a:	2305      	movs	r3, #5
 800187c:	e008      	b.n	8001890 <HAL_GPIO_Init+0x240>
 800187e:	2304      	movs	r3, #4
 8001880:	e006      	b.n	8001890 <HAL_GPIO_Init+0x240>
 8001882:	2303      	movs	r3, #3
 8001884:	e004      	b.n	8001890 <HAL_GPIO_Init+0x240>
 8001886:	2302      	movs	r3, #2
 8001888:	e002      	b.n	8001890 <HAL_GPIO_Init+0x240>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <HAL_GPIO_Init+0x240>
 800188e:	2300      	movs	r3, #0
 8001890:	69fa      	ldr	r2, [r7, #28]
 8001892:	f002 0203 	and.w	r2, r2, #3
 8001896:	0092      	lsls	r2, r2, #2
 8001898:	4093      	lsls	r3, r2
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80018a0:	4935      	ldr	r1, [pc, #212]	@ (8001978 <HAL_GPIO_Init+0x328>)
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	3302      	adds	r3, #2
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ae:	4b3d      	ldr	r3, [pc, #244]	@ (80019a4 <HAL_GPIO_Init+0x354>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018d2:	4a34      	ldr	r2, [pc, #208]	@ (80019a4 <HAL_GPIO_Init+0x354>)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018d8:	4b32      	ldr	r3, [pc, #200]	@ (80019a4 <HAL_GPIO_Init+0x354>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018fc:	4a29      	ldr	r2, [pc, #164]	@ (80019a4 <HAL_GPIO_Init+0x354>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001902:	4b28      	ldr	r3, [pc, #160]	@ (80019a4 <HAL_GPIO_Init+0x354>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001926:	4a1f      	ldr	r2, [pc, #124]	@ (80019a4 <HAL_GPIO_Init+0x354>)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800192c:	4b1d      	ldr	r3, [pc, #116]	@ (80019a4 <HAL_GPIO_Init+0x354>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001950:	4a14      	ldr	r2, [pc, #80]	@ (80019a4 <HAL_GPIO_Init+0x354>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3301      	adds	r3, #1
 800195a:	61fb      	str	r3, [r7, #28]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	2b0f      	cmp	r3, #15
 8001960:	f67f ae86 	bls.w	8001670 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3724      	adds	r7, #36	@ 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800
 8001978:	40013800 	.word	0x40013800
 800197c:	40020000 	.word	0x40020000
 8001980:	40020400 	.word	0x40020400
 8001984:	40020800 	.word	0x40020800
 8001988:	40020c00 	.word	0x40020c00
 800198c:	40021000 	.word	0x40021000
 8001990:	40021400 	.word	0x40021400
 8001994:	40021800 	.word	0x40021800
 8001998:	40021c00 	.word	0x40021c00
 800199c:	40022000 	.word	0x40022000
 80019a0:	40022400 	.word	0x40022400
 80019a4:	40013c00 	.word	0x40013c00

080019a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	807b      	strh	r3, [r7, #2]
 80019b4:	4613      	mov	r3, r2
 80019b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019b8:	787b      	ldrb	r3, [r7, #1]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019be:	887a      	ldrh	r2, [r7, #2]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80019c4:	e003      	b.n	80019ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80019c6:	887b      	ldrh	r3, [r7, #2]
 80019c8:	041a      	lsls	r2, r3, #16
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	619a      	str	r2, [r3, #24]
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019da:	b480      	push	{r7}
 80019dc:	b085      	sub	sp, #20
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	460b      	mov	r3, r1
 80019e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019ec:	887a      	ldrh	r2, [r7, #2]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4013      	ands	r3, r2
 80019f2:	041a      	lsls	r2, r3, #16
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	43d9      	mvns	r1, r3
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	400b      	ands	r3, r1
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	619a      	str	r2, [r3, #24]
}
 8001a02:	bf00      	nop
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e291      	b.n	8001f4a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 8087 	beq.w	8001b42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a34:	4b96      	ldr	r3, [pc, #600]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 030c 	and.w	r3, r3, #12
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d00c      	beq.n	8001a5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a40:	4b93      	ldr	r3, [pc, #588]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 030c 	and.w	r3, r3, #12
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	d112      	bne.n	8001a72 <HAL_RCC_OscConfig+0x62>
 8001a4c:	4b90      	ldr	r3, [pc, #576]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a58:	d10b      	bne.n	8001a72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5a:	4b8d      	ldr	r3, [pc, #564]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d06c      	beq.n	8001b40 <HAL_RCC_OscConfig+0x130>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d168      	bne.n	8001b40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e26b      	b.n	8001f4a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a7a:	d106      	bne.n	8001a8a <HAL_RCC_OscConfig+0x7a>
 8001a7c:	4b84      	ldr	r3, [pc, #528]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a83      	ldr	r2, [pc, #524]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001a82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	e02e      	b.n	8001ae8 <HAL_RCC_OscConfig+0xd8>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10c      	bne.n	8001aac <HAL_RCC_OscConfig+0x9c>
 8001a92:	4b7f      	ldr	r3, [pc, #508]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a7e      	ldr	r2, [pc, #504]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001a98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a7b      	ldr	r2, [pc, #492]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001aa4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	e01d      	b.n	8001ae8 <HAL_RCC_OscConfig+0xd8>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ab4:	d10c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0xc0>
 8001ab6:	4b76      	ldr	r3, [pc, #472]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a75      	ldr	r2, [pc, #468]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	4b73      	ldr	r3, [pc, #460]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a72      	ldr	r2, [pc, #456]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e00b      	b.n	8001ae8 <HAL_RCC_OscConfig+0xd8>
 8001ad0:	4b6f      	ldr	r3, [pc, #444]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a6e      	ldr	r2, [pc, #440]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	4b6c      	ldr	r3, [pc, #432]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a6b      	ldr	r2, [pc, #428]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d013      	beq.n	8001b18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af0:	f7ff fc44 	bl	800137c <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af8:	f7ff fc40 	bl	800137c <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b64      	cmp	r3, #100	@ 0x64
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e21f      	b.n	8001f4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0a:	4b61      	ldr	r3, [pc, #388]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0xe8>
 8001b16:	e014      	b.n	8001b42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff fc30 	bl	800137c <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b20:	f7ff fc2c 	bl	800137c <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	@ 0x64
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e20b      	b.n	8001f4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b32:	4b57      	ldr	r3, [pc, #348]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x110>
 8001b3e:	e000      	b.n	8001b42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d069      	beq.n	8001c22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b4e:	4b50      	ldr	r3, [pc, #320]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00b      	beq.n	8001b72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b5a:	4b4d      	ldr	r3, [pc, #308]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d11c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x190>
 8001b66:	4b4a      	ldr	r3, [pc, #296]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d116      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b72:	4b47      	ldr	r3, [pc, #284]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <HAL_RCC_OscConfig+0x17a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d001      	beq.n	8001b8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e1df      	b.n	8001f4a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8a:	4b41      	ldr	r3, [pc, #260]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	493d      	ldr	r1, [pc, #244]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b9e:	e040      	b.n	8001c22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d023      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ba8:	4b39      	ldr	r3, [pc, #228]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a38      	ldr	r2, [pc, #224]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb4:	f7ff fbe2 	bl	800137c <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bbc:	f7ff fbde 	bl	800137c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e1bd      	b.n	8001f4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bce:	4b30      	ldr	r3, [pc, #192]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bda:	4b2d      	ldr	r3, [pc, #180]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4929      	ldr	r1, [pc, #164]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]
 8001bee:	e018      	b.n	8001c22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf0:	4b27      	ldr	r3, [pc, #156]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a26      	ldr	r2, [pc, #152]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001bf6:	f023 0301 	bic.w	r3, r3, #1
 8001bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fbbe 	bl	800137c <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c04:	f7ff fbba 	bl	800137c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e199      	b.n	8001f4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c16:	4b1e      	ldr	r3, [pc, #120]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d038      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d019      	beq.n	8001c6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c36:	4b16      	ldr	r3, [pc, #88]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c3a:	4a15      	ldr	r2, [pc, #84]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c42:	f7ff fb9b 	bl	800137c <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c4a:	f7ff fb97 	bl	800137c <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e176      	b.n	8001f4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001c5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x23a>
 8001c68:	e01a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c6e:	4a08      	ldr	r2, [pc, #32]	@ (8001c90 <HAL_RCC_OscConfig+0x280>)
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c76:	f7ff fb81 	bl	800137c <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c7c:	e00a      	b.n	8001c94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c7e:	f7ff fb7d 	bl	800137c <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d903      	bls.n	8001c94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e15c      	b.n	8001f4a <HAL_RCC_OscConfig+0x53a>
 8001c90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c94:	4b91      	ldr	r3, [pc, #580]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001c96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1ee      	bne.n	8001c7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 80a4 	beq.w	8001df6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cae:	4b8b      	ldr	r3, [pc, #556]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10d      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	4b88      	ldr	r3, [pc, #544]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbe:	4a87      	ldr	r2, [pc, #540]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cc6:	4b85      	ldr	r3, [pc, #532]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd6:	4b82      	ldr	r3, [pc, #520]	@ (8001ee0 <HAL_RCC_OscConfig+0x4d0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d118      	bne.n	8001d14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001ce2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ee0 <HAL_RCC_OscConfig+0x4d0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ee0 <HAL_RCC_OscConfig+0x4d0>)
 8001ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cee:	f7ff fb45 	bl	800137c <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf6:	f7ff fb41 	bl	800137c <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b64      	cmp	r3, #100	@ 0x64
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e120      	b.n	8001f4a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d08:	4b75      	ldr	r3, [pc, #468]	@ (8001ee0 <HAL_RCC_OscConfig+0x4d0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d106      	bne.n	8001d2a <HAL_RCC_OscConfig+0x31a>
 8001d1c:	4b6f      	ldr	r3, [pc, #444]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d20:	4a6e      	ldr	r2, [pc, #440]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d28:	e02d      	b.n	8001d86 <HAL_RCC_OscConfig+0x376>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10c      	bne.n	8001d4c <HAL_RCC_OscConfig+0x33c>
 8001d32:	4b6a      	ldr	r3, [pc, #424]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d36:	4a69      	ldr	r2, [pc, #420]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001d38:	f023 0301 	bic.w	r3, r3, #1
 8001d3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d3e:	4b67      	ldr	r3, [pc, #412]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d42:	4a66      	ldr	r2, [pc, #408]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001d44:	f023 0304 	bic.w	r3, r3, #4
 8001d48:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d4a:	e01c      	b.n	8001d86 <HAL_RCC_OscConfig+0x376>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b05      	cmp	r3, #5
 8001d52:	d10c      	bne.n	8001d6e <HAL_RCC_OscConfig+0x35e>
 8001d54:	4b61      	ldr	r3, [pc, #388]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d58:	4a60      	ldr	r2, [pc, #384]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001d5a:	f043 0304 	orr.w	r3, r3, #4
 8001d5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d60:	4b5e      	ldr	r3, [pc, #376]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d64:	4a5d      	ldr	r2, [pc, #372]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d6c:	e00b      	b.n	8001d86 <HAL_RCC_OscConfig+0x376>
 8001d6e:	4b5b      	ldr	r3, [pc, #364]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d72:	4a5a      	ldr	r2, [pc, #360]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d7a:	4b58      	ldr	r3, [pc, #352]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7e:	4a57      	ldr	r2, [pc, #348]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001d80:	f023 0304 	bic.w	r3, r3, #4
 8001d84:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d015      	beq.n	8001dba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8e:	f7ff faf5 	bl	800137c <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d94:	e00a      	b.n	8001dac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d96:	f7ff faf1 	bl	800137c <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e0ce      	b.n	8001f4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dac:	4b4b      	ldr	r3, [pc, #300]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0ee      	beq.n	8001d96 <HAL_RCC_OscConfig+0x386>
 8001db8:	e014      	b.n	8001de4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dba:	f7ff fadf 	bl	800137c <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7ff fadb 	bl	800137c <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e0b8      	b.n	8001f4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd8:	4b40      	ldr	r3, [pc, #256]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1ee      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001de4:	7dfb      	ldrb	r3, [r7, #23]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d105      	bne.n	8001df6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dea:	4b3c      	ldr	r3, [pc, #240]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	4a3b      	ldr	r2, [pc, #236]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001df0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001df4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 80a4 	beq.w	8001f48 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e00:	4b36      	ldr	r3, [pc, #216]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d06b      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d149      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e14:	4b31      	ldr	r3, [pc, #196]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a30      	ldr	r2, [pc, #192]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001e1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7ff faac 	bl	800137c <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e28:	f7ff faa8 	bl	800137c <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e087      	b.n	8001f4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3a:	4b28      	ldr	r3, [pc, #160]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69da      	ldr	r2, [r3, #28]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e54:	019b      	lsls	r3, r3, #6
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5c:	085b      	lsrs	r3, r3, #1
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	041b      	lsls	r3, r3, #16
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e68:	061b      	lsls	r3, r3, #24
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001e6e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001e72:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e74:	4b19      	ldr	r3, [pc, #100]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a18      	ldr	r2, [pc, #96]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001e7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7ff fa7c 	bl	800137c <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e88:	f7ff fa78 	bl	800137c <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e057      	b.n	8001f4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9a:	4b10      	ldr	r3, [pc, #64]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0x478>
 8001ea6:	e04f      	b.n	8001f48 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a0b      	ldr	r2, [pc, #44]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001eae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7ff fa62 	bl	800137c <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ebc:	f7ff fa5e 	bl	800137c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e03d      	b.n	8001f4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ece:	4b03      	ldr	r3, [pc, #12]	@ (8001edc <HAL_RCC_OscConfig+0x4cc>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x4ac>
 8001eda:	e035      	b.n	8001f48 <HAL_RCC_OscConfig+0x538>
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f54 <HAL_RCC_OscConfig+0x544>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d028      	beq.n	8001f44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d121      	bne.n	8001f44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d11a      	bne.n	8001f44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f14:	4013      	ands	r3, r2
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f1a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d111      	bne.n	8001f44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2a:	085b      	lsrs	r3, r3, #1
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d107      	bne.n	8001f44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d001      	beq.n	8001f48 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800

08001f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0d0      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f70:	4b6a      	ldr	r3, [pc, #424]	@ (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d910      	bls.n	8001fa0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7e:	4b67      	ldr	r3, [pc, #412]	@ (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 020f 	bic.w	r2, r3, #15
 8001f86:	4965      	ldr	r1, [pc, #404]	@ (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b63      	ldr	r3, [pc, #396]	@ (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0b8      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d020      	beq.n	8001fee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fb8:	4b59      	ldr	r3, [pc, #356]	@ (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4a58      	ldr	r2, [pc, #352]	@ (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 8001fbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001fc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd0:	4b53      	ldr	r3, [pc, #332]	@ (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	4a52      	ldr	r2, [pc, #328]	@ (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001fda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fdc:	4b50      	ldr	r3, [pc, #320]	@ (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	494d      	ldr	r1, [pc, #308]	@ (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d040      	beq.n	800207c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d107      	bne.n	8002012 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	4b47      	ldr	r3, [pc, #284]	@ (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d115      	bne.n	800203a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e07f      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d107      	bne.n	800202a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201a:	4b41      	ldr	r3, [pc, #260]	@ (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d109      	bne.n	800203a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e073      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202a:	4b3d      	ldr	r3, [pc, #244]	@ (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e06b      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800203a:	4b39      	ldr	r3, [pc, #228]	@ (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f023 0203 	bic.w	r2, r3, #3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4936      	ldr	r1, [pc, #216]	@ (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 8002048:	4313      	orrs	r3, r2
 800204a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800204c:	f7ff f996 	bl	800137c <HAL_GetTick>
 8002050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002052:	e00a      	b.n	800206a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002054:	f7ff f992 	bl	800137c <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e053      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206a:	4b2d      	ldr	r3, [pc, #180]	@ (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 020c 	and.w	r2, r3, #12
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	429a      	cmp	r2, r3
 800207a:	d1eb      	bne.n	8002054 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800207c:	4b27      	ldr	r3, [pc, #156]	@ (800211c <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d210      	bcs.n	80020ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b24      	ldr	r3, [pc, #144]	@ (800211c <HAL_RCC_ClockConfig+0x1c4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 020f 	bic.w	r2, r3, #15
 8002092:	4922      	ldr	r1, [pc, #136]	@ (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b20      	ldr	r3, [pc, #128]	@ (800211c <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e032      	b.n	8002112 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b8:	4b19      	ldr	r3, [pc, #100]	@ (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4916      	ldr	r1, [pc, #88]	@ (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d009      	beq.n	80020ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020d6:	4b12      	ldr	r3, [pc, #72]	@ (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	490e      	ldr	r1, [pc, #56]	@ (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020ea:	f000 f821 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 80020ee:	4602      	mov	r2, r0
 80020f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	490a      	ldr	r1, [pc, #40]	@ (8002124 <HAL_RCC_ClockConfig+0x1cc>)
 80020fc:	5ccb      	ldrb	r3, [r1, r3]
 80020fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002102:	4a09      	ldr	r2, [pc, #36]	@ (8002128 <HAL_RCC_ClockConfig+0x1d0>)
 8002104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002106:	4b09      	ldr	r3, [pc, #36]	@ (800212c <HAL_RCC_ClockConfig+0x1d4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff f8f2 	bl	80012f4 <HAL_InitTick>

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40023c00 	.word	0x40023c00
 8002120:	40023800 	.word	0x40023800
 8002124:	08003e4c 	.word	0x08003e4c
 8002128:	20000120 	.word	0x20000120
 800212c:	20000124 	.word	0x20000124

08002130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002134:	b090      	sub	sp, #64	@ 0x40
 8002136:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	637b      	str	r3, [r7, #52]	@ 0x34
 800213c:	2300      	movs	r3, #0
 800213e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002140:	2300      	movs	r3, #0
 8002142:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002148:	4b59      	ldr	r3, [pc, #356]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 030c 	and.w	r3, r3, #12
 8002150:	2b08      	cmp	r3, #8
 8002152:	d00d      	beq.n	8002170 <HAL_RCC_GetSysClockFreq+0x40>
 8002154:	2b08      	cmp	r3, #8
 8002156:	f200 80a1 	bhi.w	800229c <HAL_RCC_GetSysClockFreq+0x16c>
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <HAL_RCC_GetSysClockFreq+0x34>
 800215e:	2b04      	cmp	r3, #4
 8002160:	d003      	beq.n	800216a <HAL_RCC_GetSysClockFreq+0x3a>
 8002162:	e09b      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002164:	4b53      	ldr	r3, [pc, #332]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002166:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002168:	e09b      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800216a:	4b53      	ldr	r3, [pc, #332]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800216c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800216e:	e098      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002170:	4b4f      	ldr	r3, [pc, #316]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002178:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800217a:	4b4d      	ldr	r3, [pc, #308]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d028      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002186:	4b4a      	ldr	r3, [pc, #296]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	099b      	lsrs	r3, r3, #6
 800218c:	2200      	movs	r2, #0
 800218e:	623b      	str	r3, [r7, #32]
 8002190:	627a      	str	r2, [r7, #36]	@ 0x24
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002198:	2100      	movs	r1, #0
 800219a:	4b47      	ldr	r3, [pc, #284]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800219c:	fb03 f201 	mul.w	r2, r3, r1
 80021a0:	2300      	movs	r3, #0
 80021a2:	fb00 f303 	mul.w	r3, r0, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	4a43      	ldr	r2, [pc, #268]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80021aa:	fba0 1202 	umull	r1, r2, r0, r2
 80021ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021b0:	460a      	mov	r2, r1
 80021b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80021b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021b6:	4413      	add	r3, r2
 80021b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021bc:	2200      	movs	r2, #0
 80021be:	61bb      	str	r3, [r7, #24]
 80021c0:	61fa      	str	r2, [r7, #28]
 80021c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80021ca:	f7fe f82f 	bl	800022c <__aeabi_uldivmod>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4613      	mov	r3, r2
 80021d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021d6:	e053      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d8:	4b35      	ldr	r3, [pc, #212]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	099b      	lsrs	r3, r3, #6
 80021de:	2200      	movs	r2, #0
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	617a      	str	r2, [r7, #20]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80021ea:	f04f 0b00 	mov.w	fp, #0
 80021ee:	4652      	mov	r2, sl
 80021f0:	465b      	mov	r3, fp
 80021f2:	f04f 0000 	mov.w	r0, #0
 80021f6:	f04f 0100 	mov.w	r1, #0
 80021fa:	0159      	lsls	r1, r3, #5
 80021fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002200:	0150      	lsls	r0, r2, #5
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	ebb2 080a 	subs.w	r8, r2, sl
 800220a:	eb63 090b 	sbc.w	r9, r3, fp
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800221a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800221e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002222:	ebb2 0408 	subs.w	r4, r2, r8
 8002226:	eb63 0509 	sbc.w	r5, r3, r9
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	00eb      	lsls	r3, r5, #3
 8002234:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002238:	00e2      	lsls	r2, r4, #3
 800223a:	4614      	mov	r4, r2
 800223c:	461d      	mov	r5, r3
 800223e:	eb14 030a 	adds.w	r3, r4, sl
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	eb45 030b 	adc.w	r3, r5, fp
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002256:	4629      	mov	r1, r5
 8002258:	028b      	lsls	r3, r1, #10
 800225a:	4621      	mov	r1, r4
 800225c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002260:	4621      	mov	r1, r4
 8002262:	028a      	lsls	r2, r1, #10
 8002264:	4610      	mov	r0, r2
 8002266:	4619      	mov	r1, r3
 8002268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800226a:	2200      	movs	r2, #0
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	60fa      	str	r2, [r7, #12]
 8002270:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002274:	f7fd ffda 	bl	800022c <__aeabi_uldivmod>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4613      	mov	r3, r2
 800227e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002280:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	0c1b      	lsrs	r3, r3, #16
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	3301      	adds	r3, #1
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002290:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002294:	fbb2 f3f3 	udiv	r3, r2, r3
 8002298:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800229a:	e002      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800229c:	4b05      	ldr	r3, [pc, #20]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800229e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3740      	adds	r7, #64	@ 0x40
 80022a8:	46bd      	mov	sp, r7
 80022aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	00f42400 	.word	0x00f42400
 80022b8:	017d7840 	.word	0x017d7840

080022bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c0:	4b03      	ldr	r3, [pc, #12]	@ (80022d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022c2:	681b      	ldr	r3, [r3, #0]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	20000120 	.word	0x20000120

080022d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022d8:	f7ff fff0 	bl	80022bc <HAL_RCC_GetHCLKFreq>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b05      	ldr	r3, [pc, #20]	@ (80022f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	0a9b      	lsrs	r3, r3, #10
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	4903      	ldr	r1, [pc, #12]	@ (80022f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ea:	5ccb      	ldrb	r3, [r1, r3]
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40023800 	.word	0x40023800
 80022f8:	08003e5c 	.word	0x08003e5c

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002300:	f7ff ffdc 	bl	80022bc <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b05      	ldr	r3, [pc, #20]	@ (800231c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0b5b      	lsrs	r3, r3, #13
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4903      	ldr	r1, [pc, #12]	@ (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002318:	4618      	mov	r0, r3
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40023800 	.word	0x40023800
 8002320:	08003e5c 	.word	0x08003e5c

08002324 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	d012      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800234c:	4b69      	ldr	r3, [pc, #420]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4a68      	ldr	r2, [pc, #416]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002352:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002356:	6093      	str	r3, [r2, #8]
 8002358:	4b66      	ldr	r3, [pc, #408]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002360:	4964      	ldr	r1, [pc, #400]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002362:	4313      	orrs	r3, r2
 8002364:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800236e:	2301      	movs	r3, #1
 8002370:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d017      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800237e:	4b5d      	ldr	r3, [pc, #372]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002380:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002384:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800238c:	4959      	ldr	r1, [pc, #356]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002398:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800239c:	d101      	bne.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800239e:	2301      	movs	r3, #1
 80023a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80023aa:	2301      	movs	r3, #1
 80023ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d017      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023ba:	4b4e      	ldr	r3, [pc, #312]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	494a      	ldr	r1, [pc, #296]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023d8:	d101      	bne.n	80023de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80023da:	2301      	movs	r3, #1
 80023dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80023e6:	2301      	movs	r3, #1
 80023e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80023f6:	2301      	movs	r3, #1
 80023f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0320 	and.w	r3, r3, #32
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 808b 	beq.w	800251e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002408:	4b3a      	ldr	r3, [pc, #232]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240c:	4a39      	ldr	r2, [pc, #228]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002412:	6413      	str	r3, [r2, #64]	@ 0x40
 8002414:	4b37      	ldr	r3, [pc, #220]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002418:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002420:	4b35      	ldr	r3, [pc, #212]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a34      	ldr	r2, [pc, #208]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002426:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800242a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800242c:	f7fe ffa6 	bl	800137c <HAL_GetTick>
 8002430:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002434:	f7fe ffa2 	bl	800137c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	@ 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e357      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002446:	4b2c      	ldr	r3, [pc, #176]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002452:	4b28      	ldr	r3, [pc, #160]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002456:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800245a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d035      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002466:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	429a      	cmp	r2, r3
 800246e:	d02e      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002470:	4b20      	ldr	r3, [pc, #128]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002474:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002478:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800247a:	4b1e      	ldr	r3, [pc, #120]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800247c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247e:	4a1d      	ldr	r2, [pc, #116]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002484:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002486:	4b1b      	ldr	r3, [pc, #108]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800248a:	4a1a      	ldr	r2, [pc, #104]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800248c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002490:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002492:	4a18      	ldr	r2, [pc, #96]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002498:	4b16      	ldr	r3, [pc, #88]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800249a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d114      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fe ff6a 	bl	800137c <HAL_GetTick>
 80024a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024aa:	e00a      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ac:	f7fe ff66 	bl	800137c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e319      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c2:	4b0c      	ldr	r3, [pc, #48]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0ee      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80024da:	d111      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80024dc:	4b05      	ldr	r3, [pc, #20]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024e8:	4b04      	ldr	r3, [pc, #16]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80024ea:	400b      	ands	r3, r1
 80024ec:	4901      	ldr	r1, [pc, #4]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
 80024f2:	e00b      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40007000 	.word	0x40007000
 80024fc:	0ffffcff 	.word	0x0ffffcff
 8002500:	4baa      	ldr	r3, [pc, #680]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4aa9      	ldr	r2, [pc, #676]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002506:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800250a:	6093      	str	r3, [r2, #8]
 800250c:	4ba7      	ldr	r3, [pc, #668]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800250e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002518:	49a4      	ldr	r1, [pc, #656]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800251a:	4313      	orrs	r3, r2
 800251c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	2b00      	cmp	r3, #0
 8002528:	d010      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800252a:	4ba0      	ldr	r3, [pc, #640]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800252c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002530:	4a9e      	ldr	r2, [pc, #632]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002532:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002536:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800253a:	4b9c      	ldr	r3, [pc, #624]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800253c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002544:	4999      	ldr	r1, [pc, #612]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002546:	4313      	orrs	r3, r2
 8002548:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002558:	4b94      	ldr	r3, [pc, #592]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800255a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800255e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002566:	4991      	ldr	r1, [pc, #580]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800257a:	4b8c      	ldr	r3, [pc, #560]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800257c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002580:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002588:	4988      	ldr	r1, [pc, #544]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800258a:	4313      	orrs	r3, r2
 800258c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00a      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800259c:	4b83      	ldr	r3, [pc, #524]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800259e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025aa:	4980      	ldr	r1, [pc, #512]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80025be:	4b7b      	ldr	r3, [pc, #492]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025cc:	4977      	ldr	r1, [pc, #476]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00a      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025e0:	4b72      	ldr	r3, [pc, #456]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e6:	f023 0203 	bic.w	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	496f      	ldr	r1, [pc, #444]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002602:	4b6a      	ldr	r3, [pc, #424]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002608:	f023 020c 	bic.w	r2, r3, #12
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002610:	4966      	ldr	r1, [pc, #408]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002624:	4b61      	ldr	r3, [pc, #388]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002632:	495e      	ldr	r1, [pc, #376]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002646:	4b59      	ldr	r3, [pc, #356]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800264c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002654:	4955      	ldr	r1, [pc, #340]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002668:	4b50      	ldr	r3, [pc, #320]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800266a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800266e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002676:	494d      	ldr	r1, [pc, #308]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800268a:	4b48      	ldr	r3, [pc, #288]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800268c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002690:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002698:	4944      	ldr	r1, [pc, #272]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00a      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80026ac:	4b3f      	ldr	r3, [pc, #252]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ba:	493c      	ldr	r1, [pc, #240]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00a      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80026ce:	4b37      	ldr	r3, [pc, #220]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026dc:	4933      	ldr	r1, [pc, #204]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00a      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80026f0:	4b2e      	ldr	r3, [pc, #184]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026fe:	492b      	ldr	r1, [pc, #172]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d011      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002712:	4b26      	ldr	r3, [pc, #152]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002718:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002720:	4922      	ldr	r1, [pc, #136]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002722:	4313      	orrs	r3, r2
 8002724:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800272c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002730:	d101      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002732:	2301      	movs	r3, #1
 8002734:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002742:	2301      	movs	r3, #1
 8002744:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00a      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002752:	4b16      	ldr	r3, [pc, #88]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002758:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002760:	4912      	ldr	r1, [pc, #72]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00b      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002774:	4b0d      	ldr	r3, [pc, #52]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800277a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002784:	4909      	ldr	r1, [pc, #36]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d006      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 80d9 	beq.w	8002952 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027a0:	4b02      	ldr	r3, [pc, #8]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a01      	ldr	r2, [pc, #4]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80027aa:	e001      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80027ac:	40023800 	.word	0x40023800
 80027b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b2:	f7fe fde3 	bl	800137c <HAL_GetTick>
 80027b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027b8:	e008      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027ba:	f7fe fddf 	bl	800137c <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b64      	cmp	r3, #100	@ 0x64
 80027c6:	d901      	bls.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e194      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027cc:	4b6c      	ldr	r3, [pc, #432]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f0      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d021      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d11d      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027ec:	4b64      	ldr	r3, [pc, #400]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027f2:	0c1b      	lsrs	r3, r3, #16
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027fa:	4b61      	ldr	r3, [pc, #388]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002800:	0e1b      	lsrs	r3, r3, #24
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	019a      	lsls	r2, r3, #6
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	041b      	lsls	r3, r3, #16
 8002812:	431a      	orrs	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	061b      	lsls	r3, r3, #24
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	071b      	lsls	r3, r3, #28
 8002820:	4957      	ldr	r1, [pc, #348]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d004      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002838:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800283c:	d00a      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002846:	2b00      	cmp	r3, #0
 8002848:	d02e      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002852:	d129      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002854:	4b4a      	ldr	r3, [pc, #296]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002856:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800285a:	0c1b      	lsrs	r3, r3, #16
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002862:	4b47      	ldr	r3, [pc, #284]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002864:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002868:	0f1b      	lsrs	r3, r3, #28
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	019a      	lsls	r2, r3, #6
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	041b      	lsls	r3, r3, #16
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	061b      	lsls	r3, r3, #24
 8002882:	431a      	orrs	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	071b      	lsls	r3, r3, #28
 8002888:	493d      	ldr	r1, [pc, #244]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002890:	4b3b      	ldr	r3, [pc, #236]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002892:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002896:	f023 021f 	bic.w	r2, r3, #31
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289e:	3b01      	subs	r3, #1
 80028a0:	4937      	ldr	r1, [pc, #220]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01d      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028b4:	4b32      	ldr	r3, [pc, #200]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028ba:	0e1b      	lsrs	r3, r3, #24
 80028bc:	f003 030f 	and.w	r3, r3, #15
 80028c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028c8:	0f1b      	lsrs	r3, r3, #28
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	019a      	lsls	r2, r3, #6
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	041b      	lsls	r3, r3, #16
 80028dc:	431a      	orrs	r2, r3
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	061b      	lsls	r3, r3, #24
 80028e2:	431a      	orrs	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	071b      	lsls	r3, r3, #28
 80028e8:	4925      	ldr	r1, [pc, #148]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d011      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	019a      	lsls	r2, r3, #6
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	041b      	lsls	r3, r3, #16
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	061b      	lsls	r3, r3, #24
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	071b      	lsls	r3, r3, #28
 8002918:	4919      	ldr	r1, [pc, #100]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002920:	4b17      	ldr	r3, [pc, #92]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a16      	ldr	r2, [pc, #88]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002926:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800292a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800292c:	f7fe fd26 	bl	800137c <HAL_GetTick>
 8002930:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002934:	f7fe fd22 	bl	800137c <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	@ 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e0d7      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002946:	4b0e      	ldr	r3, [pc, #56]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	2b01      	cmp	r3, #1
 8002956:	f040 80cd 	bne.w	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800295a:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a08      	ldr	r2, [pc, #32]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002960:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002966:	f7fe fd09 	bl	800137c <HAL_GetTick>
 800296a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800296c:	e00a      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800296e:	f7fe fd05 	bl	800137c <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b64      	cmp	r3, #100	@ 0x64
 800297a:	d903      	bls.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e0ba      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002980:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002984:	4b5e      	ldr	r3, [pc, #376]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800298c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002990:	d0ed      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d02e      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d12a      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029ba:	4b51      	ldr	r3, [pc, #324]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c0:	0c1b      	lsrs	r3, r3, #16
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ce:	0f1b      	lsrs	r3, r3, #28
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	019a      	lsls	r2, r3, #6
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	041b      	lsls	r3, r3, #16
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	061b      	lsls	r3, r3, #24
 80029e8:	431a      	orrs	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	071b      	lsls	r3, r3, #28
 80029ee:	4944      	ldr	r1, [pc, #272]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80029f6:	4b42      	ldr	r3, [pc, #264]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029fc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a04:	3b01      	subs	r3, #1
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	493d      	ldr	r1, [pc, #244]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d022      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a24:	d11d      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a26:	4b36      	ldr	r3, [pc, #216]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2c:	0e1b      	lsrs	r3, r3, #24
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a34:	4b32      	ldr	r3, [pc, #200]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a3a:	0f1b      	lsrs	r3, r3, #28
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	019a      	lsls	r2, r3, #6
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	041b      	lsls	r3, r3, #16
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	061b      	lsls	r3, r3, #24
 8002a54:	431a      	orrs	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	071b      	lsls	r3, r3, #28
 8002a5a:	4929      	ldr	r1, [pc, #164]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d028      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a6e:	4b24      	ldr	r3, [pc, #144]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a74:	0e1b      	lsrs	r3, r3, #24
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a7c:	4b20      	ldr	r3, [pc, #128]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a82:	0c1b      	lsrs	r3, r3, #16
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	019a      	lsls	r2, r3, #6
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	041b      	lsls	r3, r3, #16
 8002a94:	431a      	orrs	r2, r3
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	061b      	lsls	r3, r3, #24
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	071b      	lsls	r3, r3, #28
 8002aa2:	4917      	ldr	r1, [pc, #92]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002aaa:	4b15      	ldr	r3, [pc, #84]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ab0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab8:	4911      	ldr	r1, [pc, #68]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a0e      	ldr	r2, [pc, #56]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002acc:	f7fe fc56 	bl	800137c <HAL_GetTick>
 8002ad0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ad4:	f7fe fc52 	bl	800137c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b64      	cmp	r3, #100	@ 0x64
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e007      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ae6:	4b06      	ldr	r3, [pc, #24]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002aee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002af2:	d1ef      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3720      	adds	r7, #32
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800

08002b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e049      	b.n	8002baa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7fe fad6 	bl	80010dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3304      	adds	r3, #4
 8002b40:	4619      	mov	r1, r3
 8002b42:	4610      	mov	r0, r2
 8002b44:	f000 f900 	bl	8002d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_TIM_ConfigClockSource+0x1c>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e0b4      	b.n	8002d3a <HAL_TIM_ConfigClockSource+0x186>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	4b56      	ldr	r3, [pc, #344]	@ (8002d44 <HAL_TIM_ConfigClockSource+0x190>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002bf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c08:	d03e      	beq.n	8002c88 <HAL_TIM_ConfigClockSource+0xd4>
 8002c0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c0e:	f200 8087 	bhi.w	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c16:	f000 8086 	beq.w	8002d26 <HAL_TIM_ConfigClockSource+0x172>
 8002c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c1e:	d87f      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c20:	2b70      	cmp	r3, #112	@ 0x70
 8002c22:	d01a      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0xa6>
 8002c24:	2b70      	cmp	r3, #112	@ 0x70
 8002c26:	d87b      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c28:	2b60      	cmp	r3, #96	@ 0x60
 8002c2a:	d050      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x11a>
 8002c2c:	2b60      	cmp	r3, #96	@ 0x60
 8002c2e:	d877      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c30:	2b50      	cmp	r3, #80	@ 0x50
 8002c32:	d03c      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0xfa>
 8002c34:	2b50      	cmp	r3, #80	@ 0x50
 8002c36:	d873      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c38:	2b40      	cmp	r3, #64	@ 0x40
 8002c3a:	d058      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0x13a>
 8002c3c:	2b40      	cmp	r3, #64	@ 0x40
 8002c3e:	d86f      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c40:	2b30      	cmp	r3, #48	@ 0x30
 8002c42:	d064      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x15a>
 8002c44:	2b30      	cmp	r3, #48	@ 0x30
 8002c46:	d86b      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d060      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x15a>
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d867      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d05c      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x15a>
 8002c54:	2b10      	cmp	r3, #16
 8002c56:	d05a      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x15a>
 8002c58:	e062      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c6a:	f000 f993 	bl	8002f94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	609a      	str	r2, [r3, #8]
      break;
 8002c86:	e04f      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c98:	f000 f97c 	bl	8002f94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002caa:	609a      	str	r2, [r3, #8]
      break;
 8002cac:	e03c      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f000 f8f0 	bl	8002ea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2150      	movs	r1, #80	@ 0x50
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f949 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002ccc:	e02c      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f000 f90f 	bl	8002efe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2160      	movs	r1, #96	@ 0x60
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 f939 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002cec:	e01c      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f000 f8d0 	bl	8002ea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2140      	movs	r1, #64	@ 0x40
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f929 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002d0c:	e00c      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4619      	mov	r1, r3
 8002d18:	4610      	mov	r0, r2
 8002d1a:	f000 f920 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002d1e:	e003      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
      break;
 8002d24:	e000      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	fffeff88 	.word	0xfffeff88

08002d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a46      	ldr	r2, [pc, #280]	@ (8002e74 <TIM_Base_SetConfig+0x12c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d013      	beq.n	8002d88 <TIM_Base_SetConfig+0x40>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d66:	d00f      	beq.n	8002d88 <TIM_Base_SetConfig+0x40>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a43      	ldr	r2, [pc, #268]	@ (8002e78 <TIM_Base_SetConfig+0x130>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d00b      	beq.n	8002d88 <TIM_Base_SetConfig+0x40>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a42      	ldr	r2, [pc, #264]	@ (8002e7c <TIM_Base_SetConfig+0x134>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d007      	beq.n	8002d88 <TIM_Base_SetConfig+0x40>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a41      	ldr	r2, [pc, #260]	@ (8002e80 <TIM_Base_SetConfig+0x138>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d003      	beq.n	8002d88 <TIM_Base_SetConfig+0x40>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a40      	ldr	r2, [pc, #256]	@ (8002e84 <TIM_Base_SetConfig+0x13c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d108      	bne.n	8002d9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a35      	ldr	r2, [pc, #212]	@ (8002e74 <TIM_Base_SetConfig+0x12c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d02b      	beq.n	8002dfa <TIM_Base_SetConfig+0xb2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002da8:	d027      	beq.n	8002dfa <TIM_Base_SetConfig+0xb2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a32      	ldr	r2, [pc, #200]	@ (8002e78 <TIM_Base_SetConfig+0x130>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d023      	beq.n	8002dfa <TIM_Base_SetConfig+0xb2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a31      	ldr	r2, [pc, #196]	@ (8002e7c <TIM_Base_SetConfig+0x134>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d01f      	beq.n	8002dfa <TIM_Base_SetConfig+0xb2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a30      	ldr	r2, [pc, #192]	@ (8002e80 <TIM_Base_SetConfig+0x138>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d01b      	beq.n	8002dfa <TIM_Base_SetConfig+0xb2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a2f      	ldr	r2, [pc, #188]	@ (8002e84 <TIM_Base_SetConfig+0x13c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d017      	beq.n	8002dfa <TIM_Base_SetConfig+0xb2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a2e      	ldr	r2, [pc, #184]	@ (8002e88 <TIM_Base_SetConfig+0x140>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <TIM_Base_SetConfig+0xb2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a2d      	ldr	r2, [pc, #180]	@ (8002e8c <TIM_Base_SetConfig+0x144>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00f      	beq.n	8002dfa <TIM_Base_SetConfig+0xb2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a2c      	ldr	r2, [pc, #176]	@ (8002e90 <TIM_Base_SetConfig+0x148>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00b      	beq.n	8002dfa <TIM_Base_SetConfig+0xb2>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a2b      	ldr	r2, [pc, #172]	@ (8002e94 <TIM_Base_SetConfig+0x14c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d007      	beq.n	8002dfa <TIM_Base_SetConfig+0xb2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a2a      	ldr	r2, [pc, #168]	@ (8002e98 <TIM_Base_SetConfig+0x150>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d003      	beq.n	8002dfa <TIM_Base_SetConfig+0xb2>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a29      	ldr	r2, [pc, #164]	@ (8002e9c <TIM_Base_SetConfig+0x154>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d108      	bne.n	8002e0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a10      	ldr	r2, [pc, #64]	@ (8002e74 <TIM_Base_SetConfig+0x12c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d003      	beq.n	8002e40 <TIM_Base_SetConfig+0xf8>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a12      	ldr	r2, [pc, #72]	@ (8002e84 <TIM_Base_SetConfig+0x13c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d103      	bne.n	8002e48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d105      	bne.n	8002e66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f023 0201 	bic.w	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	611a      	str	r2, [r3, #16]
  }
}
 8002e66:	bf00      	nop
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40010000 	.word	0x40010000
 8002e78:	40000400 	.word	0x40000400
 8002e7c:	40000800 	.word	0x40000800
 8002e80:	40000c00 	.word	0x40000c00
 8002e84:	40010400 	.word	0x40010400
 8002e88:	40014000 	.word	0x40014000
 8002e8c:	40014400 	.word	0x40014400
 8002e90:	40014800 	.word	0x40014800
 8002e94:	40001800 	.word	0x40001800
 8002e98:	40001c00 	.word	0x40001c00
 8002e9c:	40002000 	.word	0x40002000

08002ea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	f023 0201 	bic.w	r2, r3, #1
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f023 030a 	bic.w	r3, r3, #10
 8002edc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	621a      	str	r2, [r3, #32]
}
 8002ef2:	bf00      	nop
 8002ef4:	371c      	adds	r7, #28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b087      	sub	sp, #28
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	f023 0210 	bic.w	r2, r3, #16
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	031b      	lsls	r3, r3, #12
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	621a      	str	r2, [r3, #32]
}
 8002f52:	bf00      	nop
 8002f54:	371c      	adds	r7, #28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f043 0307 	orr.w	r3, r3, #7
 8002f80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	609a      	str	r2, [r3, #8]
}
 8002f88:	bf00      	nop
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	021a      	lsls	r2, r3, #8
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	609a      	str	r2, [r3, #8]
}
 8002fc8:	bf00      	nop
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e06d      	b.n	80030c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a30      	ldr	r2, [pc, #192]	@ (80030d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d004      	beq.n	8003020 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a2f      	ldr	r2, [pc, #188]	@ (80030d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d108      	bne.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003026:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003038:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4313      	orrs	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a20      	ldr	r2, [pc, #128]	@ (80030d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d022      	beq.n	800309c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800305e:	d01d      	beq.n	800309c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1d      	ldr	r2, [pc, #116]	@ (80030dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d018      	beq.n	800309c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1c      	ldr	r2, [pc, #112]	@ (80030e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d013      	beq.n	800309c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1a      	ldr	r2, [pc, #104]	@ (80030e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00e      	beq.n	800309c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a15      	ldr	r2, [pc, #84]	@ (80030d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d009      	beq.n	800309c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a16      	ldr	r2, [pc, #88]	@ (80030e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d004      	beq.n	800309c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a15      	ldr	r2, [pc, #84]	@ (80030ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d10c      	bne.n	80030b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	40010000 	.word	0x40010000
 80030d8:	40010400 	.word	0x40010400
 80030dc:	40000400 	.word	0x40000400
 80030e0:	40000800 	.word	0x40000800
 80030e4:	40000c00 	.word	0x40000c00
 80030e8:	40014000 	.word	0x40014000
 80030ec:	40001800 	.word	0x40001800

080030f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e040      	b.n	8003184 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fe f858 	bl	80011c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2224      	movs	r2, #36	@ 0x24
 800311c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0201 	bic.w	r2, r2, #1
 800312c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fbf2 	bl	8003920 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f98b 	bl	8003458 <UART_SetConfig>
 8003142:	4603      	mov	r3, r0
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e01b      	b.n	8003184 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800315a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800316a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fc71 	bl	8003a64 <UART_CheckIdleState>
 8003182:	4603      	mov	r3, r0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08a      	sub	sp, #40	@ 0x28
 8003190:	af02      	add	r7, sp, #8
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	4613      	mov	r3, r2
 800319a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031a0:	2b20      	cmp	r3, #32
 80031a2:	d177      	bne.n	8003294 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_UART_Transmit+0x24>
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e070      	b.n	8003296 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2221      	movs	r2, #33	@ 0x21
 80031c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031c2:	f7fe f8db 	bl	800137c <HAL_GetTick>
 80031c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	88fa      	ldrh	r2, [r7, #6]
 80031cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	88fa      	ldrh	r2, [r7, #6]
 80031d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031e0:	d108      	bne.n	80031f4 <HAL_UART_Transmit+0x68>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d104      	bne.n	80031f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	61bb      	str	r3, [r7, #24]
 80031f2:	e003      	b.n	80031fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031fc:	e02f      	b.n	800325e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2200      	movs	r2, #0
 8003206:	2180      	movs	r1, #128	@ 0x80
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 fc82 	bl	8003b12 <UART_WaitOnFlagUntilTimeout>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d004      	beq.n	800321e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e03b      	b.n	8003296 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10b      	bne.n	800323c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003232:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	3302      	adds	r3, #2
 8003238:	61bb      	str	r3, [r7, #24]
 800323a:	e007      	b.n	800324c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	781a      	ldrb	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3301      	adds	r3, #1
 800324a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003252:	b29b      	uxth	r3, r3
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1c9      	bne.n	80031fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2200      	movs	r2, #0
 8003272:	2140      	movs	r1, #64	@ 0x40
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 fc4c 	bl	8003b12 <UART_WaitOnFlagUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d004      	beq.n	800328a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2220      	movs	r2, #32
 8003284:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e005      	b.n	8003296 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2220      	movs	r2, #32
 800328e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	e000      	b.n	8003296 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003294:	2302      	movs	r3, #2
  }
}
 8003296:	4618      	mov	r0, r3
 8003298:	3720      	adds	r7, #32
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b08a      	sub	sp, #40	@ 0x28
 80032a2:	af02      	add	r7, sp, #8
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	4613      	mov	r3, r2
 80032ac:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	f040 80b5 	bne.w	8003424 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <HAL_UART_Receive+0x28>
 80032c0:	88fb      	ldrh	r3, [r7, #6]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e0ad      	b.n	8003426 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2222      	movs	r2, #34	@ 0x22
 80032d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032e0:	f7fe f84c 	bl	800137c <HAL_GetTick>
 80032e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	88fa      	ldrh	r2, [r7, #6]
 80032ea:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	88fa      	ldrh	r2, [r7, #6]
 80032f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032fe:	d10e      	bne.n	800331e <HAL_UART_Receive+0x80>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d105      	bne.n	8003314 <HAL_UART_Receive+0x76>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800330e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003312:	e02d      	b.n	8003370 <HAL_UART_Receive+0xd2>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	22ff      	movs	r2, #255	@ 0xff
 8003318:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800331c:	e028      	b.n	8003370 <HAL_UART_Receive+0xd2>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10d      	bne.n	8003342 <HAL_UART_Receive+0xa4>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d104      	bne.n	8003338 <HAL_UART_Receive+0x9a>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	22ff      	movs	r2, #255	@ 0xff
 8003332:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003336:	e01b      	b.n	8003370 <HAL_UART_Receive+0xd2>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	227f      	movs	r2, #127	@ 0x7f
 800333c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003340:	e016      	b.n	8003370 <HAL_UART_Receive+0xd2>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800334a:	d10d      	bne.n	8003368 <HAL_UART_Receive+0xca>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d104      	bne.n	800335e <HAL_UART_Receive+0xc0>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	227f      	movs	r2, #127	@ 0x7f
 8003358:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800335c:	e008      	b.n	8003370 <HAL_UART_Receive+0xd2>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	223f      	movs	r2, #63	@ 0x3f
 8003362:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003366:	e003      	b.n	8003370 <HAL_UART_Receive+0xd2>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003376:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003380:	d108      	bne.n	8003394 <HAL_UART_Receive+0xf6>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d104      	bne.n	8003394 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	e003      	b.n	800339c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003398:	2300      	movs	r3, #0
 800339a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800339c:	e036      	b.n	800340c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2200      	movs	r2, #0
 80033a6:	2120      	movs	r1, #32
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 fbb2 	bl	8003b12 <UART_WaitOnFlagUntilTimeout>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e032      	b.n	8003426 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10c      	bne.n	80033e0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	8a7b      	ldrh	r3, [r7, #18]
 80033d0:	4013      	ands	r3, r2
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	3302      	adds	r3, #2
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	e00c      	b.n	80033fa <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	8a7b      	ldrh	r3, [r7, #18]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	4013      	ands	r3, r2
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	3301      	adds	r3, #1
 80033f8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1c2      	bne.n	800339e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	e000      	b.n	8003426 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003424:	2302      	movs	r3, #2
  }
}
 8003426:	4618      	mov	r0, r3
 8003428:	3720      	adds	r7, #32
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800342e:	b480      	push	{r7}
 8003430:	b085      	sub	sp, #20
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800343a:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003442:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	4313      	orrs	r3, r2
}
 800344a:	4618      	mov	r0, r3
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
	...

08003458 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	431a      	orrs	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	4ba6      	ldr	r3, [pc, #664]	@ (800371c <UART_SetConfig+0x2c4>)
 8003484:	4013      	ands	r3, r2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6812      	ldr	r2, [r2, #0]
 800348a:	6979      	ldr	r1, [r7, #20]
 800348c:	430b      	orrs	r3, r1
 800348e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a94      	ldr	r2, [pc, #592]	@ (8003720 <UART_SetConfig+0x2c8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d120      	bne.n	8003516 <UART_SetConfig+0xbe>
 80034d4:	4b93      	ldr	r3, [pc, #588]	@ (8003724 <UART_SetConfig+0x2cc>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d816      	bhi.n	8003510 <UART_SetConfig+0xb8>
 80034e2:	a201      	add	r2, pc, #4	@ (adr r2, 80034e8 <UART_SetConfig+0x90>)
 80034e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e8:	080034f9 	.word	0x080034f9
 80034ec:	08003505 	.word	0x08003505
 80034f0:	080034ff 	.word	0x080034ff
 80034f4:	0800350b 	.word	0x0800350b
 80034f8:	2301      	movs	r3, #1
 80034fa:	77fb      	strb	r3, [r7, #31]
 80034fc:	e150      	b.n	80037a0 <UART_SetConfig+0x348>
 80034fe:	2302      	movs	r3, #2
 8003500:	77fb      	strb	r3, [r7, #31]
 8003502:	e14d      	b.n	80037a0 <UART_SetConfig+0x348>
 8003504:	2304      	movs	r3, #4
 8003506:	77fb      	strb	r3, [r7, #31]
 8003508:	e14a      	b.n	80037a0 <UART_SetConfig+0x348>
 800350a:	2308      	movs	r3, #8
 800350c:	77fb      	strb	r3, [r7, #31]
 800350e:	e147      	b.n	80037a0 <UART_SetConfig+0x348>
 8003510:	2310      	movs	r3, #16
 8003512:	77fb      	strb	r3, [r7, #31]
 8003514:	e144      	b.n	80037a0 <UART_SetConfig+0x348>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a83      	ldr	r2, [pc, #524]	@ (8003728 <UART_SetConfig+0x2d0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d132      	bne.n	8003586 <UART_SetConfig+0x12e>
 8003520:	4b80      	ldr	r3, [pc, #512]	@ (8003724 <UART_SetConfig+0x2cc>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003526:	f003 030c 	and.w	r3, r3, #12
 800352a:	2b0c      	cmp	r3, #12
 800352c:	d828      	bhi.n	8003580 <UART_SetConfig+0x128>
 800352e:	a201      	add	r2, pc, #4	@ (adr r2, 8003534 <UART_SetConfig+0xdc>)
 8003530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003534:	08003569 	.word	0x08003569
 8003538:	08003581 	.word	0x08003581
 800353c:	08003581 	.word	0x08003581
 8003540:	08003581 	.word	0x08003581
 8003544:	08003575 	.word	0x08003575
 8003548:	08003581 	.word	0x08003581
 800354c:	08003581 	.word	0x08003581
 8003550:	08003581 	.word	0x08003581
 8003554:	0800356f 	.word	0x0800356f
 8003558:	08003581 	.word	0x08003581
 800355c:	08003581 	.word	0x08003581
 8003560:	08003581 	.word	0x08003581
 8003564:	0800357b 	.word	0x0800357b
 8003568:	2300      	movs	r3, #0
 800356a:	77fb      	strb	r3, [r7, #31]
 800356c:	e118      	b.n	80037a0 <UART_SetConfig+0x348>
 800356e:	2302      	movs	r3, #2
 8003570:	77fb      	strb	r3, [r7, #31]
 8003572:	e115      	b.n	80037a0 <UART_SetConfig+0x348>
 8003574:	2304      	movs	r3, #4
 8003576:	77fb      	strb	r3, [r7, #31]
 8003578:	e112      	b.n	80037a0 <UART_SetConfig+0x348>
 800357a:	2308      	movs	r3, #8
 800357c:	77fb      	strb	r3, [r7, #31]
 800357e:	e10f      	b.n	80037a0 <UART_SetConfig+0x348>
 8003580:	2310      	movs	r3, #16
 8003582:	77fb      	strb	r3, [r7, #31]
 8003584:	e10c      	b.n	80037a0 <UART_SetConfig+0x348>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a68      	ldr	r2, [pc, #416]	@ (800372c <UART_SetConfig+0x2d4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d120      	bne.n	80035d2 <UART_SetConfig+0x17a>
 8003590:	4b64      	ldr	r3, [pc, #400]	@ (8003724 <UART_SetConfig+0x2cc>)
 8003592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003596:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800359a:	2b30      	cmp	r3, #48	@ 0x30
 800359c:	d013      	beq.n	80035c6 <UART_SetConfig+0x16e>
 800359e:	2b30      	cmp	r3, #48	@ 0x30
 80035a0:	d814      	bhi.n	80035cc <UART_SetConfig+0x174>
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	d009      	beq.n	80035ba <UART_SetConfig+0x162>
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	d810      	bhi.n	80035cc <UART_SetConfig+0x174>
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <UART_SetConfig+0x15c>
 80035ae:	2b10      	cmp	r3, #16
 80035b0:	d006      	beq.n	80035c0 <UART_SetConfig+0x168>
 80035b2:	e00b      	b.n	80035cc <UART_SetConfig+0x174>
 80035b4:	2300      	movs	r3, #0
 80035b6:	77fb      	strb	r3, [r7, #31]
 80035b8:	e0f2      	b.n	80037a0 <UART_SetConfig+0x348>
 80035ba:	2302      	movs	r3, #2
 80035bc:	77fb      	strb	r3, [r7, #31]
 80035be:	e0ef      	b.n	80037a0 <UART_SetConfig+0x348>
 80035c0:	2304      	movs	r3, #4
 80035c2:	77fb      	strb	r3, [r7, #31]
 80035c4:	e0ec      	b.n	80037a0 <UART_SetConfig+0x348>
 80035c6:	2308      	movs	r3, #8
 80035c8:	77fb      	strb	r3, [r7, #31]
 80035ca:	e0e9      	b.n	80037a0 <UART_SetConfig+0x348>
 80035cc:	2310      	movs	r3, #16
 80035ce:	77fb      	strb	r3, [r7, #31]
 80035d0:	e0e6      	b.n	80037a0 <UART_SetConfig+0x348>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a56      	ldr	r2, [pc, #344]	@ (8003730 <UART_SetConfig+0x2d8>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d120      	bne.n	800361e <UART_SetConfig+0x1c6>
 80035dc:	4b51      	ldr	r3, [pc, #324]	@ (8003724 <UART_SetConfig+0x2cc>)
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80035e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80035e8:	d013      	beq.n	8003612 <UART_SetConfig+0x1ba>
 80035ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80035ec:	d814      	bhi.n	8003618 <UART_SetConfig+0x1c0>
 80035ee:	2b80      	cmp	r3, #128	@ 0x80
 80035f0:	d009      	beq.n	8003606 <UART_SetConfig+0x1ae>
 80035f2:	2b80      	cmp	r3, #128	@ 0x80
 80035f4:	d810      	bhi.n	8003618 <UART_SetConfig+0x1c0>
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <UART_SetConfig+0x1a8>
 80035fa:	2b40      	cmp	r3, #64	@ 0x40
 80035fc:	d006      	beq.n	800360c <UART_SetConfig+0x1b4>
 80035fe:	e00b      	b.n	8003618 <UART_SetConfig+0x1c0>
 8003600:	2300      	movs	r3, #0
 8003602:	77fb      	strb	r3, [r7, #31]
 8003604:	e0cc      	b.n	80037a0 <UART_SetConfig+0x348>
 8003606:	2302      	movs	r3, #2
 8003608:	77fb      	strb	r3, [r7, #31]
 800360a:	e0c9      	b.n	80037a0 <UART_SetConfig+0x348>
 800360c:	2304      	movs	r3, #4
 800360e:	77fb      	strb	r3, [r7, #31]
 8003610:	e0c6      	b.n	80037a0 <UART_SetConfig+0x348>
 8003612:	2308      	movs	r3, #8
 8003614:	77fb      	strb	r3, [r7, #31]
 8003616:	e0c3      	b.n	80037a0 <UART_SetConfig+0x348>
 8003618:	2310      	movs	r3, #16
 800361a:	77fb      	strb	r3, [r7, #31]
 800361c:	e0c0      	b.n	80037a0 <UART_SetConfig+0x348>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a44      	ldr	r2, [pc, #272]	@ (8003734 <UART_SetConfig+0x2dc>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d125      	bne.n	8003674 <UART_SetConfig+0x21c>
 8003628:	4b3e      	ldr	r3, [pc, #248]	@ (8003724 <UART_SetConfig+0x2cc>)
 800362a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003632:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003636:	d017      	beq.n	8003668 <UART_SetConfig+0x210>
 8003638:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800363c:	d817      	bhi.n	800366e <UART_SetConfig+0x216>
 800363e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003642:	d00b      	beq.n	800365c <UART_SetConfig+0x204>
 8003644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003648:	d811      	bhi.n	800366e <UART_SetConfig+0x216>
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <UART_SetConfig+0x1fe>
 800364e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003652:	d006      	beq.n	8003662 <UART_SetConfig+0x20a>
 8003654:	e00b      	b.n	800366e <UART_SetConfig+0x216>
 8003656:	2300      	movs	r3, #0
 8003658:	77fb      	strb	r3, [r7, #31]
 800365a:	e0a1      	b.n	80037a0 <UART_SetConfig+0x348>
 800365c:	2302      	movs	r3, #2
 800365e:	77fb      	strb	r3, [r7, #31]
 8003660:	e09e      	b.n	80037a0 <UART_SetConfig+0x348>
 8003662:	2304      	movs	r3, #4
 8003664:	77fb      	strb	r3, [r7, #31]
 8003666:	e09b      	b.n	80037a0 <UART_SetConfig+0x348>
 8003668:	2308      	movs	r3, #8
 800366a:	77fb      	strb	r3, [r7, #31]
 800366c:	e098      	b.n	80037a0 <UART_SetConfig+0x348>
 800366e:	2310      	movs	r3, #16
 8003670:	77fb      	strb	r3, [r7, #31]
 8003672:	e095      	b.n	80037a0 <UART_SetConfig+0x348>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a2f      	ldr	r2, [pc, #188]	@ (8003738 <UART_SetConfig+0x2e0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d125      	bne.n	80036ca <UART_SetConfig+0x272>
 800367e:	4b29      	ldr	r3, [pc, #164]	@ (8003724 <UART_SetConfig+0x2cc>)
 8003680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003684:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003688:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800368c:	d017      	beq.n	80036be <UART_SetConfig+0x266>
 800368e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003692:	d817      	bhi.n	80036c4 <UART_SetConfig+0x26c>
 8003694:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003698:	d00b      	beq.n	80036b2 <UART_SetConfig+0x25a>
 800369a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800369e:	d811      	bhi.n	80036c4 <UART_SetConfig+0x26c>
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <UART_SetConfig+0x254>
 80036a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036a8:	d006      	beq.n	80036b8 <UART_SetConfig+0x260>
 80036aa:	e00b      	b.n	80036c4 <UART_SetConfig+0x26c>
 80036ac:	2301      	movs	r3, #1
 80036ae:	77fb      	strb	r3, [r7, #31]
 80036b0:	e076      	b.n	80037a0 <UART_SetConfig+0x348>
 80036b2:	2302      	movs	r3, #2
 80036b4:	77fb      	strb	r3, [r7, #31]
 80036b6:	e073      	b.n	80037a0 <UART_SetConfig+0x348>
 80036b8:	2304      	movs	r3, #4
 80036ba:	77fb      	strb	r3, [r7, #31]
 80036bc:	e070      	b.n	80037a0 <UART_SetConfig+0x348>
 80036be:	2308      	movs	r3, #8
 80036c0:	77fb      	strb	r3, [r7, #31]
 80036c2:	e06d      	b.n	80037a0 <UART_SetConfig+0x348>
 80036c4:	2310      	movs	r3, #16
 80036c6:	77fb      	strb	r3, [r7, #31]
 80036c8:	e06a      	b.n	80037a0 <UART_SetConfig+0x348>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1b      	ldr	r2, [pc, #108]	@ (800373c <UART_SetConfig+0x2e4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d138      	bne.n	8003746 <UART_SetConfig+0x2ee>
 80036d4:	4b13      	ldr	r3, [pc, #76]	@ (8003724 <UART_SetConfig+0x2cc>)
 80036d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036da:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80036de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036e2:	d017      	beq.n	8003714 <UART_SetConfig+0x2bc>
 80036e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036e8:	d82a      	bhi.n	8003740 <UART_SetConfig+0x2e8>
 80036ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036ee:	d00b      	beq.n	8003708 <UART_SetConfig+0x2b0>
 80036f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036f4:	d824      	bhi.n	8003740 <UART_SetConfig+0x2e8>
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <UART_SetConfig+0x2aa>
 80036fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036fe:	d006      	beq.n	800370e <UART_SetConfig+0x2b6>
 8003700:	e01e      	b.n	8003740 <UART_SetConfig+0x2e8>
 8003702:	2300      	movs	r3, #0
 8003704:	77fb      	strb	r3, [r7, #31]
 8003706:	e04b      	b.n	80037a0 <UART_SetConfig+0x348>
 8003708:	2302      	movs	r3, #2
 800370a:	77fb      	strb	r3, [r7, #31]
 800370c:	e048      	b.n	80037a0 <UART_SetConfig+0x348>
 800370e:	2304      	movs	r3, #4
 8003710:	77fb      	strb	r3, [r7, #31]
 8003712:	e045      	b.n	80037a0 <UART_SetConfig+0x348>
 8003714:	2308      	movs	r3, #8
 8003716:	77fb      	strb	r3, [r7, #31]
 8003718:	e042      	b.n	80037a0 <UART_SetConfig+0x348>
 800371a:	bf00      	nop
 800371c:	efff69f3 	.word	0xefff69f3
 8003720:	40011000 	.word	0x40011000
 8003724:	40023800 	.word	0x40023800
 8003728:	40004400 	.word	0x40004400
 800372c:	40004800 	.word	0x40004800
 8003730:	40004c00 	.word	0x40004c00
 8003734:	40005000 	.word	0x40005000
 8003738:	40011400 	.word	0x40011400
 800373c:	40007800 	.word	0x40007800
 8003740:	2310      	movs	r3, #16
 8003742:	77fb      	strb	r3, [r7, #31]
 8003744:	e02c      	b.n	80037a0 <UART_SetConfig+0x348>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a72      	ldr	r2, [pc, #456]	@ (8003914 <UART_SetConfig+0x4bc>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d125      	bne.n	800379c <UART_SetConfig+0x344>
 8003750:	4b71      	ldr	r3, [pc, #452]	@ (8003918 <UART_SetConfig+0x4c0>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003756:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800375a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800375e:	d017      	beq.n	8003790 <UART_SetConfig+0x338>
 8003760:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003764:	d817      	bhi.n	8003796 <UART_SetConfig+0x33e>
 8003766:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800376a:	d00b      	beq.n	8003784 <UART_SetConfig+0x32c>
 800376c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003770:	d811      	bhi.n	8003796 <UART_SetConfig+0x33e>
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <UART_SetConfig+0x326>
 8003776:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800377a:	d006      	beq.n	800378a <UART_SetConfig+0x332>
 800377c:	e00b      	b.n	8003796 <UART_SetConfig+0x33e>
 800377e:	2300      	movs	r3, #0
 8003780:	77fb      	strb	r3, [r7, #31]
 8003782:	e00d      	b.n	80037a0 <UART_SetConfig+0x348>
 8003784:	2302      	movs	r3, #2
 8003786:	77fb      	strb	r3, [r7, #31]
 8003788:	e00a      	b.n	80037a0 <UART_SetConfig+0x348>
 800378a:	2304      	movs	r3, #4
 800378c:	77fb      	strb	r3, [r7, #31]
 800378e:	e007      	b.n	80037a0 <UART_SetConfig+0x348>
 8003790:	2308      	movs	r3, #8
 8003792:	77fb      	strb	r3, [r7, #31]
 8003794:	e004      	b.n	80037a0 <UART_SetConfig+0x348>
 8003796:	2310      	movs	r3, #16
 8003798:	77fb      	strb	r3, [r7, #31]
 800379a:	e001      	b.n	80037a0 <UART_SetConfig+0x348>
 800379c:	2310      	movs	r3, #16
 800379e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037a8:	d15b      	bne.n	8003862 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80037aa:	7ffb      	ldrb	r3, [r7, #31]
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d828      	bhi.n	8003802 <UART_SetConfig+0x3aa>
 80037b0:	a201      	add	r2, pc, #4	@ (adr r2, 80037b8 <UART_SetConfig+0x360>)
 80037b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b6:	bf00      	nop
 80037b8:	080037dd 	.word	0x080037dd
 80037bc:	080037e5 	.word	0x080037e5
 80037c0:	080037ed 	.word	0x080037ed
 80037c4:	08003803 	.word	0x08003803
 80037c8:	080037f3 	.word	0x080037f3
 80037cc:	08003803 	.word	0x08003803
 80037d0:	08003803 	.word	0x08003803
 80037d4:	08003803 	.word	0x08003803
 80037d8:	080037fb 	.word	0x080037fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037dc:	f7fe fd7a 	bl	80022d4 <HAL_RCC_GetPCLK1Freq>
 80037e0:	61b8      	str	r0, [r7, #24]
        break;
 80037e2:	e013      	b.n	800380c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037e4:	f7fe fd8a 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80037e8:	61b8      	str	r0, [r7, #24]
        break;
 80037ea:	e00f      	b.n	800380c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037ec:	4b4b      	ldr	r3, [pc, #300]	@ (800391c <UART_SetConfig+0x4c4>)
 80037ee:	61bb      	str	r3, [r7, #24]
        break;
 80037f0:	e00c      	b.n	800380c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037f2:	f7fe fc9d 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 80037f6:	61b8      	str	r0, [r7, #24]
        break;
 80037f8:	e008      	b.n	800380c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037fe:	61bb      	str	r3, [r7, #24]
        break;
 8003800:	e004      	b.n	800380c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003802:	2300      	movs	r3, #0
 8003804:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	77bb      	strb	r3, [r7, #30]
        break;
 800380a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d074      	beq.n	80038fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	005a      	lsls	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	085b      	lsrs	r3, r3, #1
 800381c:	441a      	add	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	fbb2 f3f3 	udiv	r3, r2, r3
 8003826:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	2b0f      	cmp	r3, #15
 800382c:	d916      	bls.n	800385c <UART_SetConfig+0x404>
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003834:	d212      	bcs.n	800385c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	b29b      	uxth	r3, r3
 800383a:	f023 030f 	bic.w	r3, r3, #15
 800383e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	085b      	lsrs	r3, r3, #1
 8003844:	b29b      	uxth	r3, r3
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	b29a      	uxth	r2, r3
 800384c:	89fb      	ldrh	r3, [r7, #14]
 800384e:	4313      	orrs	r3, r2
 8003850:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	89fa      	ldrh	r2, [r7, #14]
 8003858:	60da      	str	r2, [r3, #12]
 800385a:	e04f      	b.n	80038fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	77bb      	strb	r3, [r7, #30]
 8003860:	e04c      	b.n	80038fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003862:	7ffb      	ldrb	r3, [r7, #31]
 8003864:	2b08      	cmp	r3, #8
 8003866:	d828      	bhi.n	80038ba <UART_SetConfig+0x462>
 8003868:	a201      	add	r2, pc, #4	@ (adr r2, 8003870 <UART_SetConfig+0x418>)
 800386a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386e:	bf00      	nop
 8003870:	08003895 	.word	0x08003895
 8003874:	0800389d 	.word	0x0800389d
 8003878:	080038a5 	.word	0x080038a5
 800387c:	080038bb 	.word	0x080038bb
 8003880:	080038ab 	.word	0x080038ab
 8003884:	080038bb 	.word	0x080038bb
 8003888:	080038bb 	.word	0x080038bb
 800388c:	080038bb 	.word	0x080038bb
 8003890:	080038b3 	.word	0x080038b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003894:	f7fe fd1e 	bl	80022d4 <HAL_RCC_GetPCLK1Freq>
 8003898:	61b8      	str	r0, [r7, #24]
        break;
 800389a:	e013      	b.n	80038c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800389c:	f7fe fd2e 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80038a0:	61b8      	str	r0, [r7, #24]
        break;
 80038a2:	e00f      	b.n	80038c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038a4:	4b1d      	ldr	r3, [pc, #116]	@ (800391c <UART_SetConfig+0x4c4>)
 80038a6:	61bb      	str	r3, [r7, #24]
        break;
 80038a8:	e00c      	b.n	80038c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038aa:	f7fe fc41 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 80038ae:	61b8      	str	r0, [r7, #24]
        break;
 80038b0:	e008      	b.n	80038c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038b6:	61bb      	str	r3, [r7, #24]
        break;
 80038b8:	e004      	b.n	80038c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	77bb      	strb	r3, [r7, #30]
        break;
 80038c2:	bf00      	nop
    }

    if (pclk != 0U)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d018      	beq.n	80038fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	085a      	lsrs	r2, r3, #1
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	441a      	add	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	2b0f      	cmp	r3, #15
 80038e2:	d909      	bls.n	80038f8 <UART_SetConfig+0x4a0>
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ea:	d205      	bcs.n	80038f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	e001      	b.n	80038fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003908:	7fbb      	ldrb	r3, [r7, #30]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3720      	adds	r7, #32
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40007c00 	.word	0x40007c00
 8003918:	40023800 	.word	0x40023800
 800391c:	00f42400 	.word	0x00f42400

08003920 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00a      	beq.n	800398e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01a      	beq.n	8003a36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a1e:	d10a      	bne.n	8003a36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	605a      	str	r2, [r3, #4]
  }
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08c      	sub	sp, #48	@ 0x30
 8003a68:	af02      	add	r7, sp, #8
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a74:	f7fd fc82 	bl	800137c <HAL_GetTick>
 8003a78:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d12e      	bne.n	8003ae6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a90:	2200      	movs	r2, #0
 8003a92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f83b 	bl	8003b12 <UART_WaitOnFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d021      	beq.n	8003ae6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	e853 3f00 	ldrex	r3, [r3]
 8003aae:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ab6:	623b      	str	r3, [r7, #32]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	61fb      	str	r3, [r7, #28]
 8003ac2:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac4:	69b9      	ldr	r1, [r7, #24]
 8003ac6:	69fa      	ldr	r2, [r7, #28]
 8003ac8:	e841 2300 	strex	r3, r2, [r1]
 8003acc:	617b      	str	r3, [r7, #20]
   return(result);
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e6      	bne.n	8003aa2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e011      	b.n	8003b0a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3728      	adds	r7, #40	@ 0x28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	60f8      	str	r0, [r7, #12]
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	603b      	str	r3, [r7, #0]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b22:	e04f      	b.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2a:	d04b      	beq.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b2c:	f7fd fc26 	bl	800137c <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d302      	bcc.n	8003b42 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e04e      	b.n	8003be4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d037      	beq.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b80      	cmp	r3, #128	@ 0x80
 8003b58:	d034      	beq.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b40      	cmp	r3, #64	@ 0x40
 8003b5e:	d031      	beq.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d110      	bne.n	8003b90 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2208      	movs	r2, #8
 8003b74:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 f838 	bl	8003bec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2208      	movs	r2, #8
 8003b80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e029      	b.n	8003be4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b9e:	d111      	bne.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ba8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 f81e 	bl	8003bec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e00f      	b.n	8003be4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69da      	ldr	r2, [r3, #28]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	bf0c      	ite	eq
 8003bd4:	2301      	moveq	r3, #1
 8003bd6:	2300      	movne	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d0a0      	beq.n	8003b24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b095      	sub	sp, #84	@ 0x54
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bfc:	e853 3f00 	ldrex	r3, [r3]
 8003c00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c12:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c14:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1e6      	bne.n	8003bf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3308      	adds	r3, #8
 8003c2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	e853 3f00 	ldrex	r3, [r3]
 8003c34:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f023 0301 	bic.w	r3, r3, #1
 8003c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3308      	adds	r3, #8
 8003c44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c4e:	e841 2300 	strex	r3, r2, [r1]
 8003c52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e5      	bne.n	8003c26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d118      	bne.n	8003c94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	e853 3f00 	ldrex	r3, [r3]
 8003c6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f023 0310 	bic.w	r3, r3, #16
 8003c76:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c84:	6979      	ldr	r1, [r7, #20]
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	e841 2300 	strex	r3, r2, [r1]
 8003c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1e6      	bne.n	8003c62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ca8:	bf00      	nop
 8003caa:	3754      	adds	r7, #84	@ 0x54
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <memset>:
 8003cb4:	4402      	add	r2, r0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d100      	bne.n	8003cbe <memset+0xa>
 8003cbc:	4770      	bx	lr
 8003cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8003cc2:	e7f9      	b.n	8003cb8 <memset+0x4>

08003cc4 <__libc_init_array>:
 8003cc4:	b570      	push	{r4, r5, r6, lr}
 8003cc6:	4d0d      	ldr	r5, [pc, #52]	@ (8003cfc <__libc_init_array+0x38>)
 8003cc8:	4c0d      	ldr	r4, [pc, #52]	@ (8003d00 <__libc_init_array+0x3c>)
 8003cca:	1b64      	subs	r4, r4, r5
 8003ccc:	10a4      	asrs	r4, r4, #2
 8003cce:	2600      	movs	r6, #0
 8003cd0:	42a6      	cmp	r6, r4
 8003cd2:	d109      	bne.n	8003ce8 <__libc_init_array+0x24>
 8003cd4:	4d0b      	ldr	r5, [pc, #44]	@ (8003d04 <__libc_init_array+0x40>)
 8003cd6:	4c0c      	ldr	r4, [pc, #48]	@ (8003d08 <__libc_init_array+0x44>)
 8003cd8:	f000 f818 	bl	8003d0c <_init>
 8003cdc:	1b64      	subs	r4, r4, r5
 8003cde:	10a4      	asrs	r4, r4, #2
 8003ce0:	2600      	movs	r6, #0
 8003ce2:	42a6      	cmp	r6, r4
 8003ce4:	d105      	bne.n	8003cf2 <__libc_init_array+0x2e>
 8003ce6:	bd70      	pop	{r4, r5, r6, pc}
 8003ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cec:	4798      	blx	r3
 8003cee:	3601      	adds	r6, #1
 8003cf0:	e7ee      	b.n	8003cd0 <__libc_init_array+0xc>
 8003cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cf6:	4798      	blx	r3
 8003cf8:	3601      	adds	r6, #1
 8003cfa:	e7f2      	b.n	8003ce2 <__libc_init_array+0x1e>
 8003cfc:	08003e6c 	.word	0x08003e6c
 8003d00:	08003e6c 	.word	0x08003e6c
 8003d04:	08003e6c 	.word	0x08003e6c
 8003d08:	08003e70 	.word	0x08003e70

08003d0c <_init>:
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	bf00      	nop
 8003d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d12:	bc08      	pop	{r3}
 8003d14:	469e      	mov	lr, r3
 8003d16:	4770      	bx	lr

08003d18 <_fini>:
 8003d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1a:	bf00      	nop
 8003d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1e:	bc08      	pop	{r3}
 8003d20:	469e      	mov	lr, r3
 8003d22:	4770      	bx	lr
